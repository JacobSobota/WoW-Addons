
PlaterDB = {
["captured_spells"] = {
[451387] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Lavabender",
["npcID"] = 224249,
},
[451261] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Earthcaller",
["npcID"] = 224219,
},
[447261] = {
["encounterName"] = "General Umbriss",
["source"] = "General Umbriss",
["npcID"] = 39625,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1051,
},
[450087] = {
["encounterName"] = "Erudax",
["type"] = "DEBUFF",
["source"] = "Void Tendril",
["npcID"] = 223981,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 1049,
},
[451040] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Twilight Enforcer",
["npcID"] = 224276,
},
[451612] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Destroyer",
["npcID"] = 224609,
},
[386176] = {
["type"] = "BUFF",
["source"] = "Unknown",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 17252,
},
[451613] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Twilight Destroyer",
["npcID"] = 224609,
},
[451391] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Faceless Corruptor",
["npcID"] = 39392,
},
[451614] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Destroyer",
["npcID"] = 224609,
},
[461870] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Xal'atath",
["npcID"] = 229227,
},
[451996] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1050,
},
[462220] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[451965] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Molten Giant",
["npcID"] = 40166,
},
[456696] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Brute",
["npcID"] = 224152,
},
[451394] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Faceless Corruptor",
["npcID"] = 39392,
},
[192082] = {
["type"] = "BUFF",
["source"] = "Wind Rush Totem",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 97285,
},
[451871] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Earthcaller",
["npcID"] = 224219,
},
[447966] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Drahga Shadowburner",
["npcID"] = 40319,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[447395] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1050,
},
[451364] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Brute",
["npcID"] = 224152,
},
[450095] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Drahga Shadowburner",
["npcID"] = 40319,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[448953] = {
["encounterName"] = "General Umbriss",
["source"] = "General Umbriss",
["npcID"] = 39625,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1051,
},
[76369] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Beguiler",
["npcID"] = 40167,
},
[451939] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Destroyer",
["npcID"] = 224609,
},
[451971] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Molten Giant",
["npcID"] = 40166,
},
[451241] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[461910] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[449687] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1050,
},
[450100] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[457913] = {
["type"] = "BUFF",
["source"] = "Deployed Wind-Wrangling Spire",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 227482,
},
[108446] = {
["isChanneled"] = false,
["source"] = "Unknown",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 417,
},
[208963] = {
["type"] = "BUFF",
["source"] = "Totem of Wrath",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 105427,
},
[448105] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[456773] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[456711] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Lavabender",
["npcID"] = 224249,
},
[456902] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1050,
},
[451378] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Overseer",
["npcID"] = 224221,
},
[448013] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Drahga Shadowburner",
["npcID"] = 40319,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[450077] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[456713] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Lavabender",
["npcID"] = 224249,
},
[383061] = {
["isChanneled"] = false,
["source"] = "Liquid Magma Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97369,
},
[192226] = {
["isChanneled"] = false,
["source"] = "Liquid Magma Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97369,
},
[447268] = {
["encounterName"] = "General Umbriss",
["type"] = "DEBUFF",
["source"] = "General Umbriss",
["npcID"] = 39625,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 1051,
},
[451379] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Overseer",
["npcID"] = 224221,
},
[451395] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Faceless Corruptor",
["npcID"] = 39392,
},
[449444] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1050,
},
[450088] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[462216] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[448057] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[449536] = {
["encounterName"] = "Forgemaster Throngus",
["type"] = "DEBUFF",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 1050,
},
[449985] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[451033] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Twilight Enforcer",
["npcID"] = 224276,
},
[448877] = {
["encounterName"] = "General Umbriss",
["source"] = "General Umbriss",
["npcID"] = 39625,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1051,
},
[451224] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Warlock",
["npcID"] = 224271,
},
[82850] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Invoked Shadowflame Spirit",
["npcID"] = 40357,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[75238] = {
["encounterName"] = "Drahga Shadowburner",
["type"] = "DEBUFF",
["source"] = "Invoked Shadowflame Spirit",
["npcID"] = 40357,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 1048,
},
[448847] = {
["encounterName"] = "General Umbriss",
["source"] = "General Umbriss",
["npcID"] = 39625,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1051,
},
[461904] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[76151] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Twilight Beguiler",
["npcID"] = 40167,
},
[76303] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Drahga Shadowburner",
["npcID"] = 40319,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[76711] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Beguiler",
["npcID"] = 40167,
},
[461513] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[456719] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Mutated Hatchling",
["npcID"] = 224853,
},
[456751] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[449939] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[461895] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[456900] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1050,
},
[449474] = {
["encounterName"] = "Forgemaster Throngus",
["type"] = "DEBUFF",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 1050,
},
[456718] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Mutated Hatchling",
["npcID"] = 224853,
},
[75328] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
},
["profileKeys"] = {
["Furíá - Silvermoon"] = "RedtuzkUI",
["Glazur - Silvermoon"] = "RedtuzkUI",
["Tárcza - Silvermoon"] = "Jundies Plater",
["Táran - Silvermoon"] = "Jundies Plater",
["Strongfist - Silvermoon"] = "Jundies Plater",
["Bonejáw - Silvermoon"] = "RedtuzkUI",
["Pándaren - Silvermoon"] = "Default",
["Vráthion - Silvermoon"] = "Default",
["Drácarion - Silvermoon"] = "Default",
["Bloodywizz - Silvermoon"] = "Jundies Plater",
["Furìà - Silvermoon"] = "Jundies Plater",
},
["captured_casts"] = {
[40844] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonechewer Worker",
["npcID"] = 22963,
},
[16587] = {
["source"] = "Vile Tutor",
["event"] = "SPELL_CAST_START",
["npcID"] = 8548,
},
[450435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Y'tekhi",
["npcID"] = 215660,
},
[453507] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Quartermaster Ze'erik",
["npcID"] = 215988,
},
[426890] = {
["source"] = "Warden of Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 162822,
},
[464769] = {
["encounterName"] = "Ambassador Flamelash",
["source"] = "Burning Spirit",
["npcID"] = 230799,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3047,
},
[438153] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nether Phantom",
["npcID"] = 218429,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[444296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Knight",
["npcID"] = 206696,
},
[426893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[442250] = {
["encounterName"] = "Broodtwister Ovi'nax",
["source"] = "Blood Parasite",
["npcID"] = 220626,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2919,
},
[323496] = {
["source"] = "Flesh Crafter",
["event"] = "SPELL_CAST_START",
["npcID"] = 165872,
},
[56969] = {
["source"] = "Azure Scale-Binder",
["event"] = "SPELL_CAST_START",
["npcID"] = 26735,
},
[440205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[400279] = {
["encounterName"] = "Lord Roccor",
["source"] = "Son of Roccor",
["encounterID"] = 3042,
["event"] = "SPELL_CAST_START",
["npcID"] = 229444,
},
[433040] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Trickster",
["npcID"] = 214343,
},
[458634] = {
["source"] = "Awakened Flamecoil Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 225895,
},
[440207] = {
["source"] = "Voidstone Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[367521] = {
["npcID"] = 185534,
},
[59529] = {
["encounterName"] = "Volkhan",
["source"] = "Volkhan",
["encounterID"] = 1985,
["event"] = "SPELL_CAST_START",
["npcID"] = 28587,
},
[448399] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[371618] = {
["source"] = "Awakened Machinist",
["event"] = "SPELL_CAST_START",
["npcID"] = 227273,
},
[442257] = {
["encounterName"] = "Broodtwister Ovi'nax",
["source"] = "Blood Parasite",
["npcID"] = 220626,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2919,
},
[11975] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[326574] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 162689,
},
[458638] = {
["source"] = "Awakened Flamecoil Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 225895,
},
[40078] = {
["event"] = "SPELL_CAST_START",
["source"] = "Leviathan",
["npcID"] = 22884,
},
[465805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Obsidian Destroyer",
["npcID"] = 226505,
},
[450449] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 221427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[199151] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[450451] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 221427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[426905] = {
["source"] = "Minion of Ghur'sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 212778,
},
[17228] = {
["source"] = "Phase Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 13196,
},
[450454] = {
["source"] = "Orta",
["event"] = "SPELL_CAST_START",
["npcID"] = 221067,
},
[385958] = {
["encounterName"] = "Vexamus",
["encounterID"] = 2562,
["npcID"] = 194181,
},
[432027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twice-Stinger the Wretched",
["npcID"] = 219271,
},
[322486] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tirnenn Villager",
["npcID"] = 164929,
},
[440218] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["npcID"] = 216649,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[441242] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taste Tester",
["npcID"] = 220060,
},
[40079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Leviathan",
["npcID"] = 22884,
},
[433053] = {
["source"] = "Lighteater",
["event"] = "SPELL_CAST_START",
["npcID"] = 216036,
},
[432030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Screamer",
["npcID"] = 215411,
},
[443292] = {
["source"] = "Devouring Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217870,
},
[432031] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Bloodworker",
["npcID"] = 215968,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[465815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qiraji Battleguard",
["npcID"] = 225952,
},
[439198] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Venommaster Nezarox",
["npcID"] = 219006,
},
[440222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[400296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomforge Arcanasmith",
["npcID"] = 232458,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["npcID"] = 184125,
},
[9672] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[413607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Twilight Magus",
["npcID"] = 201223,
},
[439202] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["npcID"] = 210267,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2929,
},
[432036] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[432037] = {
["source"] = "Sparklit Buttonmasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212596,
},
[441252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horrid Effusia",
["npcID"] = 211866,
},
[447395] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["encounterID"] = 1050,
["event"] = "SPELL_CAST_START",
["npcID"] = 40177,
},
[395184] = {
["npcID"] = 185883,
},
[41360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Promenade Sentinel",
["npcID"] = 23394,
},
[458657] = {
["source"] = "Awakened Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 225898,
},
[449444] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1050,
},
[440231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[17165] = {
["isChanneled"] = true,
["source"] = "Risen Inquisitor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 10426,
},
[59148] = {
["source"] = "Hardened Steel Skycaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 28580,
},
[269266] = {
["encounterName"] = "Viq'Goth",
["source"] = "Demolishing Terror",
["encounterID"] = 2100,
["event"] = "SPELL_CAST_START",
["npcID"] = 137614,
},
[449447] = {
["source"] = "Overseer Roskarrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 221071,
},
[465828] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anubisath Conqueror",
["npcID"] = 226757,
},
[451496] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[160772] = {
["isChanneled"] = true,
["source"] = "Mereldar Citizen",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225601,
},
[424879] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[331718] = {
["source"] = "Mistveil Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 171772,
},
[449451] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[164357] = {
["encounterName"] = "Witherbark",
["source"] = "Witherbark",
["npcID"] = 81522,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1746,
},
[448429] = {
["source"] = "Kobold Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 203878,
},
[449453] = {
["source"] = "Overseer Roskarrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 221071,
},
[455596] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magistrate Barthilas",
["npcID"] = 10435,
},
[427955] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[404409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anubisath Conqueror",
["npcID"] = 226757,
},
[320462] = {
["source"] = "Zolramus Sorcerer",
["event"] = "SPELL_CAST_START",
["npcID"] = 163128,
},
[449455] = {
["source"] = "Ghastly Voidsoul",
["event"] = "SPELL_CAST_START",
["npcID"] = 212453,
},
[458669] = {
["source"] = "Awakened Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 225898,
},
[461741] = {
["source"] = "Sir Finley Mrrgglton",
["event"] = "SPELL_CAST_START",
["npcID"] = 228030,
},
[458670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Archavon the Stone Watcher",
["npcID"] = 227257,
},
[40082] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Harpooner",
["npcID"] = 22874,
},
[378818] = {
["npcID"] = 192788,
},
[424888] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[458672] = {
["event"] = "SPELL_CAST_START",
["source"] = "Archavon the Stone Watcher",
["npcID"] = 227257,
},
[447411] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[408509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewalker",
["npcID"] = 233203,
},
[450483] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[440246] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[266209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Deathspeaker",
["npcID"] = 134284,
},
[424891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[438200] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[451510] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[432059] = {
["source"] = "Flickerflame Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212528,
},
[268260] = {
["source"] = "Ashvane Cannoneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 138465,
},
[430013] = {
["source"] = "Unruly Stormrook",
["event"] = "SPELL_CAST_START",
["npcID"] = 207186,
},
[448441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorloc Springcaller",
["npcID"] = 218650,
},
[426943] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[61326] = {
["source"] = "Azure Scale-Binder",
["event"] = "SPELL_CAST_START",
["npcID"] = 26735,
},
[448443] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[30923] = {
["encounterName"] = "The Maker",
["source"] = "The Maker",
["npcID"] = 17381,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1922,
},
[443325] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[448444] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[450492] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 221427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[435136] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[328667] = {
["source"] = "Brittlebone Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 163126,
},
[435138] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[458685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moth'ethk",
["npcID"] = 206203,
},
[432068] = {
["source"] = "Waterworks Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 222979,
},
[461757] = {
["source"] = "Reno Jackson",
["event"] = "SPELL_CAST_START",
["npcID"] = 228044,
},
[446401] = {
["source"] = "Phalanx of Authorization",
["event"] = "SPELL_CAST_START",
["npcID"] = 221917,
},
[226304] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[424903] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[462782] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Defense Turret",
["npcID"] = 229678,
},
[458688] = {
["source"] = "Awakened Volcanic Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 225896,
},
[446405] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["npcID"] = 214348,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2895,
},
[441287] = {
["isChanneled"] = true,
["source"] = "Kaheti Sentry",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218315,
},
[450501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twice-Stinger the Wretched",
["npcID"] = 219271,
},
[59152] = {
["source"] = "Stormforged Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 28835,
},
[458692] = {
["source"] = "Awakened Volcanic Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 225896,
},
[443336] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[441289] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[438218] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[440266] = {
["source"] = "Duskborn Darkhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 229170,
},
[446409] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 215702,
},
[435148] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Footman",
["npcID"] = 212835,
},
[449481] = {
["source"] = "Overseer Roskarrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 221071,
},
[450505] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 225204,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2987,
},
[22414] = {
["source"] = "Warpwood Tangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 11464,
},
[22478] = {
["source"] = "Zevrim Thornhoof",
["event"] = "SPELL_CAST_START",
["npcID"] = 11490,
},
[456649] = {
["source"] = "Deathbound Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 220272,
},
[243713] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Kazzak",
["npcID"] = 121818,
},
[388060] = {
["npcID"] = 187033,
},
[450509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[446416] = {
["source"] = "Honey-fused Droplet",
["event"] = "SPELL_CAST_START",
["npcID"] = 213697,
},
[463820] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prototype Electric Golem",
["npcID"] = 232552,
},
[456654] = {
["source"] = "Deathbound Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 220272,
},
[430037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Spearfisher",
["npcID"] = 214338,
},
[463821] = {
["encounterName"] = "Golem Lord Argelmach",
["source"] = "Golem Lord Argelmach",
["npcID"] = 226306,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3046,
},
[468940] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phalanx",
["npcID"] = 232593,
},
[450513] = {
["isChanneled"] = true,
["source"] = "Rhahk'Zor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 644,
},
[328687] = {
["source"] = "Brittlebone Crossbowman",
["event"] = "SPELL_CAST_START",
["npcID"] = 166079,
},
[327664] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 162689,
},
[463823] = {
["encounterName"] = "Golem Lord Argelmach",
["source"] = "Magmatron Mk. II",
["npcID"] = 230216,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3046,
},
[468942] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Phalanx",
["npcID"] = 232593,
},
[450515] = {
["source"] = "Rhahk'Zor",
["event"] = "SPELL_CAST_START",
["npcID"] = 644,
},
[8362] = {
["source"] = "Shadowpriest Sezz'ziz",
["event"] = "SPELL_CAST_START",
["npcID"] = 7275,
},
[453588] = {
["source"] = "Coalesced Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 220266,
},
[462802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Machinist",
["npcID"] = 229695,
},
[59154] = {
["source"] = "Stormforged Giant",
["event"] = "SPELL_CAST_START",
["npcID"] = 28920,
},
[35096] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Mender",
["npcID"] = 19633,
},
[322550] = {
["encounterName"] = "Tred'ova",
["source"] = "Tred'ova",
["npcID"] = 164517,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2393,
},
[450519] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 221427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[451543] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[452567] = {
["source"] = "Oath-Eater",
["event"] = "SPELL_CAST_START",
["npcID"] = 206844,
},
[461781] = {
["source"] = "Seacurse",
["event"] = "SPELL_CAST_START",
["npcID"] = 220762,
},
[463829] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prototype Toxic Golem",
["npcID"] = 232553,
},
[435165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sir Braunpyke",
["npcID"] = 217658,
},
[22415] = {
["source"] = "Alzzin the Wildshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 11492,
},
[13321] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felhound Manastalker",
["npcID"] = 17401,
},
[373742] = {
["encounterName"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["npcID"] = 189340,
},
[461785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargassum Guardian",
["npcID"] = 212582,
},
[465881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anubisath Conqueror",
["npcID"] = 226757,
},
[446430] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 215702,
},
[13737] = {
["source"] = "Risen Gallant",
["event"] = "SPELL_CAST_START",
["npcID"] = 10424,
},
[440288] = {
["source"] = "Duskborn Darkhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 229170,
},
[445407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wandering Gutter",
["npcID"] = 214551,
},
[288774] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[447456] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[463837] = {
["encounterName"] = "Golem Lord Argelmach",
["source"] = "Toxitron Mk. II",
["npcID"] = 230217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3046,
},
[443363] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swarming Sandwhisper",
["npcID"] = 215360,
},
[441316] = {
["isChanneled"] = true,
["source"] = "Frenzied Leaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222214,
},
[438245] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 217748,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[445412] = {
["source"] = "Colossal Crab",
["event"] = "SPELL_CAST_START",
["npcID"] = 224589,
},
[436200] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[63891] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Sara",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33134,
},
[436203] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[453607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[15241] = {
["source"] = "Risen Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 10419,
},
[436205] = {
["source"] = "Unstable Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 216328,
},
["358320"] = {
["npcID"] = 180162,
},
[448492] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[372735] = {
["npcID"] = 187969,
},
[432113] = {
["source"] = "Overlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228575,
},
[445422] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[462826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Explosive Bomberbot",
["npcID"] = 229706,
},
[15785] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Mana Leech",
["npcID"] = 19306,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[432114] = {
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 212884,
},
[450542] = {
["source"] = "Gilnid",
["event"] = "SPELL_CAST_START",
["npcID"] = 1763,
},
[432116] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brightrock Shellvalier",
["npcID"] = 225785,
},
[425974] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[432117] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[453616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard",
["npcID"] = 225493,
},
[449522] = {
["source"] = "Dreadstrike Flitterer",
["event"] = "SPELL_CAST_START",
["npcID"] = 213320,
},
[450546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[41114] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtongue Mystic",
["npcID"] = 22845,
},
[427001] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[432120] = {
["source"] = "Overlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228575,
},
[50456] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thiassi the Lightning Bringer",
["npcID"] = 28018,
},
[34716] = {
["encounterName"] = "Warp Splinter",
["source"] = "Warp Splinter",
["encounterID"] = 1929,
["event"] = "SPELL_CAST_START",
["npcID"] = 17977,
},
[450550] = {
["source"] = "Mr. Smite",
["event"] = "SPELL_CAST_START",
["npcID"] = 646,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[40091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Sea-Caller",
["npcID"] = 22875,
},
[432125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaheti Silk Hauler",
["npcID"] = 221327,
},
[65301] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Sara",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33134,
},
[432127] = {
["source"] = "Kaheti Siegelord",
["event"] = "SPELL_CAST_START",
["npcID"] = 215598,
},
[458746] = {
["source"] = "Remembered Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 224157,
},
[444414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blight Swarmer",
["npcID"] = 221669,
},
[441343] = {
["isChanneled"] = true,
["source"] = "Frenzied Leaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222214,
},
[427011] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[432130] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[456702] = {
["source"] = "Rampaging Blight",
["event"] = "SPELL_CAST_START",
["npcID"] = 220273,
},
[396302] = {
["event"] = "SPELL_CAST_START",
["source"] = "Geothermus",
["npcID"] = 217416,
},
[448515] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[470014] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prototype Arcane Golem",
["npcID"] = 232550,
},
[443397] = {
["source"] = "Sureki Venomblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 220193,
},
[441351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bee Wrangler",
["npcID"] = 210264,
},
[17235] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerub'enkan",
["npcID"] = 10437,
},
[59160] = {
["encounterName"] = "General Bjarngrim",
["source"] = "Stormforged Mender",
["encounterID"] = 1987,
["event"] = "SPELL_CAST_START",
["npcID"] = 28582,
},
[59800] = {
["encounterName"] = "Ionar",
["source"] = "Ionar",
["encounterID"] = 1984,
["event"] = "SPELL_CAST_START",
["npcID"] = 28546,
},
[456711] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Lavabender",
["npcID"] = 224249,
},
[446474] = {
["source"] = "Waxy Blob",
["event"] = "SPELL_CAST_START",
["npcID"] = 229818,
},
[432142] = {
["source"] = "Necrofang Reaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216191,
},
[456713] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Lavabender",
["npcID"] = 224249,
},
[462856] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nullbot",
["npcID"] = 229729,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["npcID"] = 208747,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2788,
},
[446477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Sludger",
["npcID"] = 216515,
},
[462859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[461836] = {
["source"] = "Flickerflame Candleflyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 219341,
},
[448528] = {
["source"] = "Spitfire Fusetender",
["event"] = "SPELL_CAST_START",
["npcID"] = 211777,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[451600] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Chamber Expeller",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 224368,
},
[442387] = {
["source"] = "Necrofang Reaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216191,
},
[446483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Sludger",
["npcID"] = 216515,
},
[273470] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["encounterID"] = 2109,
["event"] = "SPELL_CAST_START",
["npcID"] = 129208,
},
[8364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skeletal Guardian",
["npcID"] = 10390,
},
[12491] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Apoko",
["npcID"] = 24553,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[458770] = {
["source"] = "Awakened Sulfuric Devastator",
["event"] = "SPELL_CAST_START",
["npcID"] = 225894,
},
[461842] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[328756] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Ingra Maloch",
["encounterID"] = 2397,
["event"] = "SPELL_CAST_START",
["npcID"] = 164567,
},
[419870] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[322614] = {
["encounterName"] = "Tred'ova",
["source"] = "Tred'ova",
["npcID"] = 164517,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2393,
},
[64153] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Corruptor Tentacle",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33985,
},
[432156] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waxtail Outrider",
["npcID"] = 213095,
},
[430109] = {
["source"] = "Cursed Thunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207198,
},
[451608] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[13323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Sorcerer",
["npcID"] = 10422,
},
[377900] = {
["source"] = "Scourge Gargoyle",
["event"] = "SPELL_CAST_START",
["npcID"] = 227179,
},
[456729] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[293954] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eclipsing Grasp",
["npcID"] = 218693,
},
[451612] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Destroyer",
["npcID"] = 224609,
},
[428066] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[461850] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Ringing Death",
["npcID"] = 214162,
},
[257063] = {
["source"] = "Irontide Waveshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 129370,
},
[429091] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[449567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fathomless Warrior",
["npcID"] = 219935,
},
[444449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[449568] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[56860] = {
["source"] = "Mage Hunter Initiate",
["event"] = "SPELL_CAST_START",
["npcID"] = 26728,
},
[443427] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[5159] = {
["source"] = "Goblin Craftsman",
["event"] = "SPELL_CAST_START",
["npcID"] = 1731,
},
[441381] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216648,
},
[443430] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[423979] = {
["source"] = "Void Cursed Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214419,
},
[450597] = {
["encounterName"] = "Zekvir",
["source"] = "Egg Cocoon",
["npcID"] = 234024,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[441384] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216649,
},
[442408] = {
["source"] = "Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214649,
},
[441385] = {
["source"] = "Hollow Frostweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 222193,
},
[443433] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[40097] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Soothsayer",
["npcID"] = 22876,
},
[376892] = {
["encounterName"] = "Balakar Khan",
["encounterID"] = 2580,
["npcID"] = 186151,
},
[443436] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[456745] = {
["source"] = "Crimson Deathweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 222692,
},
[469031] = {
["source"] = "High Interrogator Gerstahn",
["event"] = "SPELL_CAST_START",
["npcID"] = 232243,
},
[458795] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravageant",
["npcID"] = 207826,
},
[398394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shaleshell Clicker",
["npcID"] = 220155,
},
[456748] = {
["source"] = "Crimson Deathweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 222692,
},
[432179] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["npcID"] = 210271,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2900,
},
[15979] = {
["source"] = "Phase Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 13196,
},
[462892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[64156] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Corruptor Tentacle",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33985,
},
[448560] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["npcID"] = 216619,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2907,
},
[449584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fathomless Warrior",
["npcID"] = 219935,
},
[442418] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burkhalt",
["npcID"] = 228671,
},
[456751] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1048,
},
[461870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xal'atath",
["npcID"] = 229227,
},
[377923] = {
["source"] = "Molten Slag",
["event"] = "SPELL_CAST_START",
["npcID"] = 214722,
},
[440372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Blind Weaver",
["npcID"] = 206077,
},
[469038] = {
["source"] = "Manifested Dread",
["event"] = "SPELL_CAST_START",
["npcID"] = 232894,
},
[445492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wandering Gutter",
["npcID"] = 214551,
},
[428089] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[453683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 217748,
},
[200768] = {
["source"] = "Crazed Razorbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 95766,
},
[320596] = {
["encounterName"] = "Blightbone",
["source"] = "Blightbone",
["encounterID"] = 2387,
["event"] = "SPELL_CAST_START",
["npcID"] = 162691,
},
[450613] = {
["source"] = "Flamekeeper Graz",
["event"] = "SPELL_CAST_START",
["npcID"] = 219279,
},
[440376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Al'haggro",
["npcID"] = 216560,
},
[446519] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbral Shalehorn",
["npcID"] = 227933,
},
[440377] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 217748,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[64157] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Corruptor Tentacle",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33985,
},
[444473] = {
["source"] = "The Ringing Death",
["event"] = "SPELL_CAST_START",
["npcID"] = 214162,
},
[370764] = {
["npcID"] = 187160,
},
[22421] = {
["source"] = "Hydrospawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 13280,
},
[442428] = {
["encounterName"] = "Sikran, Captain of the Sureki",
["source"] = "Sikran",
["encounterID"] = 2898,
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[461880] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["npcID"] = 216320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2905,
},
[456762] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[425027] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[9613] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[470073] = {
["encounterName"] = "Golem Lord Argelmach",
["source"] = "Arcanotron Mk. II",
["npcID"] = 230219,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3046,
},
[442432] = {
["encounterName"] = "Broodtwister Ovi'nax",
["source"] = "Broodtwister Ovi'nax",
["npcID"] = 214506,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2919,
},
[374865] = {
["source"] = "Scourge Risen",
["event"] = "SPELL_CAST_START",
["npcID"] = 227178,
},
[441410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Worker Bee",
["npcID"] = 210265,
},
[275563] = {
["source"] = "Shadowstarved Bullfrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 214406,
},
[461886] = {
["source"] = "Cavern Basilisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 221298,
},
[328799] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skeletal Vanguard",
["npcID"] = 167109,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[441412] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deathpetal",
["npcID"] = 206184,
},
[439365] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["npcID"] = 210267,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2929,
},
[450628] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[472128] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 221427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[456772] = {
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_START",
["npcID"] = 213200,
},
[10733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inferno Elemental",
["npcID"] = 5852,
},
[320614] = {
["encounterName"] = "Blightbone",
["source"] = "Carrion Worm",
["encounterID"] = 2387,
["event"] = "SPELL_CAST_START",
["npcID"] = 164702,
},
[431180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dripear the Waxy",
["npcID"] = 213883,
},
[434252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Hauler",
["npcID"] = 217039,
},
[44196] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Phoenix",
["npcID"] = 24674,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[52770] = {
["encounterName"] = "Ionar",
["source"] = "Ionar",
["encounterID"] = 1984,
["event"] = "SPELL_CAST_START",
["npcID"] = 28546,
},
[18327] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baroness Anastari",
["npcID"] = 10436,
},
[425040] = {
["source"] = "Fungarian Flinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 207460,
},
[30932] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Houndmaster",
["npcID"] = 17670,
},
[425042] = {
["source"] = "Fungarian Flinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 207460,
},
[454731] = {
["source"] = "Deepflayer Broodmother",
["event"] = "SPELL_CAST_START",
["npcID"] = 220286,
},
[459850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Exalted Priest",
["npcID"] = 222368,
},
[450637] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwalker Guardian",
["npcID"] = 219035,
},
[456780] = {
["source"] = "King Splash",
["event"] = "SPELL_CAST_START",
["npcID"] = 220275,
},
[453709] = {
["source"] = "Kelpmire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220287,
},
[295028] = {
["source"] = "Livid Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 227355,
},
[456782] = {
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_START",
["npcID"] = 213200,
},
[438355] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[40102] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqueous Spawn",
["npcID"] = 22883,
},
[425048] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[295032] = {
["source"] = "Livid Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 227355,
},
[461904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[430168] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Hurler",
["npcID"] = 214677,
},
[200784] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[456788] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "King Splash",
["npcID"] = 220275,
},
[430171] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[34984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fen Ray",
["npcID"] = 17731,
},
[448599] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hevo'myk",
["npcID"] = 211591,
},
[463956] = {
["source"] = "Magma Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 215770,
},
[443482] = {
["source"] = "Nightfall Shadeguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 217519,
},
[243784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azuregos",
["npcID"] = 121820,
},
[30741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grand Warlock Nethekurse",
["npcID"] = 16807,
},
[464983] = {
["encounterName"] = "Ambassador Flamelash",
["source"] = "Firestarter",
["npcID"] = 230804,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3047,
},
[30933] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Houndmaster",
["npcID"] = 17670,
},
[462936] = {
["event"] = "SPELL_CAST_START",
["source"] = "Medbot",
["npcID"] = 229769,
},
[452699] = {
["source"] = "Verdant Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 215813,
},
[375919] = {
["source"] = "Primal Scythid",
["event"] = "SPELL_CAST_START",
["npcID"] = 191104,
},
[443487] = {
["event"] = "SPELL_CAST_START",
["source"] = "Worker Bee",
["npcID"] = 210265,
},
[430179] = {
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 214439,
},
[436322] = {
["event"] = "SPELL_CAST_START",
["source"] = "Atik",
["npcID"] = 217533,
},
[374898] = {
["source"] = "Amani Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215675,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[432229] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["npcID"] = 210271,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2900,
},
[390256] = {
["source"] = "Proscenium Punk",
["event"] = "SPELL_CAST_START",
["npcID"] = 215791,
},
[40872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonmaw Sky Stalker",
["npcID"] = 23030,
},
[243789] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azuregos",
["npcID"] = 121820,
},
[5208] = {
["source"] = "Captain Greenskin",
["event"] = "SPELL_CAST_START",
["npcID"] = 647,
},
[269456] = {
["encounterName"] = "Viq'Goth",
["source"] = "Viq'Goth",
["encounterID"] = 2100,
["event"] = "SPELL_CAST_START",
["npcID"] = 128652,
},
[42024] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Elementalist",
["npcID"] = 23523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[472159] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 221427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[272528] = {
["source"] = "Ashvane Sniper",
["event"] = "SPELL_CAST_START",
["npcID"] = 128967,
},
[434281] = {
["source"] = "Weeping Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217268,
},
[321669] = {
["encounterName"] = "Mistcaller",
["source"] = "Illusionary Clone",
["npcID"] = 165108,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2392,
},
[453733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[439401] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[64163] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Yogg-Saron",
["encounterID"] = 1143,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 33288,
},
[448616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hevo'myk",
["npcID"] = 211591,
},
[253517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Confessor",
["npcID"] = 122973,
},
[369788] = {
["source"] = "Brackenhide Devourer",
["event"] = "SPELL_CAST_START",
["npcID"] = 230687,
},
[385145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Deviate Raptor",
["npcID"] = 221516,
},
[441452] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[443500] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[448619] = {
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 223423,
},
[18649] = {
["source"] = "Wildspawn Betrayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 11454,
},
[463977] = {
["encounterName"] = "Lord Incendius",
["source"] = "Lord Incendius",
["encounterID"] = 3043,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226304,
},
[255567] = {
["source"] = "T'lonja",
["event"] = "SPELL_CAST_START",
["npcID"] = 128455,
},
[265372] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[320655] = {
["encounterName"] = "Blightbone",
["source"] = "Blightbone",
["encounterID"] = 2387,
["event"] = "SPELL_CAST_START",
["npcID"] = 162691,
},
[469099] = {
["source"] = "High Interrogator Gerstahn",
["event"] = "SPELL_CAST_START",
["npcID"] = 232243,
},
[40106] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aqueous Spawn",
["npcID"] = 22883,
},
[428150] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[443507] = {
["source"] = "Retired Lord Vul'azak",
["event"] = "SPELL_CAST_START",
["npcID"] = 220423,
},
[272542] = {
["source"] = "Ashvane Sniper",
["event"] = "SPELL_CAST_START",
["npcID"] = 128967,
},
[414844] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[443510] = {
["source"] = "Nightfall Executor",
["event"] = "SPELL_CAST_START",
["npcID"] = 217516,
},
[375943] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[450677] = {
["source"] = "Orta",
["event"] = "SPELL_CAST_START",
["npcID"] = 221067,
},
[453749] = {
["source"] = "Kelpmire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220287,
},
[17434] = {
["source"] = "Lord Aurius Rivendare",
["event"] = "SPELL_CAST_START",
["npcID"] = 45412,
},
[451702] = {
["source"] = "Orta",
["event"] = "SPELL_CAST_START",
["npcID"] = 221067,
},
[272546] = {
["source"] = "Bilge Rat Buccaneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129366,
},
[465012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[389255] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qiraji Gladiator",
["npcID"] = 226503,
},
[44202] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Phoenix",
["npcID"] = 24674,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[456823] = {
["source"] = "Grand-Heister Bokk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213679,
},
[448634] = {
["encounterName"] = "Under-Lord Vik'tis",
["source"] = "Under-Lord Vik'tis",
["encounterID"] = 2989,
["event"] = "SPELL_CAST_START",
["npcID"] = 220158,
},
[396423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomforge Arcanasmith",
["npcID"] = 232458,
},
[414851] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207438,
},
[452730] = {
["source"] = "Verdant Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 215813,
},
[462969] = {
["encounterName"] = "Bael'Gar",
["source"] = "Bael'Gar",
["encounterID"] = 3044,
["event"] = "SPELL_CAST_START",
["npcID"] = 226303,
},
[379023] = {
["source"] = "Lost Lynx",
["event"] = "SPELL_CAST_START",
["npcID"] = 225022,
},
[457853] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Taskmaker",
["npcID"] = 218444,
},
[462972] = {
["encounterName"] = "Bael'Gar",
["source"] = "Bael'Gar",
["encounterID"] = 3044,
["event"] = "SPELL_CAST_START",
["npcID"] = 226303,
},
[448640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[457854] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Taskmaker",
["npcID"] = 218444,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[462974] = {
["encounterName"] = "Bael'Gar",
["source"] = "Bael'Gar",
["encounterID"] = 3044,
["event"] = "SPELL_CAST_START",
["npcID"] = 226303,
},
[369813] = {
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215077,
},
[40876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonmaw Wind Reaver",
["npcID"] = 23330,
},
[442501] = {
["source"] = "Sureki Ironweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 220551,
},
[448644] = {
["encounterName"] = "Under-Lord Vik'tis",
["source"] = "Under-Lord Vik'tis",
["encounterID"] = 2989,
["event"] = "SPELL_CAST_START",
["npcID"] = 220158,
},
[457858] = {
["source"] = "Deepfiend Azellix",
["event"] = "SPELL_CAST_START",
["npcID"] = 218458,
},
[423051] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[456835] = {
["source"] = "Hungerer of the Deeps",
["event"] = "SPELL_CAST_START",
["npcID"] = 221199,
},
[455812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Cabbage Smacker",
["npcID"] = 206514,
},
[17435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Aurius Rivendare",
["npcID"] = 45412,
},
[455814] = {
["source"] = "Elemental Rift",
["event"] = "SPELL_CAST_START",
["npcID"] = 217914,
},
[445577] = {
["source"] = "Shrillwing Hunter En'kilah",
["event"] = "SPELL_CAST_START",
["npcID"] = 222038,
},
[455815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Cabbage Smacker",
["npcID"] = 206514,
},
[441483] = {
["source"] = "Deathpetal",
["event"] = "SPELL_CAST_START",
["npcID"] = 206184,
},
[450697] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Worker",
["npcID"] = 215023,
},
[324776] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Shaper",
["npcID"] = 166275,
},
[40877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonmaw Wind Reaver",
["npcID"] = 23330,
},
[462983] = {
["event"] = "SPELL_CAST_START",
["source"] = "Automatic Ironstrider",
["npcID"] = 229778,
},
[455817] = {
["source"] = "Murkspike",
["event"] = "SPELL_CAST_START",
["npcID"] = 220771,
},
[456841] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[22938] = {
["source"] = "Risen Battle Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 10425,
},
[226406] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[7896] = {
["source"] = "Wildspawn Betrayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 11454,
},
[31704] = {
["encounterName"] = "The Black Stalker",
["source"] = "The Black Stalker",
["npcID"] = 17882,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1948,
},
[59433] = {
["encounterName"] = "Anub'arak",
["source"] = "Anub'arak",
["npcID"] = 29120,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1973,
},
[15982] = {
["source"] = "Witch Doctor Zum'rah",
["event"] = "SPELL_CAST_START",
["npcID"] = 7271,
},
[427157] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[272571] = {
["source"] = "Bilge Rat Tempest",
["event"] = "SPELL_CAST_START",
["npcID"] = 129367,
},
[371875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Trainee",
["npcID"] = 189266,
},
[369828] = {
["npcID"] = 184023,
},
[384161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Irontorch",
["npcID"] = 189464,
},
[440468] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["npcID"] = 216649,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[457872] = {
["source"] = "Deepfiend Azellix",
["event"] = "SPELL_CAST_START",
["npcID"] = 218458,
},
[455825] = {
["encounterName"] = "Warchief Kargath Bladefist",
["source"] = "Warchief Kargath Bladefist",
["npcID"] = 16808,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1938,
},
[466063] = {
["source"] = "Phantasmal Bloodfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 231061,
},
[37551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Sharpshooter",
["npcID"] = 16704,
},
[448660] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[451732] = {
["source"] = "Swarming Cogwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 232871,
},
[456851] = {
["source"] = "Agitated Shalewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 226381,
},
[34352] = {
["source"] = "Sunseeker Researcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 18421,
},
[459923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Exalted Priest",
["npcID"] = 222368,
},
[395427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Lahar",
["npcID"] = 189235,
},
[446615] = {
["source"] = "Nightfall Dark Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 213885,
},
[451734] = {
["source"] = "Gargantuan Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222960,
},
[456853] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[449687] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1050,
},
[459925] = {
["event"] = "SPELL_CAST_START",
["source"] = "Palace Guardian",
["npcID"] = 222305,
},
[320696] = {
["source"] = "Stitched Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 163121,
},
[453784] = {
["source"] = "Conqueror Or'sosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 222723,
},
[430238] = {
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 207202,
},
[272581] = {
["source"] = "Bilge Rat Tempest",
["event"] = "SPELL_CAST_START",
["npcID"] = 129367,
},
[449690] = {
["source"] = "Queen's Guard Re'zah",
["event"] = "SPELL_CAST_START",
["npcID"] = 223822,
},
[450714] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwalker Guardian",
["npcID"] = 219035,
},
[30937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Channeler",
["npcID"] = 17653,
},
[442525] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["npcID"] = 210271,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2900,
},
[442526] = {
["encounterName"] = "Broodtwister Ovi'nax",
["source"] = "Broodtwister Ovi'nax",
["npcID"] = 214506,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2919,
},
[449693] = {
["source"] = "Queen's Guard Re'zah",
["event"] = "SPELL_CAST_START",
["npcID"] = 223822,
},
[34353] = {
["source"] = "Sunseeker Researcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 18421,
},
[59179] = {
["source"] = "Titanium Thunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 28965,
},
[450718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[465051] = {
["source"] = "Xal'atath",
["event"] = "SPELL_CAST_START",
["npcID"] = 230937,
},
[453790] = {
["source"] = "Conqueror Or'sosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 222723,
},
[256616] = {
["source"] = "Scrimshaw Gutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 133990,
},
[456862] = {
["source"] = "Grand-Heister Bokk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213679,
},
[449696] = {
["source"] = "Queen's Guard Ge'zah",
["event"] = "SPELL_CAST_START",
["npcID"] = 223839,
},
[442530] = {
["encounterName"] = "The Bloodbound Horror",
["source"] = "The Bloodbound Horror",
["encounterID"] = 2917,
["event"] = "SPELL_CAST_START",
["npcID"] = 214502,
},
[272588] = {
["source"] = "Bilge Rat Cutthroat",
["event"] = "SPELL_CAST_START",
["npcID"] = 137511,
},
[257641] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Irontide Powdershot",
["encounterID"] = 2098,
["event"] = "SPELL_CAST_START",
["npcID"] = 129928,
},
[427176] = {
["encounterName"] = "The Darkness",
["source"] = "Wriggling Darkspawn",
["npcID"] = 213008,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2788,
},
[456866] = {
["source"] = "Sureki Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 222688,
},
[441510] = {
["source"] = "Deadly Sprout",
["event"] = "SPELL_CAST_START",
["npcID"] = 220316,
},
[459938] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dripear the Waxy",
["npcID"] = 213883,
},
[428202] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[322756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zolramus Gatekeeper",
["npcID"] = 165137,
},
[340160] = {
["source"] = "Mistveil Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 173655,
},
[456868] = {
["source"] = "Sureki Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 222688,
},
[437417] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[454821] = {
["source"] = "Royal Broker Rez'kal",
["event"] = "SPELL_CAST_START",
["npcID"] = 217693,
},
[374969] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2612,
},
[441513] = {
["source"] = "Deathpetal",
["event"] = "SPELL_CAST_START",
["npcID"] = 206184,
},
[256108] = {
["source"] = "Savage Cursespreader",
["event"] = "SPELL_CAST_START",
["npcID"] = 223655,
},
[461989] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[450728] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[439467] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yes Man",
["npcID"] = 219588,
},
[450729] = {
["source"] = "Rampant Lightning Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 215120,
},
[466086] = {
["source"] = "Anvilrage Medic",
["event"] = "SPELL_CAST_START",
["npcID"] = 232246,
},
[450731] = {
["source"] = "Rampant Lightning Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 215120,
},
[448684] = {
["source"] = "Sparking Electroscythes",
["event"] = "SPELL_CAST_START",
["npcID"] = 219970,
},
[441518] = {
["event"] = "SPELL_CAST_START",
["source"] = "Failed Batch",
["npcID"] = 220368,
},
[455851] = {
["source"] = "Finclaw Bloodtide",
["event"] = "SPELL_CAST_START",
["npcID"] = 220492,
},
[449709] = {
["source"] = "Gorloc Springcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 218650,
},
[396475] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomforge Arcanasmith",
["npcID"] = 232458,
},
[451758] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[35507] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thorn Flayer",
["npcID"] = 19920,
},
[322767] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drust Harvester",
["npcID"] = 164921,
},
[454831] = {
["source"] = "Caustic Skyrazor",
["event"] = "SPELL_CAST_START",
["npcID"] = 225817,
},
[459952] = {
["source"] = "Palace Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 233401,
},
[448691] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[466096] = {
["source"] = "Anvilrage Medic",
["event"] = "SPELL_CAST_START",
["npcID"] = 232246,
},
[446646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[256627] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scrimshaw Enforcer",
["npcID"] = 129374,
},
[440504] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[35124] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Geomancer",
["npcID"] = 18420,
},
[39347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Gene-Splicer",
["npcID"] = 19507,
},
[95826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Southshore Guard",
["npcID"] = 212087,
},
[377034] = {
["encounterName"] = "Crawth",
["encounterID"] = 2564,
["npcID"] = 191736,
},
[466103] = {
["source"] = "Anvilrage Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 232250,
},
[455866] = {
["source"] = "Finclaw Bloodtide",
["event"] = "SPELL_CAST_START",
["npcID"] = 207780,
},
[456891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bee Wrangler",
["npcID"] = 210264,
},
[59183] = {
["encounterName"] = "Volkhan",
["source"] = "Unbound Firestorm",
["encounterID"] = 1985,
["event"] = "SPELL_CAST_START",
["npcID"] = 28584,
},
[31707] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 208441,
},
[423109] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[466107] = {
["source"] = "Anvilrage Officer",
["event"] = "SPELL_CAST_START",
["npcID"] = 232247,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[470203] = {
["encounterName"] = "Ambassador Flamelash",
["source"] = "Ambassador Flamelash",
["npcID"] = 226302,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3047,
},
[466109] = {
["source"] = "Anvilrage Rogue",
["event"] = "SPELL_CAST_START",
["npcID"] = 232252,
},
[465086] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Moira Bronzebeard",
["npcID"] = 226314,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[340189] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Matriarch",
["npcID"] = 173655,
},
[431303] = {
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 213892,
},
[3605] = {
["source"] = "Goblin Engineer",
["event"] = "SPELL_CAST_START",
["npcID"] = 622,
},
[466111] = {
["source"] = "Anvilrage Rogue",
["event"] = "SPELL_CAST_START",
["npcID"] = 232252,
},
[422090] = {
["source"] = "Treant",
["event"] = "SPELL_CAST_START",
["npcID"] = 54983,
},
[431304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manifested Shadow",
["npcID"] = 211341,
},
[450756] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[465089] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Iron Imperial Guard",
["npcID"] = 232465,
},
[157331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Storm Elemental",
["npcID"] = 77942,
},
[34358] = {
["source"] = "Sunseeker Chemist",
["event"] = "SPELL_CAST_START",
["npcID"] = 19486,
},
[435401] = {
["encounterName"] = "Sikran, Captain of the Sureki",
["source"] = "Sikran",
["encounterID"] = 2898,
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[456900] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1050,
},
[449734] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[438473] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["event"] = "SPELL_CAST_START",
["npcID"] = 213179,
},
[455877] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Abominable Wavecrasher",
["npcID"] = 216526,
},
[465091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight's Hammer Ambassador",
["npcID"] = 232463,
},
[455878] = {
["source"] = "The Oozekhan",
["event"] = "SPELL_CAST_START",
["npcID"] = 216049,
},
[456902] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1050,
},
[431309] = {
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 213892,
},
[465093] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Fireguard Destroyer",
["npcID"] = 230991,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[438476] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[435405] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 217748,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[188046] = {
["source"] = "Denizen of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 198489,
},
[393432] = {
["npcID"] = 190340,
},
[456905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Earthgorger",
["npcID"] = 218393,
},
[15472] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[430288] = {
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 207202,
},
[15536] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alliance Mage",
["npcID"] = 214167,
},
[443598] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["npcID"] = 217489,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2921,
},
[34359] = {
["source"] = "Sunseeker Chemist",
["event"] = "SPELL_CAST_START",
["npcID"] = 19486,
},
[256639] = {
["source"] = "Blacktar Bomber",
["event"] = "SPELL_CAST_START",
["npcID"] = 129372,
},
[424148] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[450766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coalesced Living Honey",
["npcID"] = 217833,
},
[463052] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[439506] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[465100] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Avatar of Ragnaros",
["npcID"] = 231006,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[451793] = {
["event"] = "SPELL_CAST_START",
["source"] = "Al'haggro",
["npcID"] = 216560,
},
[16336] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Citizen",
["npcID"] = 10384,
},
[270590] = {
["encounterName"] = "Viq'Goth",
["source"] = "Demolishing Terror",
["npcID"] = 137614,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2100,
},
[79965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alliance Paladin",
["npcID"] = 214148,
},
[459986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Palace Guardian",
["npcID"] = 222305,
},
[321780] = {
["isChanneled"] = true,
["source"] = "Zolramus Necromancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 163618,
},
[340208] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Matriarch",
["npcID"] = 173655,
},
[414942] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarled Lasher",
["npcID"] = 207740,
},
[34616] = {
["source"] = "Nethervine Inciter",
["event"] = "SPELL_CAST_START",
["npcID"] = 19511,
},
[414944] = {
["source"] = "Fungal Gutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 207454,
},
[372971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Blacksmith",
["npcID"] = 189471,
},
[455895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ramstein the Gorger",
["npcID"] = 10439,
},
[18144] = {
["source"] = "Bloodfalcon",
["event"] = "SPELL_CAST_START",
["npcID"] = 18155,
},
[30493] = {
["event"] = "SPELL_CAST_START",
["source"] = "Talrendis Marksman",
["npcID"] = 36660,
},
[442589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Honey Harvester",
["npcID"] = 220946,
},
[450781] = {
["source"] = "Flickerflame Sticker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212629,
},
[454877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rhak'ik",
["npcID"] = 221032,
},
[14033] = {
["source"] = "Ethereal Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 18331,
},
[450784] = {
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_START",
["npcID"] = 219984,
},
[431333] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[44599] = {
["source"] = "Sunblade Physician",
["event"] = "SPELL_CAST_START",
["npcID"] = 24687,
},
[439524] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["npcID"] = 218002,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2931,
},
[450786] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[440549] = {
["source"] = "Ragefin Executioner",
["event"] = "SPELL_CAST_START",
["npcID"] = 213408,
},
[434407] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[320771] = {
["encounterName"] = "Nalthor the Rimebinder",
["source"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["event"] = "SPELL_CAST_START",
["npcID"] = 162693,
},
[320772] = {
["encounterName"] = "Nalthor the Rimebinder",
["source"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["event"] = "SPELL_CAST_START",
["npcID"] = 162693,
},
[440551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Bonechewer",
["npcID"] = 215040,
},
[449765] = {
["source"] = "Magma Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 215770,
},
[444648] = {
["event"] = "SPELL_CAST_START",
["source"] = "Riftwalker Nilara",
["npcID"] = 214644,
},
[157348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Storm Elemental",
["npcID"] = 77942,
},
[428269] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Void Chunk",
["encounterID"] = 2836,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213684,
},
[470244] = {
["encounterName"] = "Ambassador Flamelash",
["source"] = "Ambassador Flamelash",
["npcID"] = 226302,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3047,
},
[454888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Khak'ik",
["npcID"] = 216032,
},
[272662] = {
["source"] = "Irontide Raider",
["event"] = "SPELL_CAST_START",
["npcID"] = 129369,
},
[446700] = {
["encounterName"] = "Broodtwister Ovi'nax",
["source"] = "Voracious Worm",
["npcID"] = 219046,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2919,
},
[244881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Shield",
["npcID"] = 224994,
},
[463081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[451820] = {
["source"] = "Gargantuan Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222960,
},
[388349] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Eel",
["npcID"] = 215680,
},
[321807] = {
["source"] = "Zolramus Bonecarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 163619,
},
[431349] = {
["source"] = "Nightfall Dark Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 213885,
},
[257169] = {
["source"] = "Bilge Rat Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 135245,
},
[443636] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Elf Riftwalker",
["npcID"] = 221539,
},
[453874] = {
["source"] = "Vrykul Hoardseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 223653,
},
[257170] = {
["source"] = "Irontide Raider",
["event"] = "SPELL_CAST_START",
["npcID"] = 129369,
},
[16866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venom Belcher",
["npcID"] = 10417,
},
[320788] = {
["encounterName"] = "Nalthor the Rimebinder",
["source"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["event"] = "SPELL_CAST_START",
["npcID"] = 162693,
},
[383237] = {
["source"] = "Primal Lava Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 187321,
},
[443640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Elf Riftwalker",
["npcID"] = 221539,
},
[453879] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grand Overspinner Antourix",
["npcID"] = 225263,
},
[442618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrows Guard",
["npcID"] = 220977,
},
[40251] = {
["encounterName"] = "Teron Gorefiend",
["source"] = "Teron Gorefiend",
["npcID"] = 22871,
["event"] = "SPELL_CAST_START",
["encounterID"] = 604,
},
[446717] = {
["source"] = "Elder Shadeweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 221102,
},
[455932] = {
["source"] = "Lighteater",
["event"] = "SPELL_CAST_START",
["npcID"] = 216036,
},
[183465] = {
["source"] = "Tarspitter Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 91001,
},
[433410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chittering Fearmonger",
["npcID"] = 216583,
},
[433411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[443649] = {
["source"] = "Royal Scribe",
["event"] = "SPELL_CAST_START",
["npcID"] = 221035,
},
[14034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hellfire Familiar",
["npcID"] = 19016,
},
[453887] = {
["source"] = "Savage Cursespreader",
["event"] = "SPELL_CAST_START",
["npcID"] = 223655,
},
[44475] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Mage Guard",
["npcID"] = 24683,
},
[40508] = {
["encounterName"] = "Gurtogg Bloodboil",
["source"] = "Gurtogg Bloodboil",
["npcID"] = 22948,
["event"] = "SPELL_CAST_START",
["encounterID"] = 605,
},
[453889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ren'khat",
["npcID"] = 222152,
},
[41276] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonechewer Behemoth",
["npcID"] = 23196,
},
[113] = {
["source"] = "Defias Wizard",
["event"] = "SPELL_CAST_START",
["npcID"] = 4418,
},
[463104] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brood Infuser",
["npcID"] = 222167,
},
[451843] = {
["source"] = "Stormguard Gorren",
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[439559] = {
["encounterName"] = "Sikran, Captain of the Sureki",
["source"] = "Sikran",
["encounterID"] = 2898,
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[321828] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["npcID"] = 164501,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2392,
},
[457987] = {
["source"] = "Jix'ak the Crazed",
["event"] = "SPELL_CAST_START",
["npcID"] = 216048,
},
[435465] = {
["source"] = "Machinist Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 217799,
},
[116] = {
["npcID"] = 188027,
},
[453894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ren'khat",
["npcID"] = 222152,
},
[445705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Makura",
["npcID"] = 220643,
},
[382233] = {
["npcID"] = 193462,
},
[335141] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nar'zudah",
["npcID"] = 165824,
},
[444683] = {
["source"] = "Ramolith Curlhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 221672,
},
[404757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Obsidian Destroyer",
["npcID"] = 226505,
},
[389401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pearlfin Sea-Shaman",
["npcID"] = 214435,
},
[41277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonechewer Behemoth",
["npcID"] = 23196,
},
[335143] = {
["source"] = "Zolramus Bonemender",
["event"] = "SPELL_CAST_START",
["npcID"] = 165222,
},
[11443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thuzadin Shadowcaster",
["npcID"] = 10398,
},
[444687] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[426260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Torchsnarl",
["npcID"] = 212411,
},
[324909] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drust Boughbreaker",
["npcID"] = 164926,
},
[7978] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zany Goblin",
["npcID"] = 221982,
},
[426261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sootsnout",
["npcID"] = 212412,
},
[52027] = {
["encounterName"] = "General Bjarngrim",
["source"] = "General Bjarngrim",
["encounterID"] = 1987,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 28586,
},
[41150] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Nightlord",
["npcID"] = 22855,
},
[444692] = {
["source"] = "Ramolith Curlhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 221672,
},
[453906] = {
["source"] = "Lost Wickedfoot",
["event"] = "SPELL_CAST_START",
["npcID"] = 223654,
},
[324914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Tender",
["npcID"] = 166299,
},
[16868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baroness Anastari",
["npcID"] = 10436,
},
[445718] = {
["source"] = "Sparklit Rust Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212597,
},
[439576] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 217748,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[420125] = {
["source"] = "Raging Rock",
["event"] = "SPELL_CAST_START",
["npcID"] = 229792,
},
[458004] = {
["source"] = "Jix'ak the Crazed",
["event"] = "SPELL_CAST_START",
["npcID"] = 216048,
},
[320822] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zolramus Bonemender",
["npcID"] = 165222,
},
[448791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ardent Paladin",
["npcID"] = 206704,
},
[449815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandres the Relicbearer",
["npcID"] = 217534,
},
[373034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pearlfin Sparkleseeker",
["npcID"] = 214432,
},
[52028] = {
["encounterName"] = "General Bjarngrim",
["source"] = "General Bjarngrim",
["encounterID"] = 1987,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 28586,
},
[21987] = {
["source"] = "Whip Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 13022,
},
[444698] = {
["event"] = "SPELL_CAST_START",
["source"] = "Riftwalker Nilara",
["npcID"] = 214644,
},
[80750] = {
["source"] = "Balnazzar",
["event"] = "SPELL_CAST_START",
["npcID"] = 10813,
},
[423200] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[398631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waxtail Trapper",
["npcID"] = 212987,
},
[22883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Priest",
["npcID"] = 18317,
},
[272711] = {
["source"] = "Bilge Rat Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 135245,
},
[441630] = {
["source"] = "Kaheti Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218316,
},
[340279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Nightblossom",
["npcID"] = 173714,
},
[324923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drust Boughbreaker",
["npcID"] = 164926,
},
[63802] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Sara",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33134,
},
[426277] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Torchsnarl",
["npcID"] = 212993,
},
[451871] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Earthcaller",
["npcID"] = 224219,
},
[444705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zealous Templar",
["npcID"] = 207949,
},
[449824] = {
["source"] = "Springbubble",
["event"] = "SPELL_CAST_START",
["npcID"] = 219262,
},
[44479] = {
["source"] = "Sunblade Blood Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 24684,
},
[16869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maleki the Pallid",
["npcID"] = 10438,
},
[440615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Witherer",
["npcID"] = 214251,
},
[426283] = {
["source"] = "Cursedheart Invader",
["event"] = "SPELL_CAST_START",
["npcID"] = 212389,
},
[450854] = {
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_START",
["npcID"] = 211263,
},
[64059] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Brain of Yogg-Saron",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33890,
},
[48191] = {
["isChanneled"] = true,
["source"] = "Alliance Ranger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 26802,
},
[44224] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Kael'thas Sunstrider",
["npcID"] = 24664,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[449834] = {
["source"] = "Springbubble",
["event"] = "SPELL_CAST_START",
["npcID"] = 219262,
},
[389433] = {
["source"] = "High Interrogator Gerstahn",
["event"] = "SPELL_CAST_START",
["npcID"] = 232243,
},
[440622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Witherer",
["npcID"] = 214251,
},
[68982] = {
["encounterName"] = "Devourer of Souls",
["source"] = "Devourer of Souls",
["npcID"] = 36502,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2007,
},
[452910] = {
["source"] = "Zilthara",
["event"] = "SPELL_CAST_START",
["npcID"] = 220270,
},
[444722] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zealous Templar",
["npcID"] = 207949,
},
[445746] = {
["source"] = "Darkwater Tidecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 216962,
},
[426295] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[455984] = {
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219245,
},
[448818] = {
["source"] = "Kobold Skullface",
["event"] = "SPELL_CAST_START",
["npcID"] = 203951,
},
[453937] = {
["encounterName"] = "Zekvir",
["source"] = "Egg Cocoon",
["npcID"] = 234024,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2985,
},
[450866] = {
["source"] = "Wildspawn Hellcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 11457,
},
[451890] = {
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212876,
},
[41410] = {
["encounterName"] = "Reliquary of Souls",
["source"] = "Essence of Desire",
["npcID"] = 23419,
["event"] = "SPELL_CAST_START",
["encounterID"] = 606,
},
[3110] = {
["source"] = "Unknown",
["event"] = "SPELL_CAST_START",
["npcID"] = 416,
},
[448820] = {
["source"] = "Kobold Skullface",
["event"] = "SPELL_CAST_START",
["npcID"] = 203951,
},
[382277] = {
["npcID"] = 193457,
},
[465201] = {
["source"] = "Tichondrius",
["event"] = "SPELL_CAST_START",
["npcID"] = 231059,
},
[340304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Gorgegullet",
["npcID"] = 173720,
},
[427323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Stormrider",
["npcID"] = 212786,
},
[340305] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Gorgegullet",
["npcID"] = 173720,
},
[452918] = {
["source"] = "Arathi Avenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 221980,
},
[446776] = {
["event"] = "SPELL_CAST_START",
["source"] = "War Lynx",
["npcID"] = 206699,
},
[465204] = {
["source"] = "Tichondrius",
["event"] = "SPELL_CAST_START",
["npcID"] = 231059,
},
[22373] = {
["source"] = "Warpwood Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 11461,
},
[53824] = {
["source"] = "Undertide Deepfisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 226961,
},
[432448] = {
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214761,
},
[453947] = {
["source"] = "Warmonger Ogli",
["event"] = "SPELL_CAST_START",
["npcID"] = 222725,
},
[451900] = {
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212876,
},
[63038] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Guardian of Yogg-Saron",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33136,
},
[465210] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Emperor Dagran Thaurissan",
["npcID"] = 226305,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[415047] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[452926] = {
["source"] = "Zilthara",
["event"] = "SPELL_CAST_START",
["npcID"] = 220270,
},
[470330] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewalker",
["npcID"] = 233203,
},
[418119] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qiraji Gladiator",
["npcID"] = 226503,
},
[465212] = {
["source"] = "Tichondrius",
["event"] = "SPELL_CAST_START",
["npcID"] = 231059,
},
[453953] = {
["event"] = "SPELL_CAST_START",
["source"] = "Broodtwister Ovi'nax",
["npcID"] = 214506,
},
[439621] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216648,
},
[368983] = {
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215077,
},
[260793] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[321891] = {
["encounterName"] = "Mistcaller",
["source"] = "Illusionary Vulpin",
["npcID"] = 165251,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2392,
},
[450885] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[68988] = {
["encounterName"] = "Bronjahm",
["source"] = "Bronjahm",
["npcID"] = 36497,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2006,
},
[444743] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Mage",
["npcID"] = 221760,
},
[321894] = {
["encounterName"] = "Nalthor the Rimebinder",
["source"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["event"] = "SPELL_CAST_START",
["npcID"] = 162693,
},
[275826] = {
["source"] = "Ashvane Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 128969,
},
[396629] = {
["source"] = "Colossal Salamanther",
["event"] = "SPELL_CAST_START",
["npcID"] = 224622,
},
[427342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[399701] = {
["source"] = "Territorial Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 219902,
},
[453960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Broodtwister Ovi'nax",
["npcID"] = 214506,
},
[373084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontorch Commander",
["npcID"] = 189466,
},
[15284] = {
["encounterName"] = "Thorngrin the Tender",
["source"] = "Nethervine Reaper",
["encounterID"] = 1928,
["event"] = "SPELL_CAST_START",
["npcID"] = 19512,
},
[440652] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[445771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Makura",
["npcID"] = 220643,
},
[448843] = {
["source"] = "Glumtooth Bug-beater",
["event"] = "SPELL_CAST_START",
["npcID"] = 222176,
},
[463176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Stagshell",
["npcID"] = 222145,
},
[427346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[465225] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Avatar of Ragnaros",
["npcID"] = 231006,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[34759] = {
["encounterName"] = "High Botanist Freywinn",
["source"] = "High Botanist Freywinn",
["npcID"] = 17975,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1926,
},
[11829] = {
["source"] = "Defias Evoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 1729,
},
[448847] = {
["encounterName"] = "General Umbriss",
["source"] = "General Umbriss",
["npcID"] = 39625,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1051,
},
[406874] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Bodyguard",
["npcID"] = 232443,
},
[275835] = {
["source"] = "Ashvane Invader",
["event"] = "SPELL_CAST_START",
["npcID"] = 137516,
},
[411994] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infinite Chronoweaver",
["npcID"] = 205384,
},
[463182] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["encounterID"] = 2109,
["event"] = "SPELL_CAST_START",
["npcID"] = 129208,
},
[36807] = {
["source"] = "Murkblood Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 17771,
},
[422233] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[439637] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Echoing Shade",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 219675,
},
[450899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[445781] = {
["source"] = "Sparklit Rust Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212597,
},
[437592] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[448854] = {
["source"] = "Enraged Drunkard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218655,
},
[200913] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[427356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[438618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[427357] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[376170] = {
["encounterName"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["npcID"] = 186121,
},
[427359] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[448859] = {
["source"] = "Enraged Drunkard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218655,
},
[322938] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Drust Harvester",
["npcID"] = 164921,
},
[438622] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[324986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Stalker",
["npcID"] = 166301,
},
[46150] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Witch",
["npcID"] = 24696,
},
[88445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Iron Lookout",
["npcID"] = 8566,
},
[466265] = {
["encounterName"] = "General Angerforge",
["source"] = "General Angerforge",
["npcID"] = 226316,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3045,
},
[34761] = {
["encounterName"] = "High Botanist Freywinn",
["source"] = "High Botanist Freywinn",
["npcID"] = 17975,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1926,
},
[422245] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210153,
},
[448864] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burly Contender",
["npcID"] = 217646,
},
[40904] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[41032] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[412012] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infinite Timeslicer",
["npcID"] = 205408,
},
[426345] = {
["source"] = "Void Touched Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 212400,
},
[451939] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Destroyer",
["npcID"] = 224609,
},
[372087] = {
["npcID"] = 187897,
},
[435560] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["npcID"] = 214661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2930,
},
[34634] = {
["source"] = "Sunseeker Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 19505,
},
[34762] = {
["encounterName"] = "High Botanist Freywinn",
["source"] = "High Botanist Freywinn",
["npcID"] = 17975,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1926,
},
[326021] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spinemaw Gorger",
["npcID"] = 172312,
},
[10966] = {
["event"] = "SPELL_CAST_START",
["source"] = "Laughing Skull Legionnaire",
["npcID"] = 17626,
},
[376186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Lahar",
["npcID"] = 189235,
},
[429422] = {
["source"] = "Cursedforge Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214066,
},
[15253] = {
["encounterName"] = "Pandemonius",
["source"] = "Arcane Fiend",
["encounterID"] = 1900,
["event"] = "SPELL_CAST_START",
["npcID"] = 18429,
},
[118905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Capacitor Totem",
["npcID"] = 61245,
},
[427376] = {
["source"] = "Gilgoblin Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 40935,
},
[433519] = {
["encounterName"] = "Sikran, Captain of the Sureki",
["source"] = "Sikran",
["encounterID"] = 2898,
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[46024] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["encounterID"] = 1895,
["event"] = "SPELL_CAST_START",
["npcID"] = 24556,
},
[436592] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["npcID"] = 214661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2930,
},
[34763] = {
["encounterName"] = "High Botanist Freywinn",
["source"] = "High Botanist Freywinn",
["encounterID"] = 1926,
["event"] = "SPELL_CAST_START",
["npcID"] = 17975,
},
[429428] = {
["source"] = "Earth Burst Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 214287,
},
[446832] = {
["encounterName"] = "Researcher Ven'kex",
["source"] = "Researcher Ven'kex",
["npcID"] = 219856,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2991,
},
[104318] = {
["source"] = "Wild Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 143622,
},
[88194] = {
["source"] = "Young Storm Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 45919,
},
[427382] = {
["source"] = "Engine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212764,
},
[437620] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 217748,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[450929] = {
["source"] = "Orta",
["event"] = "SPELL_CAST_START",
["npcID"] = 221067,
},
[389505] = {
["source"] = "Scourge Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 227177,
},
[464240] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[445813] = {
["source"] = "Unstable Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 216328,
},
[46153] = {
["encounterName"] = "Selin Fireheart",
["source"] = "Selin Fireheart",
["npcID"] = 24723,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1897,
},
[452980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggregation of Horrors",
["npcID"] = 220999,
},
[458099] = {
["event"] = "SPELL_CAST_START",
["source"] = "Velo",
["npcID"] = 227514,
},
[17194] = {
["source"] = "Bloodwarder Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 19633,
},
[465266] = {
["source"] = "Tichondrius",
["event"] = "SPELL_CAST_START",
["npcID"] = 231059,
},
[448888] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["npcID"] = 189232,
["encounterID"] = 2606,
},
[56775] = {
["source"] = "Azure Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 26722,
},
[452985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siege Marshal Tekhzok",
["npcID"] = 215987,
},
[458104] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tala",
["npcID"] = 227513,
},
[411012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[446844] = {
["source"] = "Parasitic Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 222786,
},
[374158] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Riplisk",
["npcID"] = 217524,
},
[424322] = {
["source"] = "Blazing Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 220815,
},
[46026] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Apoko",
["npcID"] = 24553,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[450941] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Knight",
["npcID"] = 222820,
},
[451965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Giant",
["npcID"] = 40166,
},
[34637] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Channeler",
["npcID"] = 19505,
},
[431491] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[465275] = {
["source"] = "Phantasmal Bloodfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 231061,
},
[438658] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[326046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spinemaw Staghorn",
["npcID"] = 167111,
},
[7068] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghostly Citizen",
["npcID"] = 10385,
},
[448897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[431494] = {
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_START",
["npcID"] = 213934,
},
[424328] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waxtail Browbeater",
["npcID"] = 213000,
},
[319906] = {
["event"] = "SPELL_CAST_START",
["source"] = "Battlesewn Render",
["npcID"] = 167022,
},
[423305] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[416139] = {
["encounterName"] = "Chrono-Lord Deios",
["event"] = "SPELL_CAST_START",
["source"] = "Chrono-Lord Deios",
["npcID"] = 199000,
},
[451971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Giant",
["npcID"] = 40166,
},
[432520] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[80009] = {
["source"] = "Defias Watchman",
["event"] = "SPELL_CAST_START",
["npcID"] = 222866,
},
[427402] = {
["source"] = "Cursed Rookguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 207197,
},
[34254] = {
["encounterName"] = "Commander Sarannis",
["source"] = "Sunseeker Botanist",
["npcID"] = 18422,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1925,
},
[427404] = {
["source"] = "Voidrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 212786,
},
[257756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Buccaneer",
["npcID"] = 129527,
},
[15254] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Ethereal Beacon",
["npcID"] = 18431,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[439692] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216648,
},
[458120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Velo",
["npcID"] = 227514,
},
[446859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blackblood Coalescence",
["npcID"] = 215205,
},
[462216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[191726] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[125056] = {
["source"] = "N.U.T.Z.",
["event"] = "SPELL_CAST_START",
["npcID"] = 165189,
},
[455052] = {
["source"] = "Supervisor Radlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 220897,
},
[34639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Harvester",
["npcID"] = 19509,
},
[7948] = {
["source"] = "Alzzin the Wildshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 11492,
},
[448912] = {
["source"] = "Shadowguard Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 216263,
},
[321968] = {
["source"] = "Tirnenn Villager",
["event"] = "SPELL_CAST_START",
["npcID"] = 164929,
},
[441747] = {
["source"] = "Web Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 218320,
},
[369061] = {
["encounterName"] = "Emberon",
["encounterID"] = 2558,
["npcID"] = 184422,
},
[438677] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[444820] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Elf Riftwalker",
["npcID"] = 221539,
},
[449939] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1049,
},
[463248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Defender",
["npcID"] = 171772,
},
[12471] = {
["source"] = "Wildspawn Felsworn",
["event"] = "SPELL_CAST_START",
["npcID"] = 11455,
},
[46029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Blood Knight",
["npcID"] = 24684,
},
[37967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Underbog Shambler",
["npcID"] = 17871,
},
[449941] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emperor Pitfang",
["npcID"] = 219265,
},
[8600] = {
["source"] = "Theka the Martyr",
["event"] = "SPELL_CAST_START",
["npcID"] = 7272,
},
[419229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Emissary",
["npcID"] = 232440,
},
[338353] = {
["source"] = "Corpse Collector",
["event"] = "SPELL_CAST_START",
["npcID"] = 173016,
},
[449942] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emperor Pitfang",
["npcID"] = 219265,
},
[191732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[434589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overfiend",
["npcID"] = 217429,
},
[30633] = {
["source"] = "Crystalline Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 26792,
},
[463256] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Defender",
["npcID"] = 171772,
},
[444829] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["npcID"] = 218370,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2922,
},
[451996] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1050,
},
[369073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Stitches",
["npcID"] = 213529,
},
[374192] = {
["source"] = "Armored Riplisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 217524,
},
[39376] = {
["isChanneled"] = true,
["source"] = "Mage Hunter Ascendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 26727,
},
[16429] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thuzadin Shadowcaster",
["npcID"] = 10398,
},
[435622] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[5213] = {
["source"] = "Gilnid",
["event"] = "SPELL_CAST_START",
["npcID"] = 1763,
},
[450980] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217491,
},
[447909] = {
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_START",
["npcID"] = 217353,
},
[459171] = {
["source"] = "Val'kyr Shadowguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 227940,
},
[34642] = {
["source"] = "Sunseeker Gene-Splicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 19507,
},
[39121] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Greenkeeper",
["npcID"] = 18419,
},
[60236] = {
["encounterName"] = "Ionar",
["source"] = "Storming Vortex",
["encounterID"] = 1984,
["event"] = "SPELL_CAST_START",
["npcID"] = 28547,
},
[449960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Kobyss",
["npcID"] = 215750,
},
[445866] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Swarm-Maven Donmiss",
["npcID"] = 216578,
},
[452009] = {
["source"] = "Hijacked Ironstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 219287,
},
[441772] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[456105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha of Anger",
["npcID"] = 226646,
},
[463272] = {
["source"] = "Caustic Skyrazor",
["event"] = "SPELL_CAST_START",
["npcID"] = 229918,
},
[425394] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[449965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sludgeborn Shambler",
["npcID"] = 220734,
},
[452013] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Wolf",
["npcID"] = 222797,
},
[39122] = {
["source"] = "Greater Frayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 19557,
},
[448944] = {
["source"] = "Kobold Snuffercrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 218662,
},
[447921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cascade Guardian",
["npcID"] = 214594,
},
[432565] = {
["source"] = "Manifested Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 211341,
},
[456112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha of Anger",
["npcID"] = 226646,
},
[12248] = {
["source"] = "Murkblood Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 17771,
},
[16430] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thuzadin Necromancer",
["npcID"] = 10400,
},
[41426] = {
["encounterName"] = "Reliquary of Souls",
["source"] = "Essence of Desire",
["npcID"] = 23419,
["event"] = "SPELL_CAST_START",
["encounterID"] = 606,
},
[431544] = {
["source"] = "Burrowing Stoneswarmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216537,
},
[441782] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[319956] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rot Flinger",
["npcID"] = 167055,
},
[389572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Eel",
["npcID"] = 215680,
},
[345552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Val'kyr Hunter",
["npcID"] = 227967,
},
[452024] = {
["source"] = "Iron-Runed Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 214576,
},
[445882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Night-Twisted Hog",
["npcID"] = 215206,
},
[459191] = {
["source"] = "Remembered Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 224157,
},
[41171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Heartseeker",
["npcID"] = 23339,
},
[18670] = {
["source"] = "Underbog Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 17734,
},
[443837] = {
["encounterName"] = "Speaker Halven",
["source"] = "Speaker Halven",
["encounterID"] = 3007,
["event"] = "SPELL_CAST_START",
["npcID"] = 217570,
},
[327130] = {
["isChanneled"] = true,
["source"] = "Flesh Crafter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165872,
},
[441791] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[456125] = {
["source"] = "Crystal Clacker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215881,
},
[188169] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[451008] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Knight",
["npcID"] = 222820,
},
[32363] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Nexus-Prince Shaffar",
["npcID"] = 18344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[375251] = {
["encounterName"] = "Magmatusk",
["encounterID"] = 2610,
["npcID"] = 181861,
},
[437700] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[455104] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abductor Arzda",
["npcID"] = 222836,
},
[449986] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[452035] = {
["source"] = "Tempest Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 222797,
},
[436679] = {
["source"] = "Scarab Captain Vul'akan",
["event"] = "SPELL_CAST_START",
["npcID"] = 218306,
},
[46035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Magister",
["npcID"] = 24685,
},
[466371] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight's Hammer Ambassador",
["npcID"] = 232463,
},
[427469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[456136] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkshade",
["npcID"] = 218452,
},
[41173] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Illidari Heartseeker",
["npcID"] = 23339,
},
[33111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[456138] = {
["source"] = "Grimlurk",
["event"] = "SPELL_CAST_START",
["npcID"] = 223091,
},
[383452] = {
["source"] = "Savage Bloodhound Mastiff",
["event"] = "SPELL_CAST_START",
["npcID"] = 233328,
},
[265721] = {
["source"] = "Terrorachna",
["event"] = "SPELL_CAST_START",
["npcID"] = 200349,
},
[459210] = {
["source"] = "Void Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[272888] = {
["source"] = "Ashvane Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 137517,
},
[456140] = {
["source"] = "Grimslice",
["event"] = "SPELL_CAST_START",
["npcID"] = 221551,
},
[418262] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Treasure Wraith",
["npcID"] = 208728,
},
[464331] = {
["encounterName"] = "The Seven",
["source"] = "Doom'rel",
["npcID"] = 226310,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[32364] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Nexus-Prince Shaffar",
["npcID"] = 18344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[464334] = {
["encounterName"] = "The Seven",
["source"] = "Doom'rel",
["npcID"] = 226310,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[453073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sweetspark the Oozeful",
["npcID"] = 220883,
},
[323057] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Ingra Maloch",
["npcID"] = 164567,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2397,
},
[451026] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[437719] = {
["source"] = "Primalist Galesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 190373,
},
[456147] = {
["source"] = "Regal Plainshawk",
["event"] = "SPELL_CAST_START",
["npcID"] = 222329,
},
[445910] = {
["source"] = "Sporbit",
["event"] = "SPELL_CAST_START",
["npcID"] = 213434,
},
[464338] = {
["encounterName"] = "The Seven",
["source"] = "Seeth'rel",
["npcID"] = 226312,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[437721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Pyromaniac",
["npcID"] = 218671,
},
[427484] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[436698] = {
["source"] = "Scarab Captain Vul'akan",
["event"] = "SPELL_CAST_START",
["npcID"] = 218306,
},
[8858] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Iron Excavator",
["npcID"] = 47276,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[464341] = {
["encounterName"] = "The Seven",
["source"] = "Seeth'rel",
["npcID"] = 226312,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[396775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Bodyguard",
["npcID"] = 232443,
},
[438749] = {
["encounterName"] = "The Silken Court",
["source"] = "Shattershell Scarab",
["encounterID"] = 2921,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218884,
},
[467415] = {
["encounterName"] = "General Angerforge",
["source"] = "General Angerforge",
["npcID"] = 226316,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3045,
},
[464344] = {
["encounterName"] = "The Seven",
["source"] = "Vile'rel",
["npcID"] = 226308,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[465368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ossirian the Unscarred",
["npcID"] = 231158,
},
[453084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sweetspark the Oozeful",
["npcID"] = 220883,
},
[447966] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Drahga Shadowburner",
["npcID"] = 40319,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1048,
},
[424420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
},
[59347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'ar Crypt Fiend",
["npcID"] = 29063,
},
[464347] = {
["encounterName"] = "The Seven",
["source"] = "Anger'rel",
["npcID"] = 226307,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[424421] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
},
[459229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[464348] = {
["encounterName"] = "The Seven",
["source"] = "Anger'rel",
["npcID"] = 226307,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[257288] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Irontide Cleaver",
["encounterID"] = 2098,
["event"] = "SPELL_CAST_START",
["npcID"] = 129879,
},
[464349] = {
["encounterName"] = "The Seven",
["source"] = "Anger'rel",
["npcID"] = 226307,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3048,
},
[424423] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Sergeant Shaynemail",
["npcID"] = 211291,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[44503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wretched Husk",
["npcID"] = 24690,
},
[53333] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'ar Necromancer",
["npcID"] = 29098,
},
[440806] = {
["encounterName"] = "Nerl'athekk the Skulking",
["source"] = "Nerl'athekk the Skulking",
["npcID"] = 219676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2946,
},
[429545] = {
["source"] = "Voidtouched Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 223469,
},
[451044] = {
["source"] = "Gargantuan Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222960,
},
[381430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quaking Rager",
["npcID"] = 215359,
},
[439784] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[269843] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Unbound Abomination",
["npcID"] = 133007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[424431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[44504] = {
["encounterName"] = "Selin Fireheart",
["source"] = "Wretched Husk",
["npcID"] = 24690,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1897,
},
[464358] = {
["encounterName"] = "The Seven",
["source"] = "Gloom'rel",
["npcID"] = 226313,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[343556] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 162689,
},
[53334] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Anub'ar Necromancer",
["npcID"] = 29064,
},
[464359] = {
["encounterName"] = "The Seven",
["source"] = "Gloom'rel",
["npcID"] = 226313,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[372222] = {
["encounterName"] = "Azureblade",
["encounterID"] = 2585,
["npcID"] = 186739,
},
[372223] = {
["npcID"] = 189265,
},
[459242] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nix'k the Wicked",
["npcID"] = 219749,
},
[456171] = {
["source"] = "Grimlurk",
["event"] = "SPELL_CAST_START",
["npcID"] = 223091,
},
[331274] = {
["source"] = "Animated Goo",
["event"] = "SPELL_CAST_START",
["npcID"] = 218519,
},
[455148] = {
["source"] = "Deepflayer Broodmother",
["event"] = "SPELL_CAST_START",
["npcID"] = 220286,
},
[31598] = {
["isChanneled"] = true,
["source"] = "Oro Eyegouge",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 7606,
},
[372225] = {
["npcID"] = 189467,
},
[443888] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[11898] = {
["source"] = "Sandfury Blood Drinker",
["event"] = "SPELL_CAST_START",
["npcID"] = 5649,
},
[418295] = {
["source"] = "Treasure Wraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 208728,
},
[11962] = {
["source"] = "Risen Battle Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 10425,
},
[462317] = {
["encounterName"] = "Lord Roccor",
["source"] = "Lord Roccor",
["encounterID"] = 3042,
["event"] = "SPELL_CAST_START",
["npcID"] = 226315,
},
[459246] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Broken Queen",
["npcID"] = 214368,
},
[439795] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[44505] = {
["source"] = "Wretched Bruiser",
["event"] = "SPELL_CAST_START",
["npcID"] = 24689,
},
[462319] = {
["encounterName"] = "Lord Roccor",
["source"] = "Lord Roccor",
["encounterID"] = 3042,
["event"] = "SPELL_CAST_START",
["npcID"] = 226315,
},
[455153] = {
["source"] = "Abyssal Devourer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216031,
},
[464367] = {
["encounterName"] = "The Seven",
["source"] = "Fire Elemental",
["npcID"] = 231410,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[462320] = {
["encounterName"] = "Lord Roccor",
["source"] = "Lord Roccor",
["encounterID"] = 3042,
["event"] = "SPELL_CAST_START",
["npcID"] = 226315,
},
[458226] = {
["source"] = "Nerubian Webcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 227578,
},
[37979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Healer",
["npcID"] = 17730,
},
[450037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Spire",
["npcID"] = 220068,
},
[458228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'ata",
["npcID"] = 219855,
},
[39131] = {
["encounterName"] = "Thorngrin the Tender",
["source"] = "Thorngrin the Tender",
["npcID"] = 17978,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1928,
},
[453110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ascended Webfriar",
["npcID"] = 219022,
},
[455158] = {
["source"] = "Deepflayer Broodmother",
["event"] = "SPELL_CAST_START",
["npcID"] = 220286,
},
[464372] = {
["encounterName"] = "Ambassador Flamelash",
["source"] = "Ambassador Flamelash",
["npcID"] = 226302,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3047,
},
[451064] = {
["source"] = "Gargantuan Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222960,
},
[76711] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Beguiler",
["npcID"] = 40167,
},
[56919] = {
["source"] = "Alliance Cleric",
["event"] = "SPELL_CAST_START",
["npcID"] = 26805,
},
[432638] = {
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212793,
},
[433662] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Reinforced Drone",
["npcID"] = 216856,
},
[447996] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustcloud Runt",
["npcID"] = 222796,
},
[445949] = {
["source"] = "Sureki Silkbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 222273,
},
[449021] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tij'allet",
["npcID"] = 215600,
},
[450045] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[345623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nar'zudah",
["npcID"] = 165824,
},
[23601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Sharpshooter",
["npcID"] = 16704,
},
[464379] = {
["encounterName"] = "Ambassador Flamelash",
["source"] = "Ambassador Flamelash",
["npcID"] = 226302,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3047,
},
[63830] = {
["encounterName"] = "Yogg-Saron",
["source"] = "Sara",
["encounterID"] = 1143,
["event"] = "SPELL_CAST_START",
["npcID"] = 33134,
},
[396812] = {
["npcID"] = 196576,
},
[458238] = {
["isChanneled"] = true,
["source"] = "Nerubian Oracle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 227581,
},
[439811] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[448002] = {
["source"] = "Charged Storm Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 217735,
},
[443908] = {
["encounterName"] = "Speaker Halven",
["source"] = "Speaker Halven",
["encounterID"] = 3007,
["event"] = "SPELL_CAST_START",
["npcID"] = 217570,
},
[439814] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[46043] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Warlock",
["npcID"] = 24686,
},
[434697] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[449031] = {
["source"] = "Nerubian Slashjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 218654,
},
[422414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[456198] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scary Sticker",
["npcID"] = 216948,
},
[17843] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Priestess Delrissa",
["npcID"] = 24560,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[378394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seaborne Elemental",
["npcID"] = 214549,
},
[415250] = {
["source"] = "Invasive Sporecap",
["event"] = "SPELL_CAST_START",
["npcID"] = 207482,
},
[449034] = {
["source"] = "Nerubian Slashjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 218654,
},
[41053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Champion",
["npcID"] = 22880,
},
[183088] = {
["source"] = "Mightstone Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92612,
},
[46044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Imp",
["npcID"] = 24815,
},
[373279] = {
["source"] = "Thing From Beyond",
["event"] = "SPELL_CAST_START",
["npcID"] = 189988,
},
[415253] = {
["source"] = "Invasive Sporecap",
["event"] = "SPELL_CAST_START",
["npcID"] = 207482,
},
[375327] = {
["npcID"] = 190404,
},
[260894] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[449038] = {
["source"] = "Anub'vir",
["event"] = "SPELL_CAST_START",
["npcID"] = 227573,
},
[438801] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[444944] = {
["source"] = "Bounty Swiftlet",
["event"] = "SPELL_CAST_START",
["npcID"] = 221897,
},
[11899] = {
["source"] = "Sandfury Witch Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 5650,
},
[443921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Ethereal",
["npcID"] = 221305,
},
[431637] = {
["source"] = "Nightfall Shadowalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 213895,
},
[465421] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ossirian the Unscarred",
["npcID"] = 231158,
},
[462351] = {
["encounterName"] = "Lord Roccor",
["source"] = "Lord Roccor",
["encounterID"] = 3042,
["event"] = "SPELL_CAST_START",
["npcID"] = 226315,
},
[431639] = {
["source"] = "Armored Scuttler",
["event"] = "SPELL_CAST_START",
["npcID"] = 216194,
},
[466447] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Emperor Dagran Thaurissan",
["npcID"] = 226305,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[438807] = {
["encounterName"] = "Broodtwister Ovi'nax",
["source"] = "Colossal Spider",
["npcID"] = 219045,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2919,
},
[456211] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scary Sticker",
["npcID"] = 216948,
},
[453140] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[377383] = {
["npcID"] = 192333,
},
[415262] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[453142] = {
["event"] = "SPELL_CAST_START",
["source"] = "Web Marauder",
["npcID"] = 219034,
},
[443929] = {
["source"] = "Kaheti Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 218315,
},
[444953] = {
["source"] = "Xur'khun the Defiled",
["event"] = "SPELL_CAST_START",
["npcID"] = 221845,
},
[431645] = {
["source"] = "Dreadstrike Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 213189,
},
[451097] = {
["source"] = "Sureki Militant",
["event"] = "SPELL_CAST_START",
["npcID"] = 213932,
},
[451098] = {
["source"] = "Sureki Militant",
["event"] = "SPELL_CAST_START",
["npcID"] = 213932,
},
[41183] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Stormcaller",
["npcID"] = 22846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[451099] = {
["source"] = "Sureki Militant",
["event"] = "SPELL_CAST_START",
["npcID"] = 213932,
},
[439838] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[46046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Physician",
["npcID"] = 24687,
},
[432673] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Looter",
["npcID"] = 216303,
},
[450077] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1049,
},
[448030] = {
["source"] = "Agile Pursuer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223181,
},
[387629] = {
["npcID"] = 195876,
},
[34785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest-Forge Peacekeeper",
["npcID"] = 18405,
},
[451102] = {
["source"] = "Ascendant Vis'coxria",
["event"] = "SPELL_CAST_START",
["npcID"] = 211261,
},
[412200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Aerobot",
["npcID"] = 205723,
},
[445984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hilltop Jawcrawler",
["npcID"] = 227980,
},
[452127] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[32369] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Ethereal Apprentice",
["npcID"] = 18430,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[458271] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moth'ethk",
["npcID"] = 206203,
},
[44639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Witch",
["npcID"] = 24696,
},
[375348] = {
["npcID"] = 190401,
},
[323137] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Droman Oulfarran",
["encounterID"] = 2397,
["event"] = "SPELL_CAST_START",
["npcID"] = 164804,
},
[378420] = {
["source"] = "Raging Rock",
["event"] = "SPELL_CAST_START",
["npcID"] = 229792,
},
[323138] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Ingra Maloch",
["npcID"] = 164567,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2397,
},
[451107] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[438823] = {
["source"] = "Diabolic Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 219161,
},
[464417] = {
["encounterName"] = "General Angerforge",
["source"] = "Shadowforge Flame Keeper",
["npcID"] = 231554,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3045,
},
[375351] = {
["npcID"] = 190403,
},
[340544] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spinemaw Staghorn",
["npcID"] = 167111,
},
[452133] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blackblood Coalescence",
["npcID"] = 215205,
},
[431659] = {
["source"] = "Clotweave Widow",
["event"] = "SPELL_CAST_START",
["npcID"] = 216193,
},
[274002] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Chopper Redhook",
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 128650,
},
[438826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Atik",
["npcID"] = 217533,
},
[450088] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1049,
},
[451113] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[440876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Jelly Purveyor",
["npcID"] = 220141,
},
[327240] = {
["source"] = "Loyal Creation",
["event"] = "SPELL_CAST_START",
["npcID"] = 165911,
},
[451114] = {
["source"] = "Animated Darkness",
["event"] = "SPELL_CAST_START",
["npcID"] = 213905,
},
[445996] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[257326] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Chopper Redhook",
["event"] = "SPELL_CAST_START",
["npcID"] = 128650,
},
[395834] = {
["source"] = "Anvilrage Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 232893,
},
[451117] = {
["source"] = "Ixkreten the Unbreakable",
["event"] = "SPELL_CAST_START",
["npcID"] = 211262,
},
[31602] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerub'enkan",
["npcID"] = 10437,
},
[412215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spurlok, Timesworn Sentinel",
["npcID"] = 205158,
},
[388669] = {
["event"] = "SPELL_CAST_START",
["source"] = "Garlic-Breathed Hydra",
["npcID"] = 224751,
},
[439857] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Whisperer",
["npcID"] = 219723,
},
[449071] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[450095] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Drahga Shadowburner",
["npcID"] = 40319,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1048,
},
[451119] = {
["source"] = "Ixkreten the Unbreakable",
["event"] = "SPELL_CAST_START",
["npcID"] = 211262,
},
[434740] = {
["source"] = "Nightfall Inquisitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 217518,
},
[423479] = {
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 210812,
},
[41186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtongue Primalist",
["npcID"] = 22847,
},
[457266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greenhorn Extra",
["npcID"] = 228307,
},
[450100] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1049,
},
[397889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Waterspeaker",
["npcID"] = 200126,
},
[467505] = {
["source"] = "Anvilrage Artillerist",
["event"] = "SPELL_CAST_START",
["npcID"] = 232244,
},
[431674] = {
["source"] = "Kaheti Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 217448,
},
[325205] = {
["source"] = "Keeneye Bowman",
["event"] = "SPELL_CAST_START",
["npcID"] = 166936,
},
[3256] = {
["source"] = "Scarab",
["event"] = "SPELL_CAST_START",
["npcID"] = 7269,
},
[451128] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparking Haulbot",
["npcID"] = 219497,
},
[448057] = {
["encounterName"] = "Erudax",
["source"] = "Erudax",
["npcID"] = 40484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1049,
},
[9053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Iron Excavator",
["npcID"] = 47276,
},
[452153] = {
["source"] = "Candlelit Ouchpatcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214252,
},
[425536] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[41187] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Primalist",
["npcID"] = 22847,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[22709] = {
["source"] = "Lethtendris",
["event"] = "SPELL_CAST_START",
["npcID"] = 14327,
},
[451132] = {
["source"] = "Sparking Haulbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 220191,
},
[452156] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[34661] = {
["encounterName"] = "Thorngrin the Tender",
["source"] = "Thorngrin the Tender",
["encounterID"] = 1928,
["event"] = "SPELL_CAST_START",
["npcID"] = 17978,
},
[59359] = {
["encounterName"] = "Anub'arak",
["source"] = "Anub'ar Venomancer",
["npcID"] = 29217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1973,
},
[439873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Whisperer",
["npcID"] = 219723,
},
[43619] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sand Lasher",
["npcID"] = 44569,
},
[470587] = {
["source"] = "Kobyss Witherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214251,
},
[434756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hired Muscle",
["npcID"] = 210269,
},
[440899] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[470588] = {
["source"] = "Kobyss Witherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214251,
},
[69051] = {
["encounterName"] = "Devourer of Souls",
["source"] = "Devourer of Souls",
["npcID"] = 36502,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2007,
},
[449090] = {
["isChanneled"] = true,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223423,
},
[396879] = {
["event"] = "SPELL_CAST_START",
["source"] = "Geothermus",
["npcID"] = 217416,
},
[41188] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtongue Primalist",
["npcID"] = 22847,
},
[408141] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[372311] = {
["npcID"] = 189266,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["npcID"] = 190484,
["encounterID"] = 2623,
},
[456259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candleflyer Captain",
["npcID"] = 220276,
},
[470592] = {
["source"] = "Nightfall Shadeguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 217519,
},
[369241] = {
["source"] = "Savage Bloodhound Mastiff",
["event"] = "SPELL_CAST_START",
["npcID"] = 233328,
},
[69564] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulguard Adept",
["npcID"] = 36620,
},
[423501] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[456263] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candleflyer Captain",
["npcID"] = 220276,
},
[15228] = {
["source"] = "Murkblood Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 17771,
},
[438860] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[452169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[323177] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Droman Oulfarran",
["npcID"] = 164804,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2397,
},
[22710] = {
["source"] = "Lethtendris",
["event"] = "SPELL_CAST_START",
["npcID"] = 14327,
},
[452171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swarm-Maven Donmiss",
["npcID"] = 216578,
},
[466504] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Moira Bronzebeard",
["npcID"] = 226314,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[431697] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ascended Webwarden",
["npcID"] = 215756,
},
[440912] = {
["source"] = "Creeping Lashroom",
["event"] = "SPELL_CAST_START",
["npcID"] = 214958,
},
[34791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest-Forge Peacekeeper",
["npcID"] = 18405,
},
[381535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scornful Sandshoal",
["npcID"] = 214662,
},
[450127] = {
["source"] = "Siegehold Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 216016,
},
[453199] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vanishing Nightmare",
["npcID"] = 224922,
},
[450128] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["encounterID"] = 2894,
["event"] = "SPELL_CAST_START",
["npcID"] = 214263,
},
[35943] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Acolyte",
["npcID"] = 16594,
},
[450129] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[434773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Patron",
["npcID"] = 214668,
},
[452177] = {
["source"] = "Arathi Reserve",
["event"] = "SPELL_CAST_START",
["npcID"] = 214429,
},
[359016] = {
["encounterName"] = "Cragpie",
["source"] = "Cragpie",
["encounterID"] = 3001,
["event"] = "SPELL_CAST_START",
["npcID"] = 220008,
},
[470605] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Moira Bronzebeard",
["npcID"] = 226314,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[425561] = {
["source"] = "Pack Mole",
["event"] = "SPELL_CAST_START",
["npcID"] = 211977,
},
[447060] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flavor Scientist",
["npcID"] = 222964,
},
[427609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Knight",
["npcID"] = 206696,
},
[46181] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Apoko",
["npcID"] = 24553,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[386660] = {
["encounterName"] = "Leymor",
["npcID"] = 186644,
["encounterID"] = 2582,
},
[69056] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulguard Watchman",
["npcID"] = 36478,
},
[38759] = {
["encounterName"] = "Pandemonius",
["source"] = "Pandemonius",
["npcID"] = 18341,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1900,
},
[470609] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Moira Bronzebeard",
["npcID"] = 226314,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[445016] = {
["encounterName"] = "The Bloodbound Horror",
["source"] = "Lost Watcher",
["encounterID"] = 2917,
["event"] = "SPELL_CAST_START",
["npcID"] = 221667,
},
[458325] = {
["source"] = "Venombite",
["event"] = "SPELL_CAST_START",
["npcID"] = 227632,
},
[434779] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[376426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Condensing Sprite",
["npcID"] = 215362,
},
[451160] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[44518] = {
["source"] = "Sunblade Warlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 24686,
},
[438877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nakt",
["npcID"] = 218324,
},
[468566] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fineous Darkvire",
["npcID"] = 232269,
},
[458329] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kordac",
["npcID"] = 221084,
},
[445021] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Summoned Acolyte",
["npcID"] = 221863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2922,
},
[257862] = {
["encounterName"] = "Hadal Darkfathom",
["source"] = "Hadal Darkfathom",
["npcID"] = 128651,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2099,
},
[453212] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[455260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathspore Lashroom",
["npcID"] = 221424,
},
[468569] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fineous Darkvire",
["npcID"] = 232269,
},
[38760] = {
["encounterName"] = "Pandemonius",
["source"] = "Pandemonius",
["encounterID"] = 1900,
["event"] = "SPELL_CAST_START",
["npcID"] = 18341,
},
[450142] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["encounterID"] = 2894,
["event"] = "SPELL_CAST_START",
["npcID"] = 214263,
},
[434786] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trilling Attendant",
["npcID"] = 216293,
},
[444000] = {
["source"] = "Woven Threadmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218317,
},
[197974] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Soul-torn Vanguard",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 100485,
},
[384623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Blacksmith",
["npcID"] = 189471,
},
[44519] = {
["source"] = "Sunblade Warlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 24686,
},
[448098] = {
["isChanneled"] = true,
["source"] = "Black Blood Harvester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222455,
},
[40936] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Illidari Fearbringer",
["npcID"] = 22954,
},
[449123] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tij'allet",
["npcID"] = 215600,
},
[447076] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[448100] = {
["source"] = "Black Blood Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 222455,
},
[434793] = {
["isChanneled"] = true,
["source"] = "Trilling Attendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216293,
},
[463459] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[427629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[468580] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chiseled War Construct",
["npcID"] = 232268,
},
[450153] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sludgeborn Shambler",
["npcID"] = 220734,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[449130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[455273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepsludger",
["npcID"] = 216536,
},
[326281] = {
["encounterName"] = "Tred'ova",
["source"] = "Tred'ova",
["npcID"] = 164517,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2393,
},
[423538] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[257870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Buccaneer",
["npcID"] = 130011,
},
[455275] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[445038] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Trickster",
["npcID"] = 214343,
},
[452205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggregation of Horrors",
["npcID"] = 220999,
},
[455277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[448111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diu'mik",
["npcID"] = 211564,
},
[449135] = {
["source"] = "Flickerflame Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212542,
},
[446064] = {
["encounterName"] = "Leviathan Caller",
["source"] = "Slamming Tentacle",
["encounterID"] = 3002,
["event"] = "SPELL_CAST_START",
["npcID"] = 220741,
},
[434803] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215657,
},
[468587] = {
["source"] = "Unstoppable Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 230684,
},
[334476] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 162689,
},
[442994] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[381570] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quaking Rager",
["npcID"] = 215359,
},
[431734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadesworn Crusher",
["npcID"] = 218527,
},
[40938] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Fearbringer",
["npcID"] = 22954,
},
[463471] = {
["encounterName"] = "Lord Incendius",
["source"] = "Flame Geyser",
["encounterID"] = 3043,
["event"] = "SPELL_CAST_START",
["npcID"] = 230079,
},
[463472] = {
["encounterName"] = "Lord Incendius",
["source"] = "Flame Geyser",
["encounterID"] = 3043,
["event"] = "SPELL_CAST_START",
["npcID"] = 230079,
},
[12542] = {
["source"] = "Wildspawn Felsworn",
["event"] = "SPELL_CAST_START",
["npcID"] = 11455,
},
[442998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nix'k the Wicked",
["npcID"] = 219749,
},
[433785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reinforced Drone",
["npcID"] = 216363,
},
[426619] = {
["event"] = "SPELL_CAST_START",
["source"] = "Torchsnarl",
["npcID"] = 212993,
},
[12734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Malor",
["npcID"] = 11032,
},
[418430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Familiar",
["npcID"] = 221904,
},
[443001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ascended Webwarden",
["npcID"] = 215756,
},
[457334] = {
["source"] = "Scourge Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 227180,
},
[384648] = {
["source"] = "Warpwood Tangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 11464,
},
[455287] = {
["encounterName"] = "Rasha'nan",
["source"] = "Infested Spawn",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 219739,
},
[377483] = {
["source"] = "Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 221572,
},
[40683] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[457336] = {
["source"] = "Awakened Machinist",
["event"] = "SPELL_CAST_START",
["npcID"] = 227273,
},
[445052] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[334488] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 162689,
},
[418436] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Familiar",
["npcID"] = 221904,
},
[375439] = {
["encounterName"] = "Magmatusk",
["encounterID"] = 2610,
["npcID"] = 181861,
},
[470649] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Avatar of Ragnaros",
["npcID"] = 231006,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[458365] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pride of Beledar",
["npcID"] = 221786,
},
[450176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[456319] = {
["source"] = "Aelric Leid",
["event"] = "SPELL_CAST_START",
["npcID"] = 213208,
},
[469628] = {
["encounterName"] = "The Seven",
["source"] = "Dope'rel",
["npcID"] = 226309,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[463486] = {
["encounterName"] = "Lord Incendius",
["source"] = "Lord Incendius",
["encounterID"] = 3043,
["event"] = "SPELL_CAST_START",
["npcID"] = 226304,
},
[449154] = {
["source"] = "Forge Loader",
["event"] = "SPELL_CAST_START",
["npcID"] = 213343,
},
[456321] = {
["source"] = "Aelric Leid",
["event"] = "SPELL_CAST_START",
["npcID"] = 213208,
},
[458369] = {
["source"] = "Kas'dru",
["event"] = "SPELL_CAST_START",
["npcID"] = 227635,
},
[257882] = {
["encounterName"] = "Hadal Darkfathom",
["source"] = "Hadal Darkfathom",
["encounterID"] = 2099,
["event"] = "SPELL_CAST_START",
["npcID"] = 128651,
},
[434824] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[464513] = {
["source"] = "Kel'Thuzad",
["event"] = "SPELL_CAST_START",
["npcID"] = 228841,
},
[446086] = {
["source"] = "Sureki Unnaturaler",
["event"] = "SPELL_CAST_START",
["npcID"] = 216339,
},
[69068] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulguard Adept",
["npcID"] = 36620,
},
[457348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[450182] = {
["source"] = "Disturbed Mudspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219897,
},
[422541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[384663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgewrought Monstrosity",
["npcID"] = 194816,
},
[392854] = {
["source"] = "Primal Scythid Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 184853,
},
[333477] = {
["source"] = "Goregrind",
["event"] = "SPELL_CAST_START",
["npcID"] = 163621,
},
[432781] = {
["source"] = "Radiating Voidstone",
["event"] = "SPELL_CAST_START",
["npcID"] = 212739,
},
[434829] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[463495] = {
["encounterName"] = "Lord Incendius",
["source"] = "Lord Incendius",
["encounterID"] = 3043,
["event"] = "SPELL_CAST_START",
["npcID"] = 226304,
},
[333479] = {
["source"] = "Rotspew",
["event"] = "SPELL_CAST_START",
["npcID"] = 163620,
},
[453258] = {
["source"] = "Sikran",
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[320171] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["encounterID"] = 2388,
["event"] = "SPELL_CAST_START",
["npcID"] = 163157,
},
[452235] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashen Stonestalker",
["npcID"] = 217624,
},
[450188] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candlelit Blind-Hound",
["npcID"] = 218213,
},
[377502] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pearlfin Tiderunner",
["npcID"] = 214433,
},
[420501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dripear the Waxy",
["npcID"] = 213883,
},
[34799] = {
["encounterName"] = "Commander Sarannis",
["source"] = "Commander Sarannis",
["encounterID"] = 1925,
["event"] = "SPELL_CAST_START",
["npcID"] = 17976,
},
[449167] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213216,
},
[450191] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[426645] = {
["source"] = "Naz'jar Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 212673,
},
[457359] = {
["source"] = "Beebiter",
["event"] = "SPELL_CAST_START",
["npcID"] = 222284,
},
[443027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Threadmaestro Fothis",
["npcID"] = 216541,
},
[463503] = {
["encounterName"] = "Lord Incendius",
["source"] = "Lord Incendius",
["encounterID"] = 3043,
["event"] = "SPELL_CAST_START",
["npcID"] = 226304,
},
[464527] = {
["source"] = "Kel'Thuzad",
["event"] = "SPELL_CAST_START",
["npcID"] = 228841,
},
[338606] = {
["source"] = "Separation Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 167731,
},
[333488] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["encounterID"] = 2388,
["event"] = "SPELL_CAST_START",
["npcID"] = 163157,
},
[450196] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candlelit Blind-Hound",
["npcID"] = 218213,
},
[450197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[444055] = {
["source"] = "Silkweaver Hollowguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218012,
},
[451222] = {
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_START",
["npcID"] = 219983,
},
[453271] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggregation of Horrors",
["npcID"] = 220999,
},
[451224] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Warlock",
["npcID"] = 224271,
},
[428703] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[372397] = {
["source"] = "Brackenhide Devourer",
["event"] = "SPELL_CAST_START",
["npcID"] = 230687,
},
[41071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Deathshaper",
["npcID"] = 22882,
},
[411300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
[41455] = {
["encounterName"] = "The Illidari Council",
["source"] = "Lady Malande",
["npcID"] = 22951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[456346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[452252] = {
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_START",
["npcID"] = 217353,
},
[430754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Oracle",
["npcID"] = 214439,
},
[31673] = {
["encounterName"] = "Hungarfen",
["source"] = "Hungarfen",
["npcID"] = 17770,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1946,
},
[31865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seductress",
["npcID"] = 17399,
},
[458397] = {
["source"] = "Kas'dru",
["event"] = "SPELL_CAST_START",
["npcID"] = 227635,
},
[459421] = {
["source"] = "Sir Finley Mrrgglton",
["event"] = "SPELL_CAST_START",
["npcID"] = 228030,
},
[424614] = {
["source"] = "Fungal Stabber",
["event"] = "SPELL_CAST_START",
["npcID"] = 207450,
},
[459422] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Onyxia",
["npcID"] = 221585,
},
[44271] = {
["event"] = "SPELL_CAST_START",
["source"] = "Garaxxas",
["npcID"] = 24555,
},
[448162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enormous Kelp-Snaggler",
["npcID"] = 221061,
},
[428711] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213216,
},
[5137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undead Postman",
["npcID"] = 11142,
},
[315076] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cackling Stitchsurgeon",
["npcID"] = 170821,
},
[371383] = {
["source"] = "Kel'Thuzad",
["event"] = "SPELL_CAST_START",
["npcID"] = 228841,
},
[447141] = {
["source"] = "Repurposed Loaderbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 222923,
},
[440999] = {
["source"] = "Venommaster Nezarox",
["event"] = "SPELL_CAST_START",
["npcID"] = 219006,
},
[415406] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["encounterID"] = 2831,
["event"] = "SPELL_CAST_START",
["npcID"] = 207481,
},
[400050] = {
["source"] = "Deepflayer Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 221198,
},
[257899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Ravager",
["npcID"] = 130012,
},
[34930] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Darkcaster",
["npcID"] = 18331,
},
[424621] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Sergeant Shaynemail",
["npcID"] = 211291,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[320200] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 162689,
},
[44272] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["encounterID"] = 1895,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 24556,
},
[447146] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["npcID"] = 216320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2905,
},
[443052] = {
["source"] = "Siege Hopebreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 216019,
},
[321226] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["encounterID"] = 2388,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 163157,
},
[436910] = {
["source"] = "Woven Threadmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218317,
},
[458409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pride of Beledar",
["npcID"] = 221786,
},
[433841] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[439984] = {
["isChanneled"] = true,
["source"] = "Earthen-Ward Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216221,
},
[453294] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggregation of Horrors",
["npcID"] = 220999,
},
[462508] = {
["source"] = "Void Emissary",
["event"] = "SPELL_CAST_START",
["npcID"] = 229537,
},
[426677] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[320208] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Stitchflesh's Creation",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 164578,
},
[452272] = {
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 213658,
},
[60781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgotten Depths Acolyte",
["npcID"] = 30205,
},
[433845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[461487] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[388801] = {
["npcID"] = 195855,
},
[341709] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["npcID"] = 164501,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2392,
},
[69080] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulguard Bonecaster",
["npcID"] = 36564,
},
[400066] = {
["source"] = "Hallowlight Flitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 215526,
},
[17470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Timmy the Cruel",
["npcID"] = 10808,
},
[464563] = {
["source"] = "Kel'Thuzad",
["event"] = "SPELL_CAST_START",
["npcID"] = 228841,
},
[153485] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Chasm Worm",
["npcID"] = 217962,
},
[457398] = {
["source"] = "Beebiter",
["event"] = "SPELL_CAST_START",
["npcID"] = 222284,
},
[438971] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Ravenous Cinderbee",
["npcID"] = 218016,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2931,
},
[427710] = {
["source"] = "Sporbit",
["event"] = "SPELL_CAST_START",
["npcID"] = 213434,
},
[269029] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["npcID"] = 129208,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2109,
},
[458423] = {
["source"] = "Kordac",
["event"] = "SPELL_CAST_START",
["npcID"] = 221084,
},
[257397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Bonesaw",
["npcID"] = 129788,
},
[331479] = {
["source"] = "Animated Goo",
["event"] = "SPELL_CAST_START",
["npcID"] = 218519,
},
[443068] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[458425] = {
["source"] = "Gloomsprout",
["event"] = "SPELL_CAST_START",
["npcID"] = 215501,
},
[459449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Onyxia",
["npcID"] = 221585,
},
[406215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hive'Ashi Worker",
["npcID"] = 226485,
},
[438976] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[90325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Gargantuan",
["npcID"] = 109154,
},
[13952] = {
["source"] = "Murkblood Healer",
["event"] = "SPELL_CAST_START",
["npcID"] = 17730,
},
[321247] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["encounterID"] = 2388,
["event"] = "SPELL_CAST_START",
["npcID"] = 163157,
},
[437956] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Pyromaniac",
["npcID"] = 218671,
},
[445123] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[442052] = {
["source"] = "Sureki Ironweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 220551,
},
[469694] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grim Patron",
["npcID"] = 232444,
},
[327393] = {
["source"] = "Zolramus Necromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 163618,
},
[423626] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[451268] = {
["source"] = "Rotbark the Unfelled",
["event"] = "SPELL_CAST_START",
["npcID"] = 217670,
},
[440007] = {
["source"] = "Iron-Runed Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 214576,
},
[377559] = {
["encounterName"] = "Treemouth",
["encounterID"] = 2568,
["npcID"] = 186120,
},
[39413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Spearman",
["npcID"] = 17729,
},
[44276] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["encounterID"] = 1895,
["event"] = "SPELL_CAST_START",
["npcID"] = 24556,
},
[469700] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grim Patron",
["npcID"] = 232444,
},
[15232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[7713] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undead Postman",
["npcID"] = 11142,
},
[150424] = {
["source"] = "Amani Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215675,
},
[451276] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbark the Unfelled",
["npcID"] = 217670,
},
[465609] = {
["source"] = "Brackenhide Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 230672,
},
[15744] = {
["source"] = "Pimgib",
["event"] = "SPELL_CAST_START",
["npcID"] = 14349,
},
[451277] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217489,
},
[455373] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[178067] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sea Skrog",
["npcID"] = 88094,
},
[39670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Defiler",
["npcID"] = 22853,
},
[430805] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[454352] = {
["source"] = "Toaka the Explorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222659,
},
[455377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ahg'zagall",
["npcID"] = 214151,
},
[41334] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Acolyte",
["npcID"] = 22939,
},
[469711] = {
["encounterName"] = "The Seven",
["source"] = "Vile'rel",
["npcID"] = 226308,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[448213] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[455380] = {
["source"] = "Malfunctioning Railbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 218251,
},
[430812] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[39671] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Illidari Defiler",
["npcID"] = 22853,
},
[451288] = {
["encounterName"] = "The Bloodbound Horror",
["source"] = "Lost Watcher",
["encounterID"] = 2917,
["event"] = "SPELL_CAST_START",
["npcID"] = 221667,
},
[459479] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Onyxia",
["npcID"] = 221585,
},
[444123] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2816,
},
[449242] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[452314] = {
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 213658,
},
[188404] = {
["encounterName"] = "Hymdall",
["source"] = "Storm Drake",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 97788,
},
[457434] = {
["event"] = "SPELL_CAST_START",
["source"] = "Riled Dirtdiver",
["npcID"] = 225905,
},
[456159] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Falconer",
["npcID"] = 17994,
},
[447187] = {
["encounterName"] = "Researcher Ven'kex",
["source"] = "Researcher Ven'kex",
["npcID"] = 219856,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2991,
},
[31407] = {
["source"] = "Murkblood Spearman",
["event"] = "SPELL_CAST_START",
["npcID"] = 17729,
},
[449245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tij'allet",
["npcID"] = 215600,
},
[388844] = {
["source"] = "Fetid Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 231083,
},
[414945] = {
["source"] = "Gnarled Reviver",
["event"] = "SPELL_CAST_START",
["npcID"] = 207468,
},
[20824] = {
["encounterName"] = "The Black Stalker",
["source"] = "Spore Strider",
["encounterID"] = 1948,
["event"] = "SPELL_CAST_START",
["npcID"] = 22299,
},
[449246] = {
["event"] = "SPELL_CAST_START",
["source"] = "General Emmerich",
["npcID"] = 215371,
},
[34809] = {
["source"] = "Bloodwarder Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 19633,
},
[397931] = {
["source"] = "Minion of Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57109,
},
[455364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kx",
["npcID"] = 216582,
},
[383236] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pearlfin Sea-Shaman",
["npcID"] = 214435,
},
[31405] = {
["source"] = "Murkblood Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 17771,
},
[451295] = {
["isChanneled"] = true,
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219983,
},
[61515] = {
["source"] = "Hardened Steel Skycaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 28580,
},
[469723] = {
["encounterName"] = "The Seven",
["source"] = "Vile'rel",
["npcID"] = 226308,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[451812] = {
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 212884,
},
[46036] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Magister",
["npcID"] = 24685,
},
[465268] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Fireguard Destroyer",
["npcID"] = 230991,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[449940] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[50455] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grand Necrolord Antiok",
["npcID"] = 28006,
},
[439012] = {
["source"] = "Venommaster Nezarox",
["event"] = "SPELL_CAST_START",
["npcID"] = 219006,
},
[32637] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomwalker",
["npcID"] = 167749,
},
[453345] = {
["source"] = "Manifested Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 211341,
},
[321834] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["encounterID"] = 2392,
["event"] = "SPELL_CAST_START",
["npcID"] = 164501,
},
[31623] = {
["encounterName"] = "Swamplord Musel'ek",
["source"] = "Swamplord Musel'ek",
["npcID"] = 17826,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1947,
},
[37113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[449251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Threadmancer",
["npcID"] = 208244,
},
[265540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Maggot",
["npcID"] = 130909,
},
[457441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[382708] = {
["npcID"] = 193293,
},
[404207] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Pyromancer Loregrain",
["npcID"] = 232571,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[17620] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Maleki the Pallid",
["npcID"] = 10438,
},
[455313] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathspore Lashroom",
["npcID"] = 221424,
},
[448147] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Chamber Guardian",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 223204,
},
[34170] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Geomancer",
["npcID"] = 18420,
},
[417517] = {
["source"] = "Houndmaster Grebmar",
["event"] = "SPELL_CAST_START",
["npcID"] = 232258,
},
[443111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glooming Disciple",
["npcID"] = 216867,
},
[456420] = {
["encounterName"] = "Sikran, Captain of the Sureki",
["source"] = "Sikran",
["encounterID"] = 2898,
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[34360] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sunseeker Geomancer",
["npcID"] = 18420,
},
[438343] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[17473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Aurius Rivendare",
["npcID"] = 45412,
},
[398497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormtop Shalemaw",
["npcID"] = 212364,
},
[326405] = {
["isChanneled"] = true,
["source"] = "Doomwalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 167749,
},
[448663] = {
["encounterName"] = "The Puppetmaster",
["source"] = "The Puppetmaster?",
["encounterID"] = 3006,
["event"] = "SPELL_CAST_START",
["npcID"] = 220510,
},
[436971] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 217748,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[382712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wilted Oak",
["npcID"] = 186229,
},
[52086] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Anub'ar Webspinner",
["npcID"] = 29335,
},
[454375] = {
["source"] = "Toaka the Explorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222659,
},
[426734] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[272609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[457447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[391837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mage Slayer Phytethil",
["npcID"] = 226298,
},
[267997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Charhound",
["npcID"] = 226269,
},
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[457448] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[456696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Brute",
["npcID"] = 224152,
},
[459496] = {
["source"] = "Remembered Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 224157,
},
[30846] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Technician",
["npcID"] = 17414,
},
[436360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glooming Darkweaver",
["npcID"] = 216868,
},
[438471] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[46164] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Kael'thas Sunstrider",
["npcID"] = 24664,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[325386] = {
["event"] = "SPELL_CAST_START",
["source"] = "Necromancer Warcaster",
["npcID"] = 167115,
},
[15585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Healer",
["npcID"] = 17730,
},
[456295] = {
["source"] = "Aelric Leid",
["event"] = "SPELL_CAST_START",
["npcID"] = 213208,
},
[458311] = {
["source"] = "Venombite",
["event"] = "SPELL_CAST_START",
["npcID"] = 227632,
},
[445541] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[433766] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[454519] = {
["source"] = "Tortollan Visitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 223857,
},
[369409] = {
["npcID"] = 184130,
},
[456281] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha of Anger",
["npcID"] = 226646,
},
[432227] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[391470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Bodyguard",
["npcID"] = 232443,
},
[441626] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[201226] = {
["source"] = "Bloodtainted Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 100531,
},
[61581] = {
["isChanneled"] = true,
["source"] = "Stormforged Runeshaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 28836,
},
[396665] = {
["source"] = "Magmas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199027,
},
[445524] = {
["source"] = "Shrillwing Hunter En'kilah",
["event"] = "SPELL_CAST_START",
["npcID"] = 222038,
},
[444145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Siege Artillery",
["npcID"] = 224521,
},
[434505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Patron",
["npcID"] = 214668,
},
[401148] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hive'Ashi Swarmer",
["npcID"] = 226487,
},
[17290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hellfire Imp",
["npcID"] = 17477,
},
[391793] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Tidecore",
["npcID"] = 213699,
},
[427616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unruly Stormrook",
["npcID"] = 207186,
},
[454384] = {
["source"] = "Toaka the Explorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222659,
},
[456910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Earthgorger",
["npcID"] = 218393,
},
[446533] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbral Bull",
["npcID"] = 227934,
},
[452162] = {
["source"] = "Covert Webmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223844,
},
[458610] = {
["source"] = "Toadstomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 207803,
},
[38618] = {
["encounterName"] = "Frozen Commander",
["source"] = "Commander Stoutbeard",
["encounterID"] = 519,
["event"] = "SPELL_CAST_START",
["npcID"] = 26796,
},
[374533] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2612,
},
[320170] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["encounterID"] = 2388,
["event"] = "SPELL_CAST_START",
["npcID"] = 162692,
},
[472158] = {
["encounterName"] = "Zekvir",
["source"] = "Zekvir",
["npcID"] = 225204,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2987,
},
[17405] = {
["source"] = "Balnazzar",
["event"] = "SPELL_CAST_START",
["npcID"] = 10813,
},
[257426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Enforcer",
["npcID"] = 129602,
},
[457458] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[323347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zolramus Gatekeeper",
["npcID"] = 165137,
},
[439031] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["npcID"] = 210267,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2929,
},
[440181] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mirehat Fungalmancer",
["npcID"] = 221362,
},
[445174] = {
["encounterName"] = "The Bloodbound Horror",
["source"] = "Forgotten Harbinger",
["encounterID"] = 2917,
["event"] = "SPELL_CAST_START",
["npcID"] = 221945,
},
[32908] = {
["source"] = "Bloodwarder Falconer",
["event"] = "SPELL_CAST_START",
["npcID"] = 17994,
},
[463602] = {
["encounterName"] = "Tred'ova",
["source"] = "Tred'ova",
["npcID"] = 164517,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2393,
},
[440056] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[457460] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[441627] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flavor Scientist",
["npcID"] = 214673,
},
[336499] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["npcID"] = 164501,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2392,
},
[59638] = {
["source"] = "Mirror Image",
["event"] = "SPELL_CAST_START",
["npcID"] = 31216,
},
[434802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixin",
["npcID"] = 217531,
},
[6466] = {
["source"] = "Goblin Woodcarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 641,
},
[448248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodstained Webmage",
["npcID"] = 223253,
},
[456438] = {
["source"] = "Cursed Miner",
["event"] = "SPELL_CAST_START",
["npcID"] = 213565,
},
[465652] = {
["encounterName"] = "The Seven",
["source"] = "Anger'rel",
["npcID"] = 226307,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[451280] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbark the Unfelled",
["npcID"] = 217670,
},
[40059] = {
["encounterName"] = "The Maker",
["source"] = "The Maker",
["npcID"] = 17381,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1922,
},
[468579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chiseled War Construct",
["npcID"] = 232268,
},
[161509] = {
["source"] = "Mandragora Lifedrinker",
["event"] = "SPELL_CAST_START",
["npcID"] = 80699,
},
[438012] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[434089] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[427583] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[424704] = {
["source"] = "Fungal Gutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 207454,
},
[324323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skeletal Marauder",
["npcID"] = 165919,
},
[439037] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ravenous Spawn",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 216205,
},
[325802] = {
["source"] = "Keeneye Bowman",
["event"] = "SPELL_CAST_START",
["npcID"] = 166936,
},
[37372] = {
["encounterName"] = "Keli'dan the Breaker",
["source"] = "Keli'dan the Breaker",
["npcID"] = 17377,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1923,
},
[41467] = {
["encounterName"] = "The Illidari Council",
["source"] = "Gathios the Shatterer",
["npcID"] = 22949,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["encounterID"] = 2565,
["npcID"] = 190609,
},
[415492] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[436991] = {
["source"] = "Sureki Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 224066,
},
[440687] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Jelly Purveyor",
["npcID"] = 220141,
},
[463609] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nether Phantom",
["npcID"] = 218429,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2920,
},
[453740] = {
["source"] = "Conqueror Or'sosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 222723,
},
[449277] = {
["event"] = "SPELL_CAST_START",
["source"] = "General Emmerich",
["npcID"] = 215371,
},
[13901] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[456746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Earwax",
["npcID"] = 213195,
},
[384597] = {
["npcID"] = 193293,
},
[429110] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[445808] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heelripper",
["npcID"] = 216555,
},
[32863] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[436637] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["npcID"] = 214661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2930,
},
[68895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spiteful Apparition",
["npcID"] = 36551,
},
[41245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Suffering Soul Fragment",
["npcID"] = 23399,
},
[383298] = {
["source"] = "Enraged Magma Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 214924,
},
[390926] = {
["source"] = "Sparklit Bomber",
["event"] = "SPELL_CAST_START",
["npcID"] = 212540,
},
[436781] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Scarab Captain Vul'akan",
["npcID"] = 218306,
},
[6685] = {
["source"] = "Defias Taskmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 4417,
},
[443138] = {
["source"] = "Royal Scribe",
["event"] = "SPELL_CAST_START",
["npcID"] = 221035,
},
[448257] = {
["source"] = "Foreseer Xix'amon",
["event"] = "SPELL_CAST_START",
["npcID"] = 215435,
},
[453161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[15493] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Commander",
["npcID"] = 214363,
},
[16172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghoul Ravener",
["npcID"] = 10406,
},
[442995] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Honey Harvester",
["npcID"] = 220946,
},
[7154] = {
["source"] = "Sandfury Soul Eater",
["event"] = "SPELL_CAST_START",
["npcID"] = 7247,
},
[455281] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[444023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Experiment",
["npcID"] = 221537,
},
[374839] = {
["encounterName"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["npcID"] = 189478,
},
[318243] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Hateweaver",
["npcID"] = 170803,
},
[135029] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 208441,
},
[373526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jeweled Flutterwing",
["npcID"] = 227202,
},
[87527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dustbelcher Trainee",
["npcID"] = 46695,
},
[29120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Silvermoon Ranger",
["npcID"] = 18147,
},
[467464] = {
["encounterName"] = "General Angerforge",
["source"] = "Shadowforge Flame Keeper",
["npcID"] = 231554,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3045,
},
[324387] = {
["source"] = "Skeletal Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 165197,
},
[41374] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Archon",
["npcID"] = 23400,
},
[449285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shyalude",
["npcID"] = 223834,
},
[449385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wanderer Ida",
["npcID"] = 220953,
},
[276068] = {
["encounterName"] = "Hadal Darkfathom",
["source"] = "Hadal Darkfathom",
["encounterID"] = 2099,
["event"] = "SPELL_CAST_START",
["npcID"] = 128651,
},
[333602] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brittlebone Mage",
["npcID"] = 163126,
},
[445191] = {
["source"] = "Spitfire Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 213577,
},
[438025] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["npcID"] = 218002,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2931,
},
[391723] = {
["npcID"] = 197697,
},
[325413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spinemaw Acidgullet",
["npcID"] = 167113,
},
[441097] = {
["source"] = "Regurgitating Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 220138,
},
[33975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Instructor Galford",
["npcID"] = 10811,
},
[444377] = {
["source"] = "Highland Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 226179,
},
[31601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crypt Crawler",
["npcID"] = 10412,
},
[36705] = {
["encounterName"] = "Warp Splinter",
["source"] = "Warp Splinter",
["encounterID"] = 1929,
["event"] = "SPELL_CAST_START",
["npcID"] = 17977,
},
[446760] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infesting Latcher",
["npcID"] = 222572,
},
[463218] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hired Muscle",
["npcID"] = 210269,
},
[419351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Saboteur",
["npcID"] = 208438,
},
[40317] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Spearman",
["npcID"] = 17729,
},
[448485] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[435403] = {
["encounterName"] = "Sikran, Captain of the Sureki",
["source"] = "Sikran",
["encounterID"] = 2898,
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[378413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Tidecore",
["npcID"] = 213699,
},
[449290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Earthgorger",
["npcID"] = 218393,
},
[59362] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'ar Webspinner",
["npcID"] = 29335,
},
[446079] = {
["encounterName"] = "Leviathan Caller",
["source"] = "Leviathan Caller",
["encounterID"] = 3002,
["event"] = "SPELL_CAST_START",
["npcID"] = 220738,
},
[444172] = {
["isChanneled"] = true,
["source"] = "Xur'khun the Defiled",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221845,
},
[430097] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[431612] = {
["source"] = "Venombane Spitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 216192,
},
[324394] = {
["source"] = "Skeletal Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 165197,
},
[432135] = {
["source"] = "Flickerflame Kobold",
["event"] = "SPELL_CAST_START",
["npcID"] = 212536,
},
[438586] = {
["source"] = "Venommaster Nezarox",
["event"] = "SPELL_CAST_START",
["npcID"] = 219006,
},
[15618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stratholme Courier",
["npcID"] = 11082,
},
[33919] = {
["encounterName"] = "Tavarok",
["source"] = "Tavarok",
["npcID"] = 18343,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1901,
},
[448269] = {
["source"] = "Foreseer Xix'amon",
["event"] = "SPELL_CAST_START",
["npcID"] = 215435,
},
[460092] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spinemaw Staghorn",
["npcID"] = 167111,
},
[59182] = {
["source"] = "Unbound Firestorm",
["event"] = "SPELL_CAST_START",
["npcID"] = 28584,
},
[426771] = {
["source"] = "Void Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[279118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zanchuli Witch-Doctor",
["npcID"] = 122969,
},
[265019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[463890] = {
["encounterName"] = "Bael'Gar",
["source"] = "Bael'Gar",
["encounterID"] = 3044,
["event"] = "SPELL_CAST_START",
["npcID"] = 226303,
},
[76369] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Beguiler",
["npcID"] = 40167,
},
[456174] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[449295] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[464361] = {
["encounterName"] = "The Seven",
["source"] = "Gloom'rel",
["npcID"] = 226313,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[445936] = {
["encounterName"] = "The Bloodbound Horror",
["source"] = "The Bloodbound Horror",
["encounterID"] = 2917,
["event"] = "SPELL_CAST_START",
["npcID"] = 214502,
},
[465529] = {
["source"] = "Fetid Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 231083,
},
[384524] = {
["encounterName"] = "Watcher Irideus",
["encounterID"] = 2615,
["npcID"] = 189719,
},
[374563] = {
["npcID"] = 190362,
},
[40062] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Technician",
["npcID"] = 17414,
},
[390943] = {
["encounterName"] = "Cragpie",
["source"] = "Cragpie",
["encounterID"] = 3001,
["event"] = "SPELL_CAST_START",
["npcID"] = 220008,
},
[453392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Eradicator",
["npcID"] = 225408,
},
[451913] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ascended Webfriar",
["npcID"] = 219022,
},
[462686] = {
["source"] = "Reno Jackson",
["event"] = "SPELL_CAST_START",
["npcID"] = 228044,
},
[377204] = {
["encounterName"] = "Warlord Sargha",
["encounterID"] = 2611,
["npcID"] = 189901,
},
[449298] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[388897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Snapper",
["npcID"] = 214550,
},
[410837] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Pyromancer Loregrain",
["npcID"] = 232571,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[444180] = {
["isChanneled"] = true,
["source"] = "Xur'khun the Defiled",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221845,
},
[457881] = {
["source"] = "Zekvir",
["event"] = "SPELL_CAST_START",
["npcID"] = 227471,
},
[450400] = {
["source"] = "Supervisor Radlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 220897,
},
[44538] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Ethereum Smuggler",
["npcID"] = 24698,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[448276] = {
["source"] = "Fungarian Sporeflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 218667,
},
[445205] = {
["source"] = "Cinderbee Worker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215023,
},
[320464] = {
["source"] = "Zolramus Sorcerer",
["event"] = "SPELL_CAST_START",
["npcID"] = 163128,
},
[205231] = {
["source"] = "Darkglare",
["event"] = "SPELL_CAST_START",
["npcID"] = 103673,
},
[455443] = {
["source"] = "Waxx",
["event"] = "SPELL_CAST_START",
["npcID"] = 226267,
},
[446230] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["npcID"] = 214348,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2895,
},
[12675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[12739] = {
["source"] = "Lord Aurius Rivendare",
["event"] = "SPELL_CAST_START",
["npcID"] = 45412,
},
[456468] = {
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213566,
},
[445207] = {
["source"] = "Void Bound Howler",
["event"] = "SPELL_CAST_START",
["npcID"] = 221979,
},
[25602] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Mana Leech",
["npcID"] = 19306,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[272422] = {
["source"] = "Ashvane Spotter",
["event"] = "SPELL_CAST_START",
["npcID"] = 138255,
},
[41184] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtongue Stormcaller",
["npcID"] = 22846,
},
[451778] = {
["source"] = "Dogmatic Machine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212878,
},
[464363] = {
["encounterName"] = "The Seven",
["source"] = "Hate'rel",
["npcID"] = 226311,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[391118] = {
["npcID"] = 191739,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[437019] = {
["source"] = "Kaheti Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218316,
},
[398501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shalescale Striker",
["npcID"] = 222019,
},
[443162] = {
["source"] = "Devouring Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217870,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[445210] = {
["source"] = "Spitfire Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 213577,
},
[384366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Owl",
["npcID"] = 221946,
},
[443353] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infesting Cindermite",
["npcID"] = 222276,
},
[458216] = {
["isChanneled"] = true,
["source"] = "Armored Shellguard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 227575,
},
[441116] = {
["isChanneled"] = true,
["source"] = "Regurgitating Monstrosity",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220138,
},
[421665] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210149,
},
[422393] = {
["source"] = "Skittering Darkness",
["event"] = "SPELL_CAST_START",
["npcID"] = 208457,
},
[457497] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[424737] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2861,
},
[41471] = {
["encounterName"] = "The Illidari Council",
["source"] = "Lady Malande",
["npcID"] = 22951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[428019] = {
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 210812,
},
[280389] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["encounterID"] = 2109,
["event"] = "SPELL_CAST_START",
["npcID"] = 129208,
},
[455016] = {
["source"] = "Caustic Skyrazor",
["event"] = "SPELL_CAST_START",
["npcID"] = 225817,
},
[451261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Earthcaller",
["npcID"] = 224219,
},
[447261] = {
["encounterName"] = "General Umbriss",
["source"] = "General Umbriss",
["npcID"] = 39625,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1051,
},
[448347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diu'mik",
["npcID"] = 211564,
},
[441119] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[30853] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Summoner",
["npcID"] = 17395,
},
[426787] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[452651] = {
["source"] = "Oath-Eater",
["event"] = "SPELL_CAST_START",
["npcID"] = 206844,
},
[59259] = {
["encounterName"] = "General Bjarngrim",
["source"] = "Hardened Steel Berserker",
["encounterID"] = 1987,
["event"] = "SPELL_CAST_START",
["npcID"] = 28579,
},
[372529] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Hogger",
["npcID"] = 213570,
},
[41396] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ardent Host",
["npcID"] = 22959,
},
[434122] = {
["source"] = "Ascended Neophyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 216326,
},
[426145] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[450393] = {
["source"] = "Obstorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 217082,
},
[463644] = {
["encounterName"] = "Lord Incendius",
["source"] = "Lord Incendius",
["encounterID"] = 3043,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226304,
},
[4979] = {
["source"] = "Defias Evoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 1729,
},
[445217] = {
["source"] = "Cinderbee Worker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215023,
},
[388911] = {
["npcID"] = 196577,
},
[40064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Technician",
["npcID"] = 17414,
},
[333629] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Reanimated Crossbowman",
["encounterID"] = 2388,
["event"] = "SPELL_CAST_START",
["npcID"] = 168246,
},
[457503] = {
["source"] = "Cogchewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212617,
},
[448458] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Devoted Worshipper",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 223318,
},
[453577] = {
["source"] = "Wavecrasher Jurvak",
["event"] = "SPELL_CAST_START",
["npcID"] = 222728,
},
[22273] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ethereal Sorcerer",
["npcID"] = 18313,
},
[40832] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[450338] = {
["event"] = "SPELL_CAST_START",
["source"] = "Discordant Hulk",
["npcID"] = 223118,
},
[449368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wanderer Ida",
["npcID"] = 220953,
},
[58460] = {
["source"] = "Anvilrage Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 232893,
},
[375605] = {
["source"] = "Charged Spirecrystal",
["event"] = "SPELL_CAST_START",
["npcID"] = 217736,
},
[41472] = {
["encounterName"] = "The Illidari Council",
["source"] = "Lady Malande",
["npcID"] = 22951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[37668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Spellbinder",
["npcID"] = 18312,
},
[372226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonetender",
["npcID"] = 189265,
},
[322968] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drust Spiteclaw",
["npcID"] = 165111,
},
[425315] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["encounterID"] = 2831,
["event"] = "SPELL_CAST_START",
["npcID"] = 207481,
},
[451364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Brute",
["npcID"] = 224152,
},
[467919] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prototype Fire Golem",
["npcID"] = 232551,
},
[440506] = {
["source"] = "Stream Skipper",
["event"] = "SPELL_CAST_START",
["npcID"] = 213700,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[369465] = {
["npcID"] = 186420,
},
[400756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Lazy Peon",
["npcID"] = 221895,
},
[449318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[447271] = {
["source"] = "Hulking Warshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 221103,
},
[373561] = {
["source"] = "Mana Leech",
["event"] = "SPELL_CAST_START",
["npcID"] = 19306,
},
[338636] = {
["source"] = "Separation Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 167731,
},
[454438] = {
["source"] = "Ashvane Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 128969,
},
[372538] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Flare",
["npcID"] = 189470,
},
[15043] = {
["source"] = "Risen Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 10419,
},
[374586] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2612,
},
[424750] = {
["source"] = "Fungal Rotcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 207459,
},
[451412] = {
["source"] = "Ulgrax the Devourer",
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[458087] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tala",
["npcID"] = 227513,
},
[440107] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216649,
},
[449321] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[454440] = {
["source"] = "Bilge Rat Pillager",
["event"] = "SPELL_CAST_START",
["npcID"] = 135241,
},
[443179] = {
["source"] = "Corrupted Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214616,
},
[377512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tamed Lava Snail",
["npcID"] = 219790,
},
[40946] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Illidari Fearbringer",
["npcID"] = 22954,
},
[462264] = {
["isChanneled"] = true,
["source"] = "Blood Drainer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229399,
},
[443840] = {
["encounterName"] = "Speaker Halven",
["source"] = "Speaker Halven",
["encounterID"] = 3007,
["event"] = "SPELL_CAST_START",
["npcID"] = 217570,
},
[458720] = {
["source"] = "Awakened Volcanic Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 225896,
},
[436180] = {
["source"] = "Rampant Air Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 215048,
},
[447950] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Ascended Voidspeaker",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 223150,
},
[11428] = {
["source"] = "Warpwood Treant",
["event"] = "SPELL_CAST_START",
["npcID"] = 11462,
},
[412129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lerai, Timesworn Maiden",
["npcID"] = 205152,
},
[420659] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[444363] = {
["encounterName"] = "The Bloodbound Horror",
["source"] = "The Bloodbound Horror",
["encounterID"] = 2917,
["event"] = "SPELL_CAST_START",
["npcID"] = 214502,
},
[125160] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alliance Mage",
["npcID"] = 214167,
},
[335853] = {
["event"] = "SPELL_CAST_START",
["source"] = "Val'kyr Hunter",
["npcID"] = 227967,
},
[161222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Nightsaber",
["npcID"] = 221947,
},
[431549] = {
["source"] = "Venombane Spitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 216192,
},
[470973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phalanx",
["npcID"] = 232593,
},
[460587] = {
["source"] = "Vindictive Technician",
["event"] = "SPELL_CAST_START",
["npcID"] = 220472,
},
[458767] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ravageant",
["npcID"] = 207826,
},
[446255] = {
["source"] = "Congealing Mass",
["event"] = "SPELL_CAST_START",
["npcID"] = 222459,
},
[459355] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Onyxia",
["npcID"] = 221585,
},
[453551] = {
["source"] = "Wavecrasher Jurvak",
["event"] = "SPELL_CAST_START",
["npcID"] = 222728,
},
[340289] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Nightblossom",
["npcID"] = 173714,
},
[428563] = {
["source"] = "Kobold Flametender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213913,
},
[378850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Babbling Book",
["npcID"] = 223852,
},
[421817] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[470164] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewalker",
["npcID"] = 233203,
},
[452539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[40066] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Wrangler",
["npcID"] = 22877,
},
[456101] = {
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219245,
},
[454813] = {
["source"] = "Caustic Skyrazor",
["event"] = "SPELL_CAST_START",
["npcID"] = 225817,
},
[15665] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamekin Torcher",
["npcID"] = 9778,
},
[162248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Nightsaber",
["npcID"] = 221947,
},
[429487] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[438973] = {
["source"] = "Pit Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228574,
},
[431552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Direweb Lasher",
["npcID"] = 221303,
},
[434998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chef Chewie",
["npcID"] = 214697,
},
[118297] = {
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 61029,
},
[445236] = {
["source"] = "Colossal Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 224621,
},
[11642] = {
["source"] = "Murta Grimgut",
["event"] = "SPELL_CAST_START",
["npcID"] = 7608,
},
[451379] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Overseer",
["npcID"] = 224221,
},
[200291] = {
["source"] = "Risen Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 98691,
},
[41229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonechewer Blood Prophet",
["npcID"] = 23237,
},
[446261] = {
["source"] = "Emboldened Fog Wither",
["event"] = "SPELL_CAST_START",
["npcID"] = 219909,
},
[381765] = {
["source"] = "Scourge Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 227180,
},
[327127] = {
["source"] = "Flesh Crafter",
["event"] = "SPELL_CAST_START",
["npcID"] = 165872,
},
[374719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Riplisk",
["npcID"] = 217524,
},
[44137] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["encounterID"] = 1895,
["event"] = "SPELL_CAST_START",
["npcID"] = 24556,
},
[447143] = {
["encounterName"] = "Researcher Ven'kex",
["source"] = "Researcher Ven'kex",
["npcID"] = 219856,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2991,
},
[460595] = {
["source"] = "Irritated Salvager",
["event"] = "SPELL_CAST_START",
["npcID"] = 220471,
},
[257459] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Chopper Redhook",
["event"] = "SPELL_CAST_START",
["npcID"] = 128650,
},
[417598] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Emissary",
["npcID"] = 232440,
},
[448910] = {
["source"] = "Darklost Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 216260,
},
[22887] = {
["source"] = "Murkblood Spearman",
["event"] = "SPELL_CAST_START",
["npcID"] = 17729,
},
[387910] = {
["npcID"] = 196200,
},
[169929] = {
["encounterName"] = "Yalnu",
["source"] = "Gnarled Ancient",
["npcID"] = 84400,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[226296] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[446325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Island Proudfeather",
["npcID"] = 227198,
},
[463217] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Guardian",
["npcID"] = 166276,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["encounterID"] = 1041,
["event"] = "SPELL_CAST_START",
["npcID"] = 43873,
},
[435004] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Chef Chewie",
["npcID"] = 214697,
},
[41382] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Illidari Battle-mage",
["npcID"] = 23402,
},
[396742] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qiraji Gladiator",
["npcID"] = 226503,
},
[41069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Deathshaper",
["npcID"] = 22882,
},
[455480] = {
["source"] = "Take",
["event"] = "SPELL_CAST_START",
["npcID"] = 226272,
},
[377270] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pearlfin Waterweaver",
["npcID"] = 214434,
},
[243712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Kazzak",
["npcID"] = 121818,
},
[449937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cyclonecrier Alpha",
["npcID"] = 222959,
},
[41091] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowmoon Houndmaster",
["npcID"] = 23018,
},
[431935] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burkhalt",
["npcID"] = 228671,
},
[449339] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[446268] = {
["isChanneled"] = true,
["source"] = "Congealed Mass",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222461,
},
[451387] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Lavabender",
["npcID"] = 224249,
},
[11985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lava Spider",
["npcID"] = 5858,
},
[318312] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Hateweaver",
["npcID"] = 170803,
},
[450364] = {
["source"] = "Royal Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 222881,
},
[69562] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulguard Bonecaster",
["npcID"] = 36564,
},
[445819] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[328146] = {
["encounterName"] = "Blightbone",
["source"] = "Carrion Worm",
["encounterID"] = 2387,
["event"] = "SPELL_CAST_START",
["npcID"] = 164702,
},
[463674] = {
["encounterName"] = "Lord Roccor",
["source"] = "Lord Roccor",
["encounterID"] = 3042,
["event"] = "SPELL_CAST_START",
["npcID"] = 226315,
},
[427852] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["event"] = "SPELL_CAST_START",
["npcID"] = 213119,
},
[396107] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pyromancer Loregrain",
["npcID"] = 232571,
},
[446271] = {
["isChanneled"] = true,
["source"] = "Congealed Mass",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222461,
},
[372561] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Hunter",
["npcID"] = 189227,
},
[325469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decrepit Bilespawn",
["npcID"] = 166928,
},
[424773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarled Reviver",
["npcID"] = 207468,
},
[34821] = {
["encounterName"] = "Commander Sarannis",
["source"] = "Bloodwarder Steward",
["encounterID"] = 1925,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 18404,
},
[451391] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 39392,
},
[468795] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomforge Mechanic",
["npcID"] = 232266,
},
[57056] = {
["isChanneled"] = true,
["source"] = "Crystalline Frayer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 26793,
},
[454463] = {
["source"] = "The One Left",
["event"] = "SPELL_CAST_START",
["npcID"] = 216047,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[446862] = {
["source"] = "Parasitic Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 222786,
},
[432965] = {
["encounterName"] = "Sikran, Captain of the Sureki",
["source"] = "Sikran",
["encounterID"] = 2898,
["event"] = "SPELL_CAST_START",
["npcID"] = 214503,
},
[44547] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sister of Torment",
["npcID"] = 24697,
},
[40873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonmaw Sky Stalker",
["npcID"] = 23030,
},
[456861] = {
["source"] = "Spore-Infused Shalewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 221217,
},
[445251] = {
["source"] = "Scavenging Stormfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 218401,
},
[451241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[444324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[468886] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phalanx",
["npcID"] = 232593,
},
[445252] = {
["isChanneled"] = true,
["source"] = "Lighteater",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216036,
},
[39849] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[57984] = {
["source"] = "Greater Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 95061,
},
[440134] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["npcID"] = 218002,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2931,
},
[22907] = {
["encounterName"] = "Swamplord Musel'ek",
["source"] = "Swamplord Musel'ek",
["npcID"] = 17826,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1947,
},
[451395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 39392,
},
[432967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sentry Stagshell",
["npcID"] = 216340,
},
[39593] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Searing Totem",
["npcID"] = 22896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[156718] = {
["source"] = "Monstrous Corpse Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 76104,
},
[40875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonmaw Wind Reaver",
["npcID"] = 23330,
},
[383823] = {
["npcID"] = 192796,
},
[386991] = {
["source"] = "Primal Proto-Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 193806,
},
[324447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Spearfisher",
["npcID"] = 214338,
},
[51202] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastes Taskmaster",
["npcID"] = 26493,
},
[320358] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 162689,
},
[440137] = {
["source"] = "Lost Lynx",
["event"] = "SPELL_CAST_START",
["npcID"] = 225022,
},
[369573] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184581,
},
[338357] = {
["source"] = "Kyrian Stitchwerk",
["event"] = "SPELL_CAST_START",
["npcID"] = 172981,
},
[47747] = {
["encounterName"] = "Anomalus",
["source"] = "Anomalus",
["encounterID"] = 2009,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 26763,
},
[415568] = {
["isChanneled"] = true,
["source"] = "Gnarled Lasher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207740,
},
[212423] = {
["source"] = "Risen Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 99541,
},
[59169] = {
["source"] = "Storming Vortex",
["event"] = "SPELL_CAST_START",
["npcID"] = 28547,
},
[432959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[22661] = {
["source"] = "Alzzin the Wildshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 11492,
},
[30851] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Summoner",
["npcID"] = 17395,
},
[459155] = {
["source"] = "Remembered Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 224157,
},
[423324] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[256957] = {
["source"] = "Irontide Waveshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 129370,
},
[428879] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[431714] = {
["source"] = "Dreadstrike Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 213189,
},
[41093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Houndmaster",
["npcID"] = 23018,
},
[22662] = {
["source"] = "Alzzin the Wildshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 11492,
},
[445830] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["encounterID"] = 2584,
["npcID"] = 186738,
},
[42027] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Spiritbinder",
["npcID"] = 23524,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[268230] = {
["source"] = "Ashvane Deckhand",
["event"] = "SPELL_CAST_START",
["npcID"] = 138464,
},
[463206] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chef Chewie",
["npcID"] = 214697,
},
[457880] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Threadmancer",
["npcID"] = 208244,
},
[41986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Angered Soul Fragment",
["npcID"] = 23398,
},
[460618] = {
["source"] = "Overworked Cook",
["event"] = "SPELL_CAST_START",
["npcID"] = 220744,
},
[31717] = {
["encounterName"] = "The Black Stalker",
["source"] = "The Black Stalker",
["npcID"] = 17882,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1948,
},
[431493] = {
["source"] = "Nightfall Curseblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 213894,
},
[451378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Overseer",
["npcID"] = 224221,
},
[395653] = {
["source"] = "Colossal Salamanther",
["event"] = "SPELL_CAST_START",
["npcID"] = 224622,
},
[429427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[275564] = {
["source"] = "Shadowstarved Bullfrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 214406,
},
[469030] = {
["source"] = "High Interrogator Gerstahn",
["event"] = "SPELL_CAST_START",
["npcID"] = 232243,
},
[456109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha of Anger",
["npcID"] = 226646,
},
[320336] = {
["source"] = "Brittlebone Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 163126,
},
[345495] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frothing Pustule",
["npcID"] = 175519,
},
[15503] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Kagani Nightstrike",
["npcID"] = 24557,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[394622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Oak",
["npcID"] = 231083,
},
[412505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyr's Vanguard",
["npcID"] = 205151,
},
[413529] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[448877] = {
["encounterName"] = "General Umbriss",
["source"] = "General Umbriss",
["npcID"] = 39625,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1051,
},
[439789] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[35511] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Sharpshooter",
["npcID"] = 16704,
},
[320637] = {
["encounterName"] = "Blightbone",
["source"] = "Blightbone",
["encounterID"] = 2387,
["event"] = "SPELL_CAST_START",
["npcID"] = 162691,
},
[461914] = {
["source"] = "Warden of Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 162822,
},
[379406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavabearer",
["npcID"] = 189472,
},
[34361] = {
["source"] = "Sunseeker Botanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 18422,
},
[15587] = {
["source"] = "Amani Shadowspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215676,
},
[439341] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[322557] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drust Soulcleaver",
["npcID"] = 164920,
},
[457085] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[458090] = {
["event"] = "SPELL_CAST_START",
["source"] = "Velo",
["npcID"] = 227514,
},
[443842] = {
["encounterName"] = "Ulgrax the Devourer",
["source"] = "Ulgrax the Devourer",
["encounterID"] = 2902,
["event"] = "SPELL_CAST_START",
["npcID"] = 215657,
},
[397108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seaborne Colossus",
["npcID"] = 214437,
},
[372201] = {
["npcID"] = 189464,
},
[384868] = {
["npcID"] = 192789,
},
[443222] = {
["source"] = "Corrupted Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214616,
},
[448341] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[41072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Blood Mage",
["npcID"] = 22945,
},
[200261] = {
["source"] = "Soul-Torn Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98243,
},
[464378] = {
["encounterName"] = "Ambassador Flamelash",
["source"] = "Ambassador Flamelash",
["npcID"] = 226302,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3047,
},
[405870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomforge Arcanasmith",
["npcID"] = 232458,
},
[167385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalmaw",
["npcID"] = 225978,
},
[439646] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["npcID"] = 216658,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2909,
},
[29765] = {
["source"] = "Bloodwarder Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 17993,
},
[443003] = {
["encounterName"] = "Broodtwister Ovi'nax",
["source"] = "Broodtwister Ovi'nax",
["npcID"] = 214506,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2919,
},
[426964] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[338456] = {
["source"] = "Kyrian Stitchwerk",
["event"] = "SPELL_CAST_START",
["npcID"] = 172981,
},
[448013] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Drahga Shadowburner",
["npcID"] = 40319,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1048,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["event"] = "SPELL_CAST_START",
["npcID"] = 213119,
},
[424798] = {
["source"] = "Infected Beast",
["event"] = "SPELL_CAST_START",
["npcID"] = 210478,
},
[458582] = {
["source"] = "Sureki Darkblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 222274,
},
[320376] = {
["encounterName"] = "Surgeon Stitchflesh",
["source"] = "Stitchflesh's Creation",
["encounterID"] = 2389,
["event"] = "SPELL_CAST_START",
["npcID"] = 164578,
},
[385578] = {
["encounterName"] = "Azureblade",
["encounterID"] = 2585,
["npcID"] = 186739,
},
[428894] = {
["source"] = "Cursedforge Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 214264,
},
[376683] = {
["encounterName"] = "Balakar Khan",
["encounterID"] = 2580,
["npcID"] = 186151,
},
[434137] = {
["source"] = "Royal Venomshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 220730,
},
[418292] = {
["source"] = "Treasure Wraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 208728,
},
[469636] = {
["encounterName"] = "The Seven",
["source"] = "Hate'rel",
["npcID"] = 226311,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[69633] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Warden",
["npcID"] = 36666,
},
[419211] = {
["source"] = "Scourge Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 227177,
},
[452442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[408927] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Pyromancer Loregrain",
["npcID"] = 232571,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3049,
},
[446300] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["npcID"] = 214348,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2895,
},
[468575] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fineous Darkvire",
["npcID"] = 232269,
},
[32330] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lykul Wasp",
["npcID"] = 17732,
},
[56934] = {
["encounterName"] = "Grand Magus Telestra",
["source"] = "Grand Magus Telestra",
["encounterID"] = 2010,
["event"] = "SPELL_CAST_START",
["npcID"] = 26731,
},
[450330] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["encounterID"] = 2894,
["event"] = "SPELL_CAST_START",
["npcID"] = 214263,
},
[456149] = {
["source"] = "The Perchfather",
["event"] = "SPELL_CAST_START",
["npcID"] = 221648,
},
[325163] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Defender",
["npcID"] = 171772,
},
[61353] = {
["source"] = "Dagna Flintlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 96779,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[385024] = {
["source"] = "Stillpond Tidewader",
["event"] = "SPELL_CAST_START",
["npcID"] = 214835,
},
[385536] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primalist Flamedancer",
["npcID"] = 190206,
},
[34697] = {
["encounterName"] = "Laj",
["source"] = "Laj",
["encounterID"] = 1927,
["event"] = "SPELL_CAST_START",
["npcID"] = 17980,
},
[9734] = {
["source"] = "Murta Grimgut",
["event"] = "SPELL_CAST_START",
["npcID"] = 7608,
},
[443232] = {
["source"] = "Nightfall Lookout",
["event"] = "SPELL_CAST_START",
["npcID"] = 217485,
},
[448351] = {
["source"] = "Kobold Snuffercrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 218662,
},
[387950] = {
["npcID"] = 187919,
},
[450399] = {
["source"] = "Livid Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 227354,
},
[451423] = {
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_START",
["npcID"] = 219984,
},
[440162] = {
["source"] = "Fungarian Creepcap",
["event"] = "SPELL_CAST_START",
["npcID"] = 218665,
},
[431896] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Thirsty Patron",
["npcID"] = 215819,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2900,
},
[442210] = {
["encounterName"] = "Anub'zekt",
["source"] = "Bloodstained Webmage",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 220599,
},
[32370] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Ethereal Apprentice",
["npcID"] = 18430,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[452927] = {
["source"] = "Balnazzar",
["event"] = "SPELL_CAST_START",
["npcID"] = 10813,
},
[389518] = {
["source"] = "Sparklit Buttonmasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212596,
},
[388976] = {
["npcID"] = 196671,
},
[434706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tasting Room Attendant",
["npcID"] = 214920,
},
[256969] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Snarling Dockhound",
["encounterID"] = 2098,
["event"] = "SPELL_CAST_START",
["npcID"] = 129640,
},
[437093] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["encounterID"] = 2922,
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[373733] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[44189] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Kael'thas Sunstrider",
["encounterID"] = 1894,
["event"] = "SPELL_CAST_START",
["npcID"] = 24664,
},
[34659] = {
["encounterName"] = "Thorngrin the Tender",
["source"] = "Thorngrin the Tender",
["encounterID"] = 1928,
["event"] = "SPELL_CAST_START",
["npcID"] = 17978,
},
[458092] = {
["source"] = "Strength of Beledar",
["event"] = "SPELL_CAST_START",
["npcID"] = 221690,
},
[243661] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taerar",
["npcID"] = 121911,
},
[410843] = {
["encounterName"] = "Emperor Dagran Thaurissan",
["source"] = "Spitfire Totem",
["npcID"] = 205218,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3049,
},
[457484] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Elf Riftwalker",
["npcID"] = 224798,
},
[243401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ysondre",
["npcID"] = 121912,
},
[372262] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonesplitter",
["npcID"] = 189467,
},
[451428] = {
["isChanneled"] = true,
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219984,
},
[434722] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[323149] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Ingra Maloch",
["encounterID"] = 2397,
["event"] = "SPELL_CAST_START",
["npcID"] = 164567,
},
[462690] = {
["source"] = "Darkened Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 220164,
},
[452099] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Animated Shadow",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 224616,
},
[19645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wailing Banshee",
["npcID"] = 10464,
},
[433002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodstained Assistant",
["npcID"] = 216333,
},
[442536] = {
["source"] = "Covert Webmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223844,
},
[426860] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[471573] = {
["source"] = "Houndmaster Grebmar",
["event"] = "SPELL_CAST_START",
["npcID"] = 232258,
},
[325223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Stinger",
["npcID"] = 166304,
},
[450407] = {
["source"] = "Orta",
["event"] = "SPELL_CAST_START",
["npcID"] = 221067,
},
[257732] = {
["source"] = "Scrimshaw Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129374,
},
[456453] = {
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213566,
},
[367484] = {
["npcID"] = 185508,
},
[41169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Heartseeker",
["npcID"] = 23339,
},
[46155] = {
["encounterName"] = "Selin Fireheart",
["source"] = "Selin Fireheart",
["encounterID"] = 1897,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 24723,
},
[41378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of Delight",
["npcID"] = 22964,
},
[387960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waximus",
["npcID"] = 215177,
},
[22651] = {
["source"] = "Zevrim Thornhoof",
["event"] = "SPELL_CAST_START",
["npcID"] = 11490,
},
[326319] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drust Harvester",
["npcID"] = 164921,
},
[464333] = {
["encounterName"] = "The Seven",
["source"] = "Doom'rel",
["npcID"] = 226310,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3048,
},
[455975] = {
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219245,
},
[448047] = {
["isChanneled"] = true,
["source"] = "Pale Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223646,
},
[433448] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Webspinner",
["npcID"] = 216621,
},
[46042] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Warlock",
["npcID"] = 24686,
},
[256709] = {
["source"] = "Riptide Shredder",
["event"] = "SPELL_CAST_START",
["npcID"] = 129371,
},
[41481] = {
["encounterName"] = "The Illidari Council",
["source"] = "High Nethermancer Zerevor",
["npcID"] = 22950,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[451435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidwraith",
["npcID"] = 224466,
},
[429109] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[428086] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[270481] = {
["source"] = "Demonic Tyrant",
["event"] = "SPELL_CAST_START",
["npcID"] = 135002,
},
[27634] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Garaxxas",
["npcID"] = 24555,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184581,
},
[371584] = {
["source"] = "Escaped Steam",
["event"] = "SPELL_CAST_START",
["npcID"] = 227383,
},
[446000] = {
["source"] = "Deeps Larva",
["event"] = "SPELL_CAST_START",
["npcID"] = 215733,
},
[443247] = {
["source"] = "Corrupted Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214616,
},
[441395] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["npcID"] = 216320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2905,
},
[385383] = {
["source"] = "Anvilrage Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 232893,
},
[388688] = {
["event"] = "SPELL_CAST_START",
["source"] = "Garlic-Breathed Hydra",
["npcID"] = 224751,
},
[338653] = {
["source"] = "Stitching Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 173044,
},
[65038] = {
["source"] = "Vanquished Crusher Tentacle",
["event"] = "SPELL_CAST_START",
["npcID"] = 34264,
},
[428916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[453129] = {
["source"] = "Caustic Bomber",
["event"] = "SPELL_CAST_START",
["npcID"] = 224970,
},
[426869] = {
["source"] = "Flickerflame Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212548,
},
[444985] = {
["source"] = "Pupating Stinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 216288,
},
[320631] = {
["encounterName"] = "Blightbone",
["source"] = "Carrion Worm",
["npcID"] = 164702,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2387,
},
[317791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magus of the Dead",
["npcID"] = 163366,
},
[209628] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 104218,
},
[427894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[80780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrieking Banshee",
["npcID"] = 10463,
},
[317792] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magus of the Dead",
["npcID"] = 163366,
},
[373636] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Creeper",
["npcID"] = 221664,
},
[12039] = {
["source"] = "Shadowpriest Sezz'ziz",
["event"] = "SPELL_CAST_START",
["npcID"] = 7275,
},
[324372] = {
["isChanneled"] = true,
["source"] = "Skeletal Monstrosity",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165197,
},
[343470] = {
["source"] = "Skeletal Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 165919,
},
[377732] = {
["npcID"] = 184319,
},
[193505] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[322450] = {
["encounterName"] = "Tred'ova",
["source"] = "Tred'ova",
["npcID"] = 164517,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2393,
},
[265568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[427601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[452164] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swarm-Maven Donmiss",
["npcID"] = 216578,
},
[470591] = {
["source"] = "Nightfall Hopestealer",
["event"] = "SPELL_CAST_START",
["npcID"] = 217517,
},
[372615] = {
["npcID"] = 189247,
},
[69128] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Soulguard Animator",
["npcID"] = 36516,
},
[446682] = {
["source"] = "The Oozekhan",
["event"] = "SPELL_CAST_START",
["npcID"] = 216049,
},
[449817] = {
["isChanneled"] = true,
["source"] = "Vilewing",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216037,
},
[17162] = {
["source"] = "Risen Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 10419,
},
[68872] = {
["encounterName"] = "Bronjahm",
["source"] = "Bronjahm",
["npcID"] = 36497,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2006,
},
[440184] = {
["source"] = "Chitin Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 219725,
},
[40088] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Sea-Caller",
["npcID"] = 22875,
},
[448105] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["encounterID"] = 1048,
["event"] = "SPELL_CAST_START",
["npcID"] = 40320,
},
[450180] = {
["source"] = "Coal Rager",
["event"] = "SPELL_CAST_START",
["npcID"] = 219726,
},
[440185] = {
["source"] = "Hollow Sporesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 224744,
},
[388392] = {
["npcID"] = 196044,
},
[446328] = {
["source"] = "Shadowed Gloomrender",
["event"] = "SPELL_CAST_START",
["npcID"] = 217063,
},
[391385] = {
["source"] = "Enraged Magma Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 214924,
},
[3589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrieking Banshee",
["npcID"] = 10463,
},
[442997] = {
["source"] = "Void Elf Riftwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215597,
},
[450424] = {
["event"] = "SPELL_CAST_START",
["source"] = "Congealed Wax-hulk",
["npcID"] = 223206,
},
[31516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alliance Priest",
["npcID"] = 214152,
},
[428293] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40633,
},
[468691] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomforge Mechanic",
["npcID"] = 232266,
},
[340300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Gorgegullet",
["npcID"] = 173720,
},
[324293] = {
["source"] = "Skeletal Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 165919,
},
[440188] = {
["source"] = "Chitin Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 219725,
},
[453875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[80781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rockwing Screecher",
["npcID"] = 10409,
},
[431364] = {
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214761,
},
[424212] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[425264] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[41483] = {
["encounterName"] = "The Illidari Council",
["source"] = "High Nethermancer Zerevor",
["npcID"] = 22950,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[40598] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[322274] = {
["encounterName"] = "Nalthor the Rimebinder",
["source"] = "Zolramus Siphoner",
["encounterID"] = 2390,
["event"] = "SPELL_CAST_START",
["npcID"] = 164815,
},
[441214] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taste Tester",
["npcID"] = 220060,
},
[169179] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["npcID"] = 83846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[427260] = {
["source"] = "Cursed Rooktender",
["event"] = "SPELL_CAST_START",
["npcID"] = 207199,
},
[457959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Geothermus",
["npcID"] = 217416,
},
[37965] = {
["source"] = "Underbog Shambler",
["event"] = "SPELL_CAST_START",
["npcID"] = 17871,
},
[454524] = {
["source"] = "Tortollan Visitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 223857,
},
[426883] = {
["source"] = "Kobold Taskworker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212383,
},
[268202] = {
["encounterName"] = "Gorak Tul",
["source"] = "Deathtouched Slaver",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 135552,
},
[445311] = {
["source"] = "Strange Shore Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 219365,
},
[40086] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragon Turtle",
["npcID"] = 22885,
},
[15664] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamekin Spitter",
["npcID"] = 9776,
},
[444288] = {
["source"] = "Web Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 218320,
},
[334747] = {
["source"] = "Corpse Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 166302,
},
[454526] = {
["source"] = "Shellbinder Kiku",
["event"] = "SPELL_CAST_START",
["npcID"] = 223857,
},
[453149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Web Marauder",
["npcID"] = 219034,
},
[452806] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2918,
["event"] = "SPELL_CAST_START",
["npcID"] = 214504,
},
[334748] = {
["source"] = "Corpse Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 166302,
},
[15655] = {
["event"] = "SPELL_CAST_START",
["source"] = "Laughing Skull Enforcer",
["npcID"] = 17370,
},
[40076] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Wrangler",
["npcID"] = 22877,
},
[440195] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glooming Skulk",
["npcID"] = 216869,
},
[33775] = {
["encounterName"] = "Keli'dan the Breaker",
["source"] = "Keli'dan the Breaker",
["npcID"] = 17377,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1923,
},
[20299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Witch",
["npcID"] = 24696,
},
[82797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blisterpaw Hyena",
["npcID"] = 5426,
},
[69131] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulguard Animator",
["npcID"] = 36516,
},
[39647] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Nightlord",
["npcID"] = 22855,
},
},
["performance_units"] = {
[211306] = 0,
[214441] = true,
[219746] = 0,
[220626] = true,
[176920] = 0,
[96247] = 0,
[189363] = 0,
[100529] = 0,
[208994] = 0,
[210231] = 0,
[216205] = true,
[167999] = true,
[196679] = 0,
[194999] = 0,
[196642] = 0,
[189707] = 0,
[189706] = 0,
[197398] = 0,
[191714] = 0,
[84401] = 0,
},
["InterruptableSpells"] = {
[272571] = true,
[188443] = true,
[30849] = true,
[451261] = true,
[446086] = true,
[220543] = true,
[429545] = true,
[116705] = true,
[1064] = true,
[427609] = true,
[323057] = true,
[450756] = true,
[47528] = true,
[449455] = true,
[454440] = true,
[429422] = true,
[46036] = true,
[320171] = true,
[434122] = true,
[147362] = true,
[57994] = true,
[461904] = true,
[324776] = true,
[420090] = true,
[443427] = true,
[31935] = true,
[132409] = true,
[272581] = true,
[426283] = true,
[334748] = true,
[8004] = true,
[445207] = true,
[429110] = true,
[76369] = true,
[320462] = true,
[443430] = true,
[327130] = true,
[321828] = true,
[452162] = true,
[395160] = true,
[452099] = true,
[431303] = true,
[30451] = true,
[322274] = true,
[76711] = true,
[97547] = true,
[347008] = true,
[443433] = true,
[6552] = true,
[32747] = true,
[275826] = true,
[183752] = true,
[15615] = true,
[257063] = true,
[434786] = true,
[436322] = true,
[361469] = true,
[433841] = true,
[420320] = true,
[1766] = true,
[328406] = true,
[434793] = true,
[324914] = true,
[432031] = true,
[430097] = true,
[431309] = true,
[15122] = true,
[434802] = true,
[187707] = true,
[442536] = true,
[429109] = true,
[257732] = true,
[322938] = true,
[40823] = true,
[256957] = true,
[333602] = true,
[93985] = true,
[37470] = true,
[357208] = true,
[433662] = true,
[391403] = true,
[429812] = true,
[436679] = true,
[432520] = true,
[335143] = true,
[351338] = true,
[451871] = true,
[96231] = true,
[328667] = true,
[447966] = true,
[326319] = true,
[420330] = true,
[11972] = true,
[326046] = true,
[468940] = true,
[324293] = true,
[451097] = true,
[338353] = true,
[340544] = true,
[431333] = true,
[448248] = true,
[451113] = true,
[428086] = true,
[19647] = true,
[2139] = true,
[449734] = true,
[320336] = true,
[451114] = true,
[442210] = true,
[426240] = true,
[322767] = true,
[10887] = true,
[34797] = true,
},
["profiles"] = {
["RedtuzkUI"] = {
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Buff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
["castBarColor"] = {
0.4117647058823529,
1,
0,
1,
},
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Debuff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = false,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["version"] = -1,
["Name"] = "Cast - Small Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1607270486,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 111,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
["PlaterCore"] = 1,
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["SpellIds"] = {
261265,
261266,
271590,
},
["Prio"] = 99,
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Time"] = 1582894338,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["Icon"] = 135024,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["Revision"] = 68,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"141851",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Name"] = "Color Change [Plater]",
["PlaterCore"] = 1,
["Desc"] = "Add a unitID or unit name in 'Add Trigger' entry. See the constructor script for options.",
["SpellIds"] = {
},
["Prio"] = 99,
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeleftToBlink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkSpeed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkMaxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftWarning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftCritical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["version"] = -1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Time"] = 1582894405,
["Temp_ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["Icon"] = 133006,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["Revision"] = 48,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Name"] = "Aura - Border Color [Plater]",
["PlaterCore"] = 1,
["Desc"] = "Add a border to an aura icon. Add the aura into the Add Trigger entry. You can customize the icon color at the constructor script.",
["SpellIds"] = {
},
["Prio"] = 99,
["Enabled"] = false,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1582894414,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["Icon"] = 136048,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 133,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Name"] = "UnitPower [Plater]",
["PlaterCore"] = 1,
["Desc"] = "Show the energy amount above the nameplate",
["SpellIds"] = {
},
["Prio"] = 99,
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1609254913,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["Icon"] = 1029718,
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 274,
["semver"] = "",
["url"] = "",
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Name"] = "Fixate [Plater]",
["Desc"] = "Show above the nameplate who is the player fixated",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604087921,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 266,
["Options"] = {
},
["Author"] = "Tecno-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.SetNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.SetNameplateColor (unitFrame, \"#0085ff\")\nend\n\n\n",
["Time"] = 1606591382,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Icon"] = 134441,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.SetNameplateColor (unitFrame)\nend\n\n\n",
["Revision"] = 24,
["Options"] = {
},
["Author"] = "Aldarana-Kazzak",
["OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.SetNameplateColor (unitFrame, \"#0085ff\")\nend\n\n\n",
["Name"] = "Deadeye Spyglass",
["PlaterCore"] = 1,
["Desc"] = "",
["SpellIds"] = {
268756,
},
["Prio"] = 99,
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1607270486,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Revision"] = 73,
["semver"] = "",
["url"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = true,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Name"] = "Auto Set Skull",
["Desc"] = "Auto set skull marker",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Countdown",
["SpellIds"] = {
},
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Unit - Show Energy [Plater]",
["SpellIds"] = {
},
["Desc"] = "Show the energy amount above the nameplate.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
["textColor"] = {
1,
1,
1,
1,
},
["bgWidth"] = 30,
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "M+ Spiteful",
["NpcNames"] = {
"174773",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
273577,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = false,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Effect After Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["Name"] = "Add - Important [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Add - Tag Number [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = false,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["version"] = -1,
["Name"] = "Cast - Important Target [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura While Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = false,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Quick Flash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["version"] = -1,
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Shield Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - On Going Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["version"] = -1,
["Name"] = "Fixate by Unit Buff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["version"] = -1,
["Name"] = "Add - Explode on Die [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = true,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Important by Color [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 6,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = true,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Shining Green [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
"214840",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = true,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["NpcNames"] = {
},
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Special Ability [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["NpcNames"] = {
},
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heroic Leap [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = true,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["NpcNames"] = {
},
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Spark Color [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "sparkWithScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Width Scale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkHeightScale",
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["NpcNames"] = {
},
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Stun [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = true,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["NpcNames"] = {
},
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Name"] = "Cast - AoE Hit All [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.05,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.9,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["NpcNames"] = {
},
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = true,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["NpcNames"] = {
},
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Debuff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start.",
["NpcNames"] = {
},
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Simple Interrupt [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ongoing Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Min Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "maxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Cut [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = true,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["NpcNames"] = {
},
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Voidzone [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["NpcNames"] = {
},
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Name"] = "Cast - AoE With Range [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.2,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["NpcNames"] = {
},
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Name"] = "Aura - Is Cast Bar [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
},
},
["pet_height_scale"] = 0.949999988079071,
["aura_x_offset"] = 0,
["saved_cvars_last_change"] = {
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5153",
["nameplateShowFriends"] = "Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua:72",
["nameplateShowEnemies"] = "Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua:72",
},
["url"] = "https://wago.io/r-uQoEE01/4",
["aura_stack_anchor"] = {
["y"] = -5,
},
["debuff_show_cc_border"] = {
0,
0,
0,
},
["indicator_raidmark_scale"] = 0.8699999451637268,
["cast_statusbar_spark_alpha"] = 0,
["aura_stack_color"] = {
[3] = 0.36078431372549,
},
["aura2_y_offset"] = 0,
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_timer_text_anchor"] = {
["y"] = 0.5,
["side"] = 13,
},
["aura_consolidate"] = true,
["buffs_on_aura2"] = true,
["plate_config"] = {
["global_health_height"] = 13,
["friendlyplayer"] = {
["actorname_text_font"] = "Gilroy Bold",
["actorname_use_friends_color"] = false,
["spellpercent_text_font"] = "Gilroy Bold",
["show_guild_name"] = true,
["actorname_text_size"] = 8,
["actorname_use_class_color"] = true,
["cast"] = {
120,
},
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_spacing"] = 7,
["only_damaged"] = false,
["cast_incombat"] = {
120,
},
["actorname_use_guild_color"] = false,
["spellname_text_font"] = "Gilroy Bold",
["health_incombat"] = {
120,
13,
},
["health"] = {
120,
13,
},
["only_thename"] = true,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Gilroy Bold",
["level_text_font"] = "Gilroy Bold",
["percent_show_percent"] = false,
},
["friendlynpc"] = {
["actorname_text_font"] = "Gilroy Bold",
["actorname_text_spacing"] = 8,
["percent_text_font"] = "Gilroy Bold",
["spellpercent_text_font"] = "Gilroy Bold",
["actorname_text_size"] = 9,
["big_actortitle_text_font"] = "Gilroy Bold",
["cast"] = {
120,
},
["health_incombat"] = {
nil,
13,
},
["health"] = {
80,
8,
},
["spellname_text_font"] = "Gilroy Bold",
["level_text_font"] = "Gilroy Bold",
["level_text_alpha"] = 0.2999999821186066,
["big_actorname_text_font"] = "Gilroy Bold",
},
["global_health_width"] = 120,
["enemyplayer"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Gilroy Bold",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Gilroy Bold",
["cast"] = {
120,
13,
},
["spellpercent_text_size"] = 8,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 10,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["level_text_anchor"] = {
["y"] = -5,
["x"] = 2,
},
["cast_incombat"] = {
nil,
13,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 2,
},
["percent_text_anchor"] = {
["side"] = 11,
},
["level_text_font"] = "Gilroy Bold",
["percent_text_color"] = {
1,
1,
1,
},
["actorname_text_font"] = "Gilroy Bold",
["quest_color_neutral"] = {
1,
0.65,
0,
},
["actorname_text_size"] = 8,
["big_actorname_text_font"] = "Gilroy Bold",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 1,
["quest_color_enemy"] = {
1,
0.369,
0,
},
["actorname_text_spacing"] = 7,
["percent_text_font"] = "Gilroy Bold",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.75969998538494,
},
["percent_text_show_decimals"] = false,
["quest_enabled"] = true,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_size"] = 10,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.75424699485302,
},
["health_incombat"] = {
nil,
13,
},
["health"] = {
120,
13,
},
["spellname_text_size"] = 8,
["percent_show_health"] = false,
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 2,
},
["spellname_text_font"] = "Gilroy Bold",
["level_text_enabled"] = false,
},
["enemynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Gilroy Bold",
["big_actortitle_text_font"] = "Gilroy Bold",
["cast"] = {
120,
13,
},
["spellpercent_text_size"] = 8,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
13,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 2,
},
["percent_text_anchor"] = {
["side"] = 11,
},
["level_text_font"] = "Gilroy Bold",
["percent_text_color"] = {
1,
1,
1,
},
["actorname_text_font"] = "Gilroy Bold",
["actorname_text_size"] = 8,
["big_actorname_text_font"] = "Gilroy Bold",
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["percent_text_size"] = 8,
["actorname_text_spacing"] = 7,
["percent_text_font"] = "Gilroy Bold",
["percent_show_percent"] = false,
["level_text_anchor"] = {
["y"] = -5,
["x"] = 2,
},
["spellname_text_font"] = "Gilroy Bold",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.75424699485302,
},
["spellname_text_size"] = 8,
["health"] = {
120,
13,
},
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 2,
},
["level_text_alpha"] = 1,
["health_incombat"] = {
nil,
13,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.75969998538494,
},
["level_text_enabled"] = false,
},
},
["health_selection_overlay"] = "REEEE",
["aura_y_offset"] = 16,
["aura_show_enrage"] = true,
["tank"] = {
["colors"] = {
["anothertank"] = {
1,
0.9843137254902,
0.93333333333333,
},
["aggro"] = {
0.29411764705882,
0.68627450980392,
0.29803921568628,
},
["noaggro"] = {
0.9843137254902,
0.086274509803922,
0.17647058823529,
},
["nocombat"] = {
0.78039215686274,
0.25098039215686,
0.25098039215686,
},
["pulling"] = {
nil,
0.45882352941177,
0.10196078431373,
},
},
},
["health_statusbar_bgtexture"] = "REEEE",
["health_statusbar_texture"] = "REEEE",
["hook_auto_imported"] = {
["Aura Reorder"] = 3,
["Targetting Alpha"] = 3,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Bwonsamdi Reaping"] = 1,
["Attacking Specific Unit"] = 2,
["Jaina Encounter"] = 6,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Extra Border"] = 2,
["Combo Points"] = 6,
["Target Color"] = 3,
["Execute Range"] = 1,
["Reorder Nameplate"] = 4,
},
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["focus_texture"] = "REEEE",
["cast_statusbar_color_nointerrupt"] = {
0.8,
0.8,
0.8,
1,
},
["update_throttle"] = 0.2499999850988388,
["cast_statusbar_use_fade_effects"] = false,
["color_override_colors"] = {
[3] = {
0.78039215686274,
0.25098039215686,
0.25098039215686,
},
[4] = {
0.85490196078431,
0.77254901960784,
0.36078431372549,
},
[5] = {
0.29411764705882,
0.68627450980392,
0.29803921568628,
},
},
["cast_statusbar_texture"] = "REEEE",
["indicator_elite"] = false,
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["chr"] = {
["Player-3391-0CE9D30D"] = "Runes",
["Player-3391-0CFD8174"] = "HolyPower",
},
},
["castbar_target_text_size"] = 8,
["npc_cache"] = {
[36807] = {
"Deathspeaker Disciple",
"Icecrown Citadel",
},
[22885] = {
"Dragon Turtle",
"Black Temple",
"enUS",
},
[135934] = {
"Lord Incindivar",
"Verdant Wilds (Islands 8)",
},
[23397] = {
"Illidari Blood Lord",
"Black Temple",
"enUS",
},
[126848] = {
"Captain Eudora",
"Freehold",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[174842] = {
"Belligerent Waiter",
"Castle Nathria",
},
[135935] = {
"Lord Magmarr",
"Skittering Hollow (Islands 5)",
},
[16243] = {
"Plague Slime",
"Naxxramas",
},
[73095] = {
"Blackfuse Engineer",
"Siege of Orgrimmar",
},
[139007] = {
"Feral Stalker",
"Verdant Wilds (Islands 8)",
},
[132864] = {
"Juvenile Knucklebump",
"Skittering Hollow (Islands 5)",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[168700] = {
"Pestering Fiend",
"Castle Nathria",
},
[42695] = {
"Stonecore Sentry",
"The Stonecore",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[120194] = {
"Ghostly Acolyte",
"Tomb of Sargeras",
},
[139009] = {
"Feral Hunter",
"Verdant Wilds (Islands 8)",
},
[157439] = {
"Fury of N'Zoth",
"Ny'alotha, the Waking City",
},
[117123] = {
"Tidescale Legionnaire",
"Tomb of Sargeras",
},
[134915] = {
"Trapdoor Ambusher",
"Verdant Wilds (Islands 8)",
},
[147202] = {
"Animated Azershard",
"The Dread Chain (Islands 4)",
},
[221945] = {
"Forgotten Harbinger",
"Nerub-ar Palace",
"enUS",
},
[157441] = {
"Void Wraith",
"Blackwing Descent Scenario",
},
[42696] = {
"Stonecore Warbringer",
"The Stonecore",
},
[139012] = {
"Feral Guardian",
"Verdant Wilds (Islands 8)",
},
[157442] = {
"Gaze of Madness",
"Ny'alotha, the Waking City",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[73098] = {
"Kor'kron Overseer",
"Siege of Orgrimmar",
},
[139013] = {
"Frenzied Moonkin",
"Verdant Wilds (Islands 8)",
},
[150276] = {
"Heavy Scrapbot",
"Operation: Mechagon",
},
[108934] = {
"Tainted Blood",
"The Nighthold",
},
[125828] = {
"Víridian",
"Atal'Dazar",
},
[23398] = {
"Angered Soul Fragment",
"Black Temple",
"enUS",
},
[139014] = {
"Feral Moonseeker",
"Verdant Wilds (Islands 8)",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
},
[39625] = {
"General Umbriss",
"Grim Batol",
"enUS",
},
[152325] = {
"Rebecca Laughlin",
"Horrific Vision of Stormwind",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
},
[139015] = {
"Feral Moonkin",
"Verdant Wilds (Islands 8)",
},
[12468] = {
"Death Talon Hatcher",
"Blackwing Lair",
},
[69516] = {
"Zandalari Barricade",
"Mogu Island Progression Events",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
},
[222974] = {
"Hungry Scarab",
"City of Threads",
"enUS",
},
[130437] = {
"Mine Rat",
"The MOTHERLODE!!",
},
[139017] = {
"Wildmane",
"Verdant Wilds (Islands 8)",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
},
[157447] = {
"Fanatical Cultist",
"Ny'alotha, the Waking City",
},
[146185] = {
"Firesting Drone",
"Verdant Wilds (Islands 8)",
},
[69517] = {
"Zeb'tula Stoneshield",
"Mogu Island Progression Events",
},
[146186] = {
"Firesting Warrior",
"Verdant Wilds (Islands 8)",
},
[157449] = {
"Sinister Soulcarver",
"Ny'alotha, the Waking City",
},
[146187] = {
"Firesting Dominator",
"Verdant Wilds (Islands 8)",
},
[69518] = {
"Zeb'tula Spearanger",
"Mogu Island Progression Events",
},
[157450] = {
"Spellbound Ritualist",
"Ny'alotha, the Waking City",
},
[21863] = {
"Serpentshrine Lurker",
"Coilfang: Serpentshrine Cavern",
},
[44234] = {
"Vicious Leech",
"Lost City of the Tol'vir",
},
[146188] = {
"Firesting Dominator",
"Whispering Reef (Islands 10)",
},
[36811] = {
"Deathspeaker Attendant",
"Icecrown Citadel",
},
[157451] = {
"Iron-Willed Enforcer",
"Ny'alotha, the Waking City",
},
[22887] = {
"High Warlord Naj'entus",
"Black Temple",
"enUS",
},
[218884] = {
"Shattershell Scarab",
"Nerub-ar Palace",
"enUS",
},
[23399] = {
"Suffering Soul Fragment",
"Black Temple",
"enUS",
},
[132879] = {
"Crystalline Giant",
"Un'gol Ruins (Islands 1)",
},
[120201] = {
"Spectral Guardian",
"Tomb of Sargeras",
},
[167691] = {
"Stasis Trap",
"Castle Nathria",
},
[152333] = {
"Dark Ranger Lenara",
"Siege of Orgrimmar - Coup Scenario",
},
[16244] = {
"Infectious Ghoul",
"Naxxramas",
},
[16488] = {
"Arcane Anomaly",
"Karazhan",
},
[33228] = {
"Eonar's Gift",
"Ulduar",
},
[58569] = {
"Scarlet Purifier",
"Scarlet Monastery",
},
[136976] = {
"T'zala",
"Kings' Rest",
},
[158478] = {
"Corruption Tumor",
"Horrific Vision of Stormwind",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[73104] = {
"Unstable Spark",
"Siege of Orgrimmar",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[219912] = {
"Crawler",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[113036] = {
"Fel Lord Razzar",
"Broken Shore Scenario",
},
[147218] = {
"Spirit of Gold",
"Battle of Dazar'alor",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[58826] = {
"Zao Sunseeker",
"Temple of the Jade Serpent",
},
[213771] = {
"High Speaker Eirich",
"Hall of Awakening",
"enUS",
},
[173840] = {
"Plaguebound Devoted",
"Plaguefall",
},
[113037] = {
"Fel Lord Darakk",
"Broken Shore Scenario",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[5755] = {
"Deviate Viper",
"Wailing Caverns",
},
[23400] = {
"Illidari Archon",
"Black Temple",
"enUS",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
},
[150293] = {
"Mechagon Prowler",
"Operation: Mechagon",
},
[113038] = {
"Fel Lord Kurrz",
"Broken Shore Scenario",
},
[24552] = {
"Sliver",
"Magisters' Terrace",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
},
[157461] = {
"Mycelial Cyst",
"Ny'alotha, the Waking City",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[217870] = {
"Devouring Shade",
"Nightfall Sanctum",
"enUS",
},
[136984] = {
"Reban",
"Kings' Rest",
},
[69524] = {
"Zeb'tula Alchemist",
"Mogu Island Progression Events",
},
[150295] = {
"Tank Buster MK1",
"Operation: Mechagon",
},
[159510] = {
"Eye of the Depths",
"Ny'alotha, the Waking City",
},
[135961] = {
"Deepstone Crusher",
"Verdant Wilds (Islands 8)",
},
[61131] = {
"Mogu'shan Secret-Keeper",
"Mogu'shan Vaults",
},
[61387] = {
"Quilen Guardian",
"Mogu'shan Palace",
},
[135962] = {
"Crag Rager",
"Verdant Wilds (Islands 8)",
},
[69013] = {
"Diffused Lightning",
"Throne of Thunder",
},
[147225] = {
"Azerite Extractor",
"Havenswood (Islands 2)",
},
[214801] = {
"Skipper",
"Nerub-ar Palace",
"enUS",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[120719] = {
"Lunar Priestess",
"Tomb of Sargeras",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[140059] = {
"Grizzlefur Mauler",
"Un'gol Ruins (Islands 1)",
},
[132892] = {
"Giddyleaf",
"Verdant Wilds (Islands 8)",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[134940] = {
"Bristlethorn Piercer",
"Havenswood (Islands 2)",
},
[21225] = {
"Tidewalker Warrior",
"Coilfang: Serpentshrine Cavern",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[140060] = {
"Grizzlefur Bear",
"The Rotting Mire (Islands 9)",
},
[159514] = {
"Blood of Ny'alotha",
"Ny'alotha, the Waking City",
},
[113041] = {
"Infected Diemetradon",
"The Emerald Nightmare",
},
[169753] = {
"Famished Tick",
"Sanguine Depths",
},
[157467] = {
"Void Ascendant",
"Ny'alotha, the Waking City",
},
[92564] = {
"Mo'arg Painbringer",
"Broken Shore Scenario",
},
[23401] = {
"Hungering Soul Fragment",
"Black Temple",
"enUS",
},
[15989] = {
"Sapphiron",
"Naxxramas",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[136991] = {
"Blood-Hunter Dazal'ai",
"Havenswood (Islands 2)",
},
[24553] = {
"Apoko",
"Magisters' Terrace",
"enUS",
},
[148254] = {
"Frost Shard",
"Battle of Dazar'alor",
},
[33488] = {
"Saronite Vapors",
"Ulduar",
},
[8886] = {
"Deviate Python",
"Wailing Caverns",
},
[144160] = {
"Chopper Redhook",
"Siege of Boralus",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
},
[69017] = {
"Primordius",
"Throne of Thunder",
},
[102293] = {
"Dread Admiral Eliza",
"Azsuna",
},
[135971] = {
"Faithless Conscript",
"Temple of Sethraliss",
},
[153377] = {
"Goop",
"Operation: Mechagon",
},
[138019] = {
"Kul Tiran Vanguard",
"Siege of Boralus",
},
[140067] = {
"Rustpelt Alpha",
"Verdant Wilds (Islands 8)",
},
[21226] = {
"Tidewalker Shaman",
"Coilfang: Serpentshrine Cavern",
},
[140068] = {
"Rustpelt Snarler",
"Verdant Wilds (Islands 8)",
},
[87448] = {
"Ironworker",
"Blackrock Foundry",
},
[151331] = {
"Cellblock Sentinel",
"Torghast, Tower of the Damned",
},
[44752] = {
"Faceless Sapper",
"Throne of the Tides",
},
[212764] = {
"Engine Speaker",
"The Stonevault",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[157475] = {
"Synthesis Growth",
"Ny'alotha, the Waking City",
},
[23018] = {
"Shadowmoon Houndmaster",
"Black Temple",
"enUS",
},
[161571] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
},
[23402] = {
"Illidari Battle-mage",
"Black Temple",
"enUS",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[151333] = {
"Sentinel Shard",
"Torghast, Tower of the Damned",
},
[135975] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
"enUS",
},
[148262] = {
"Tidewater Elemental",
"Battle of Dazar'alor",
},
[132904] = {
"Sandscalp Villager",
"Skittering Hollow (Islands 5)",
},
[58319] = {
"Lesser Sha",
"Temple of the Jade Serpent",
},
[153382] = {
"Maw of the Maw",
"Torghast, Tower of the Damned",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[127381] = {
"Silt Crab",
"Tol Dagor",
},
[17771] = {
"Murkblood Oracle",
"Coilfang: The Underbog",
"enUS",
},
[18155] = {
"Bloodfalcon",
"Tempest Keep: The Botanica",
"enUS",
},
[163622] = {
"Goregrind Bits",
"The Necrotic Wake",
"enUS",
},
[19307] = {
"Nexus Terror",
"Auchindoun: Mana-Tombs",
"enUS",
},
[163623] = {
"Rotspew Leftovers",
"The Necrotic Wake",
"enUS",
},
[70557] = {
"Zandalari Prophet",
"Throne of Thunder",
},
[113048] = {
"Corrupted Deer",
"The Emerald Nightmare",
},
[122263] = {
"Spineshell Snapjaw",
"The Dread Chain (Islands 4)",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[21227] = {
"Tidewalker Harpooner",
"Coilfang: Serpentshrine Cavern",
},
[102298] = {
"Dread Squallshaper",
"Azsuna",
},
[140076] = {
"Knucklebump Silverback",
"Crestfall (Islands 11)",
},
[122264] = {
"Elder Spineshell",
"The Dread Chain (Islands 4)",
},
[61392] = {
"Harthak Flameseeker",
"Mogu'shan Palace",
},
[123288] = {
"Southsea Cannoneer",
"Jorundall (Islands 7)",
},
[157483] = {
"Ysedra the Darkener",
"Halls of Origination",
},
[152364] = {
"Radiance of Azshara",
"The Eternal Palace",
},
[23403] = {
"Illidari Assassin",
"Black Temple",
"enUS",
},
[140078] = {
"Knucklebump Gorilla",
"Skittering Hollow (Islands 5)",
},
[132911] = {
"Pebblestone Trogg",
"Skittering Hollow (Islands 5)",
},
[133935] = {
"Animated Guardian",
"Kings' Rest",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[24555] = {
"Garaxxas",
"Magisters' Terrace",
"enUS",
},
[123289] = {
"Sparkleshell Deathclaw",
"Whispering Reef (Islands 10)",
},
[33236] = {
"Steelforged Defender",
"Ulduar",
},
[34004] = {
"Life Spark",
"Ulduar",
},
[102300] = {
"Raging Current",
"Azsuna",
},
[157486] = {
"Horrific Hemorrhage",
"Ny'alotha, the Waking City",
},
[128921] = {
"Duskcoat Tiger",
"Skittering Hollow (Islands 5)",
},
[52434] = {
"Gurubashi Villager",
"Zul'Gurub",
},
[122266] = {
"Spineshell Turtle",
"Havenswood (Islands 2)",
},
[122778] = {
"Annihilator",
"Antorus, the Burning Throne",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[111004] = {
"Gelatinized Decay",
"The Emerald Nightmare",
},
[113052] = {
"Dreadguard",
"The Nighthold",
},
[123291] = {
"Sparkleshell Crab",
"The Rotting Mire (Islands 9)",
},
[33237] = {
"Ulduar Colossus",
"Ulduar",
},
[21228] = {
"Tidewalker Hydromancer",
"Coilfang: Serpentshrine Cavern",
},
[29931] = {
"Drakkari Rhino",
"Gundrak",
},
[52435] = {
"Gurubashi Villager",
"Zul'Gurub",
},
[140085] = {
"Pinegraze Greatstag",
"Snowblossom Village (Islands 3)",
},
[132918] = {
"Spitefin Raider",
"Whispering Reef (Islands 10)",
},
[124828] = {
"Argus the Unmaker",
"Antorus, the Burning Throne",
},
[140086] = {
"Pinegraze Courser",
"Snowblossom Village (Islands 3)",
},
[132919] = {
"Spitefin Behemoth",
"Whispering Reef (Islands 10)",
},
[133943] = {
"Minion of Zul",
"Kings' Rest",
},
[167731] = {
"Separation Assistant",
"The Necrotic Wake",
"enUS",
},
[24684] = {
"Sunblade Blood Knight",
"Magisters' Terrace",
"enUS",
},
[133944] = {
"Aspix",
"Temple of Sethraliss",
},
[69540] = {
"Zeb'tula Raptor",
"Mogu Island Progression Events",
},
[52436] = {
"Gurubashi Refugee",
"Zul'Gurub",
},
[81315] = {
"Iron Crack-Shot",
"Blackrock Foundry",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[118175] = {
"Storm Elemental",
"The Dread Chain (Islands 4)",
},
[102305] = {
"Dreadguard",
"Azsuna",
},
[132923] = {
"Coldlight Murloc",
"Whispering Reef (Islands 10)",
},
[151353] = {
"Mawrat",
"Torghast, Tower of the Damned",
},
[153401] = {
"K'thir Dominator",
"Horrific Vision of Orgrimmar",
},
[14263] = {
"Bronze Drakonid",
"Blackwing Lair",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[21229] = {
"Greyheart Tidecaller",
"Coilfang: Serpentshrine Cavern",
},
[52437] = {
"Gurubashi Refugee",
"Zul'Gurub",
},
[172858] = {
"Stone Legion Goliath",
"Castle Nathria",
},
[135999] = {
"Heliodor",
"Verdant Wilds (Islands 8)",
},
[81318] = {
"Iron Gunnery Sergeant",
"Blackrock Foundry",
},
[24557] = {
"Kagani Nightstrike",
"Magisters' Terrace",
"enUS",
},
[140095] = {
"Mudsnout Gorer",
"Verdant Wilds (Islands 8)",
},
[117154] = {
"Razorjaw Acolyte",
"Tomb of Sargeras",
},
[140096] = {
"Mudsnout Boar",
"Verdant Wilds (Islands 8)",
},
[113059] = {
"Fel Lord Garzan",
"Broken Shore Scenario",
},
[53206] = {
"Hell Hound",
"Firelands",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[140099] = {
"Thundersnort the Loud",
"The Dread Chain (Islands 4)",
},
[21230] = {
"Greyheart Nether-Mage",
"Coilfang: Serpentshrine Cavern",
},
[136005] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[137029] = {
"Ordnance Specialist",
"The MOTHERLODE!!",
},
[146244] = {
"Stinging Fiend",
"Skittering Hollow (Islands 5)",
},
[61398] = {
"Xin the Weaponmaster",
"Mogu'shan Palace",
},
[140101] = {
"Swampwallow",
"Crestfall (Islands 11)",
},
[61910] = {
"Resin Flake",
"Siege of Niuzao Temple",
},
[22894] = {
"Cyclone Totem",
"Black Temple",
"enUS",
},
[136006] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[105383] = {
"Corruptor Tentacle",
"The Emerald Nightmare",
},
[24558] = {
"Ellrys Duskhallow",
"Magister's Terrace",
},
[24686] = {
"Sunblade Warlock",
"Magisters' Terrace",
"enUS",
},
[33754] = {
"Dark Rune Thunderer",
"Ulduar",
},
[17007] = {
"Lady Keira Berrybuck",
"Karazhan",
},
[70060] = {
"Shadowed Voodoo Spirit",
"Throne of Thunder",
},
[112039] = {
"Screeching Spiderling",
"The Emerald Nightmare",
},
[60375] = {
"Zandalari Skullcharger",
"Mogu'shan Vaults",
},
[61399] = {
"Glintrok Scout",
"Mogu'shan Palace",
},
[211777] = {
"Spitfire Fusetender",
"The Waterworks",
"enUS",
},
[111528] = {
"Deathroot Ancient",
"The Emerald Nightmare",
},
[133963] = {
"Test Subject",
"The MOTHERLODE!!",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[14264] = {
"Red Drakonid",
"Blackwing Lair",
},
[14456] = {
"Blackwing Guardsman",
"Blackwing Lair",
},
[33755] = {
"Dark Rune Ravager",
"Ulduar",
},
[34267] = {
"Parts Recovery Technician",
"Ulduar",
},
[146251] = {
"Sister Katherine",
"Battle of Dazar'alor",
},
[224066] = {
"Sureki Vanguard",
"Nerub-ar Palace",
"enUS",
},
[52441] = {
"Curious Jungle Monkey",
"Zul'Gurub",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
},
[74158] = {
"Kor'kron Gunner",
"Siege of Orgrimmar",
},
[37595] = {
"Darkfallen Blood Knight",
"Icecrown Citadel",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[152396] = {
"Guardian of Azeroth",
"Deepwind Gorge",
},
[146253] = {
"Brother Joseph",
"Battle of Dazar'alor",
},
[134991] = {
"Sandfury Stonefist",
"Temple of Sethraliss",
},
[40923] = {
"Unstable Corruption",
"Throne of the Tides",
},
[213830] = {
"Candleclaw Kobold",
"New Candle, New Hope",
"enUS",
},
[24815] = {
"Sunblade Imp",
"Magisters' Terrace",
"enUS",
},
[77231] = {
"Enforcer Sorka",
"Blackrock Foundry",
},
[213831] = {
"Candleclaw Underboss",
"New Candle, New Hope",
"enUS",
},
[134993] = {
"Mchimba the Embalmer",
"Kings' Rest",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[146256] = {
"Laminaria",
"Battle of Dazar'alor",
},
[134994] = {
"Spectral Headhunter",
"Kings' Rest",
},
[213833] = {
"Candleclaw Knight",
"New Candle, New Hope",
"enUS",
},
[39388] = {
"Mutated Hatchling",
"Grim Batol",
"enUS",
},
[5053] = {
"Deviate Crocolisk",
"Wailing Caverns",
},
[213834] = {
"Candleclaw Mole",
"New Candle, New Hope",
"enUS",
},
[133972] = {
"Heavy Cannon",
"Tol Dagor",
},
[21232] = {
"Greyheart Skulker",
"Coilfang: Serpentshrine Cavern",
},
[213835] = {
"Candleclaw Scrambler",
"New Candle, New Hope",
"enUS",
},
[149331] = {
"Luminous Azerite",
"Verdant Wilds (Islands 8)",
},
[30319] = {
"Twilight Darkcaster",
"Ahn'kahet: The Old Kingdom",
},
[36829] = {
"Deathspeaker High Priest",
"Icecrown Citadel",
},
[90544] = {
"Krosus",
"Broken Shore Scenario",
},
[22896] = {
"Ashtongue Searing Totem",
"Black Temple",
"enUS",
},
[111022] = {
"The Demon Within",
"The Nighthold",
},
[71603] = {
"Sha Puddle",
"Siege of Orgrimmar",
},
[24560] = {
"Priestess Delrissa",
"Magisters' Terrace",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[91569] = {
"Volatile Bear",
"The Maw of Nashal",
},
[34014] = {
"Sanctum Sentry",
"Ulduar",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[104880] = {
"Thing That Should Not Be",
"The Nighthold",
},
[52956] = {
"Zandalari Juggernaut",
"Zul'Gurub",
},
[139097] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[135002] = {
"Demonic Tyrant",
"Crucible of Storms",
},
[170838] = {
"Unyielding Contender",
"Theater of Pain",
},
[39390] = {
"Twilight Drake",
"Grim Batol",
"enUS",
},
[104881] = {
"Spellblade Aluriel",
"The Nighthold",
},
[105393] = {
"Il'gynoth",
"The Emerald Nightmare",
},
[20465] = {
"Underbog Frenzy",
"Coilfang: The Underbog",
"enUS",
},
[34271] = {
"XD-175 Compactobot",
"Ulduar",
},
[29680] = {
"Slad'ran Viper",
"Gundrak",
},
[159578] = {
"Exposed Synapse",
"Ny'alotha, the Waking City",
},
[105906] = {
"Eye of Il'gynoth",
"The Emerald Nightmare",
},
[22897] = {
"Summoned Windfury Totem",
"Black Temple",
"enUS",
},
[31216] = {
"Sparrucard-Archimonde",
"Temple of Kotmogu",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[56541] = {
"Master Snowdrift",
"Shado-Pan Monastery",
},
[24689] = {
"Wretched Bruiser",
"Magisters' Terrace",
"enUS",
},
[222038] = {
"Shrillwing Hunter En'kilah",
"Nerub-ar Palace",
"enUS",
},
[208728] = {
"Treasure Wraith",
"The Waterworks",
"enUS",
},
[52958] = {
"Zandalari Hierophant",
"Zul'Gurub",
},
[163678] = {
"Clotted Corruption",
"Ny'alotha, the Waking City",
},
[164702] = {
"Carrion Worm",
"The Necrotic Wake",
"enUS",
},
[149344] = {
"Fury Imbued Azerite",
"Skittering Hollow (Islands 5)",
},
[39392] = {
"Faceless Corruptor",
"Grim Batol",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[169823] = {
"Gorm Behemoth",
"Torghast, Tower of the Damned",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[149346] = {
"Suffused Azerite",
"The Dread Chain (Islands 4)",
},
[58590] = {
"Scarlet Zealot",
"Scarlet Monastery",
},
[34273] = {
"XB-488 Disposalbot",
"Ulduar",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[164705] = {
"Pestilence Slime",
"Plaguefall",
},
[70586] = {
"Eternal Guardian",
"Throne of Thunder",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[22898] = {
"Supremus",
"Black Temple",
"enUS",
},
[38369] = {
"Dark Nucleus",
"Icecrown Citadel",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
},
[139110] = {
"Spark Channeler",
"Temple of Sethraliss",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[70587] = {
"Shale Stalker",
"Throne of Thunder",
},
[56799] = {
"Krik'thik Bombardier",
"Gate of the Setting Sun",
},
[172899] = {
"Nathrian Enforcer",
"Castle Nathria",
},
[158565] = {
"Naros",
"Horrific Vision of Orgrimmar",
},
[144231] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[17395] = {
"Shadowmoon Summoner",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[144232] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[18419] = {
"Bloodwarder Greenkeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[53472] = {
"Thyrinar",
"Nexus Legendary",
},
[158567] = {
"Tormented Kor'kron Annihilator",
"Horrific Vision of Orgrimmar",
},
[149353] = {
"Incandescent Azergem Crystalback",
"Havenswood (Islands 2)",
},
[95674] = {
"Fenryr",
"Halls of Valor",
},
[162664] = {
"Aqir Swarmer",
"Ny'alotha, the Waking City",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[95675] = {
"God-King Skovald",
"Halls of Valor",
},
[60384] = {
"Zandalari Pterror Wing",
"Mogu'shan Vaults",
},
[153451] = {
"Kosarus the Fallen",
"Torghast, Tower of the Damned",
},
[163690] = {
"Shath'Yar Scribe",
"Ny'alotha, the Waking City",
},
[156523] = {
"Maut",
"Ny'alotha, the Waking City",
},
[145261] = {
"Opulence",
"Battle of Dazar'alor",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[95676] = {
"Odyn",
"Halls of Valor",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
},
[136049] = {
"Algenon",
"The Rotting Mire (Islands 9)",
},
[130489] = {
"Dazarian Stalker",
"Battle of Dazar'alor",
},
[18420] = {
"Sunseeker Geomancer",
"Tempest Keep: The Botanica",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[136050] = {
"Gorestream",
"Un'gol Ruins (Islands 1)",
},
[220008] = {
"Cragpie",
"The Sinkhole",
"enUS",
},
[118715] = {
"Reanimated Templar",
"Tomb of Sargeras",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[171887] = {
"Slimy Smorgasbord",
"Plaguefall",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[70594] = {
"Mist Lurker",
"Throne of Thunder",
},
[134005] = {
"Shalebiter",
"The MOTHERLODE!!",
},
[60386] = {
"Zandalari Terror Rider",
"Mogu'shan Vaults",
},
[44260] = {
"Venomfang Crocolisk",
"Lost City of the Tol'vir",
},
[221035] = {
"Royal Scribe",
"Nerub-ar Palace",
"enUS",
},
[23028] = {
"Bonechewer Taskmaster",
"Black Temple",
"enUS",
},
[210797] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[72131] = {
"Blind Blademaster",
"Siege of Orgrimmar",
},
[68036] = {
"Durumu the Forgotten",
"Throne of Thunder",
},
[17397] = {
"Shadowmoon Adept",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[140152] = {
"Rotclaw Mauler",
"The Dread Chain (Islands 4)",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[129469] = {
"Deepsea Crawler",
"Whispering Reef (Islands 10)",
},
[121790] = {
"Fleetlord Dominator",
"Tomb of Sargeras",
},
[416] = {
"Zilkin",
"Crucible of Storms",
},
[140153] = {
"Rotclaw Bear",
"The Dread Chain (Islands 4)",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[124350] = {
"Kunzen Crusher",
"Un'gol Ruins (Islands 1)",
},
[144249] = {
"Omega Buster",
"Operation: Mechagon",
},
[145273] = {
"The Hand of In'zashi",
"Battle of Dazar'alor",
},
[213873] = {
"Waxy Globule",
"New Candle, New Hope",
"enUS",
},
[129470] = {
"Deepsea Crab",
"Havenswood (Islands 2)",
},
[145274] = {
"Yalat's Bulwark",
"Battle of Dazar'alor",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[140155] = {
"Rabid Rotclaw",
"The Dread Chain (Islands 4)",
},
[33255] = {
"Titanium Stormlord",
"Ulduar",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[113089] = {
"Defiled Keeper",
"The Emerald Nightmare",
},
[97219] = {
"Solsten",
"Halls of Valor",
},
[114625] = {
"Phantom Guest",
"Return to Karazhan",
},
[140157] = {
"Rotclaw Cub-Eater",
"Havenswood (Islands 2)",
},
[15547] = {
"Spectral Charger",
"Karazhan",
},
[15931] = {
"Grobbulus",
"Naxxramas",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[158588] = {
"Gamon",
"Horrific Vision of Orgrimmar",
},
[113090] = {
"Corrupted Gatewarden",
"The Emerald Nightmare",
},
[163708] = {
"Umbral Gatekeeper",
"Ny'alotha, the Waking City",
},
[107459] = {
"Venomous Spiderling",
"The Emerald Nightmare",
},
[33768] = {
"Rubble",
"Ulduar",
},
[17398] = {
"Nascent Fel Orc",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[113091] = {
"Tainted Plainstrider",
"The Emerald Nightmare",
},
[53222] = {
"Flamewaker Centurion",
"Firelands",
},
[173949] = {
"Nathrian Soldier",
"Castle Nathria",
},
[167806] = {
"Animated Sin",
"Halls of Atonement",
},
[113092] = {
"Swarming Dread",
"The Emerald Nightmare",
},
[210810] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[163712] = {
"Dying Voidspawn",
"Ny'alotha, the Waking City",
},
[135044] = {
"Shredmaw the Voracious",
"The Rotting Mire (Islands 9)",
},
[162689] = {
"Surgeon Stitchflesh",
"The Necrotic Wake",
"enUS",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[207740] = {
"Gnarled Lasher",
"Fungal Folly",
"enUS",
},
[113093] = {
"Infected Gazelle",
"The Emerald Nightmare",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[61670] = {
"Sik'thik Demolisher",
"Siege of Niuzao Temple",
},
[173953] = {
"Loyal Gargon",
"Castle Nathria",
},
[135046] = {
"Crawmog",
"Jorundall (Islands 7)",
},
[162691] = {
"Blightbone",
"The Necrotic Wake",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[169859] = {
"Observer Zelgar",
"Torghast, Tower of the Damned",
},
[220029] = {
"Gearsweep",
"Hall of Awakening",
"enUS",
},
[165764] = {
"Rockbound Vanquisher",
"Castle Nathria",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
},
[219006] = {
"Venommaster Nezarox",
"Nerub-ar Palace",
"enUS",
},
[162693] = {
"Nalthor the Rimebinder",
"The Necrotic Wake",
"enUS",
},
[111047] = {
"Parasitic Shadow Demon",
"The Nighthold",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
},
[168837] = {
"Stealthling",
"Plaguefall",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[53224] = {
"Flamewaker Taskmaster",
"Firelands",
},
[37098] = {
"Val'kyr Herald",
"Icecrown Citadel",
},
[137098] = {
"Liskorath",
"Tol Dagor",
},
[69069] = {
"Living Fluid",
"Throne of Thunder",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[33515] = {
"Auriaya",
"Ulduar",
},
[135052] = {
"Blight Toad",
"Waycrest Manor",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[58856] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[69070] = {
"Viscous Horror",
"Throne of Thunder",
},
[118728] = {
"Ghastly Bonewarden",
"Tomb of Sargeras",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[61928] = {
"Sik'thik Guardian",
"Siege of Niuzao Temple",
},
[15548] = {
"Spectral Stallion",
"Karazhan",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[16060] = {
"Gothik the Harvester",
"Naxxramas",
},
[16124] = {
"Unrelenting Trainee",
"Naxxramas",
},
[168843] = {
"Klotos",
"Spires of Ascension",
},
[72655] = {
"Fragment of Pride",
"Siege of Orgrimmar",
},
[114634] = {
"Undying Servant",
"Return to Karazhan",
},
[16504] = {
"Arcane Protector",
"Karazhan",
},
[33772] = {
"Faceless Horror",
"Ulduar",
},
[168844] = {
"Lakesis",
"Spires of Ascension",
},
[17400] = {
"Felguard Annihilator",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[213895] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[168845] = {
"Astronos",
"Spires of Ascension",
},
[146320] = {
"Prelate Za'lan",
"Battle of Dazar'alor",
},
[61929] = {
"Sik'thik Amber-Weaver",
"Siege of Niuzao Temple",
},
[37868] = {
"Risen Archmage",
"Icecrown Citadel",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[157584] = {
"Flameforge Master",
"Torghast, Tower of the Damned",
},
[159632] = {
"Cultist Shadowblade",
"Horrific Vision of Stormwind",
},
[136083] = {
"Forgotten Denizen",
"Shrine of the Storm",
},
[145298] = {
"Feral Hungerer",
"Havenswood (Islands 2)",
},
[146322] = {
"Siegebreaker Roka",
"Battle of Dazar'alor",
},
[114636] = {
"Phantom Guardsman",
"Return to Karazhan",
},
[159633] = {
"Cultist Executioner",
"Horrific Vision of Stormwind",
},
[72658] = {
"Amalgamated Hubris",
"Siege of Orgrimmar",
},
[114637] = {
"Spectral Sentry",
"Return to Karazhan",
},
[54507] = {
"Time-Twisted Scourge Beast",
"End Time",
},
[140182] = {
"Trampleleaf the Jungle Quake",
"Un'gol Ruins (Islands 1)",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
},
[81362] = {
"Frostwall Goren",
"FW Horde Garrison Level 2",
},
[24696] = {
"Coilskar Witch",
"Magisters' Terrace",
"enUS",
},
[219022] = {
"Ascended Webfriar",
"The Underkeep",
"enUS",
},
[17401] = {
"Felhound Manastalker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
},
[113103] = {
"Corrupted Swoop",
"The Emerald Nightmare",
},
[145304] = {
"Feral Strangler",
"Havenswood (Islands 2)",
},
[53484] = {
"Icebound Sentinel",
"Nexus Legendary",
},
[173973] = {
"Nathrian Tracker",
"Castle Nathria",
},
[160663] = {
"Essence of Nightmare",
"Ny'alotha, the Waking City",
},
[145305] = {
"Feral Hulk",
"Havenswood (Islands 2)",
},
[213905] = {
"Animated Darkness",
"The Dawnbreaker",
"enUS",
},
[72661] = {
"Zeal",
"Siege of Orgrimmar",
},
[28920] = {
"Stormforged Giant",
"Halls of Lightning",
},
[20857] = {
"Arcatraz Defender",
"Tempest Keep: The Arcatraz",
},
[29304] = {
"Slad'ran",
"Gundrak",
},
[69078] = {
"Sul the Sandcrawler",
"Throne of Thunder",
},
[157594] = {
"Lesser Void Elemental",
"Horrific Vision of Orgrimmar",
},
[72150] = {
"Kor'kron Shadowmage",
"Siege of Orgrimmar",
},
[72662] = {
"Vanity",
"Siege of Orgrimmar",
},
[116689] = {
"Atrigan",
"Tomb of Sargeras",
},
[162715] = {
"Fanatical Cultist",
"Ny'alotha, the Waking City",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[16061] = {
"Instructor Razuvious",
"Naxxramas",
},
[16125] = {
"Unrelenting Death Knight",
"Naxxramas",
},
[144286] = {
"Asset Manager",
"The MOTHERLODE!!",
},
[162716] = {
"Spellbound Ritualist",
"Ny'alotha, the Waking City",
},
[24697] = {
"Sister of Torment",
"Magisters' Terrace",
"enUS",
},
[33264] = {
"Ironwork Cannon",
"Ulduar",
},
[33776] = {
"Kissemurran",
"Crucible of Storms",
},
[58605] = {
"Scarlet Judicator",
"Scarlet Monastery",
},
[34288] = {
"Salvagebot Sawblade",
"Ulduar",
},
[162717] = {
"Sinister Soulcarver",
"Ny'alotha, the Waking City",
},
[112595] = {
"Shal'dorei Archmage",
"The Nighthold",
},
[152479] = {
"Void-Twisted Whelp",
"Eastern Kingdoms - Vermillion Redoubt - HoA Scenario",
},
[162718] = {
"Iron-Willed Enforcer",
"Ny'alotha, the Waking City",
},
[156575] = {
"Dark Inquisitor Xanesh",
"Ny'alotha, the Waking City",
},
[116691] = {
"Belac",
"Tomb of Sargeras",
},
[170910] = {
"Shimmering Wader",
"The Necrotic Wake",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[224152] = {
"Twilight Brute",
"Grim Batol",
"enUS",
},
[112596] = {
"Duskwatch Warden",
"The Nighthold",
},
[156577] = {
"Therum Deepforge",
"Horrific Vision of Stormwind",
},
[50159] = {
"Джигурда",
"The Dread Chain (Islands 4)",
},
[29305] = {
"Moorabi",
"Gundrak",
},
[219034] = {
"Web Marauder",
"The Underkeep",
"enUS",
},
[157602] = {
"Drest'agath",
"Ny'alotha, the Waking City",
},
[219035] = {
"Deepwalker Guardian",
"The Underkeep",
"enUS",
},
[163746] = {
"Walkie Shockie X1",
"Operation: Mechagon",
},
[157603] = {
"Void Globule",
"Horrific Vision of Orgrimmar",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[157604] = {
"Crawling Corruption",
"Horrific Vision of Orgrimmar",
},
[120789] = {
"Lieutenant Silvermight",
"Tomb of Sargeras",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
},
[24698] = {
"Ethereum Smuggler",
"Magisters' Terrace",
"enUS",
},
[157605] = {
"Burrowing Appendage",
"Horrific Vision of Orgrimmar",
},
[134056] = {
"Aqu'sirr",
"Shrine of the Storm",
},
[152486] = {
"Underhold Elite Guard",
"Siege of Orgrimmar - Coup Scenario",
},
[60143] = {
"Gara'jal the Spiritbinder",
"Mogu'shan Vaults",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
},
[157607] = {
"Faceless Shadowcaller",
"Horrific Vision of Orgrimmar",
},
[134058] = {
"Galecaller Faye",
"Shrine of the Storm",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[126422] = {
"Coralback Scuttler",
"Whispering Reef (Islands 10)",
},
[157608] = {
"Faceless Willbreaker",
"Horrific Vision of Orgrimmar",
},
[87515] = {
"Iron Flame Binder",
"Blackrock Foundry",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
},
[147370] = {
"Bladeguard Kaja",
"Battle of Dazar'alor",
},
[157609] = {
"K'thir Mindcarver",
"Horrific Vision of Orgrimmar",
},
[134060] = {
"Lord Stormsong",
"Shrine of the Storm",
},
[144299] = {
"Workshop Defender",
"Operation: Mechagon",
},
[3680] = {
"Serpentbloom Snake",
"Wailing Caverns",
},
[126423] = {
"Coralback Crab",
"Whispering Reef (Islands 10)",
},
[157610] = {
"K'thir Dominator",
"Horrific Vision of Orgrimmar",
},
[103898] = {
"Sickly Imp",
"Broken Shore Scenario",
},
[113113] = {
"Essence of Nightmare",
"The Emerald Nightmare",
},
[3840] = {
"Druid of the Fang",
"Wailing Caverns",
},
[15550] = {
"Attumen the Huntsman",
"Karazhan",
},
[144301] = {
"Living Waste",
"Operation: Mechagon",
},
[126424] = {
"Coralback Surfcrawler",
"Whispering Reef (Islands 10)",
},
[157612] = {
"Eye of Drest'agath",
"Ny'alotha, the Waking City",
},
[134063] = {
"Brother Ironhull",
"Shrine of the Storm",
},
[16126] = {
"Unrelenting Rider",
"Naxxramas",
},
[219045] = {
"Colossal Spider",
"Nerub-ar Palace",
"enUS",
},
[157613] = {
"Maw of Drest'agath",
"Ny'alotha, the Waking City",
},
[99804] = {
"Valarjar Falconer",
"Halls of Valor",
},
[144303] = {
"G.U.A.R.D.",
"Operation: Mechagon",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
"enUS",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[112603] = {
"Terrace Grove-Tender",
"The Nighthold",
},
[130521] = {
"Freehold Deckhand",
"Freehold",
},
[147376] = {
"Barrier",
"Battle of Dazar'alor",
},
[168878] = {
"Rigged Plagueborer",
"Plaguefall",
},
[5056] = {
"Deviate Dreadfang",
"Wailing Caverns",
},
[130522] = {
"Freehold Shipmate",
"Freehold",
},
[28923] = {
"Loken",
"Halls of Lightning",
},
[33525] = {
"Mangrove Ent",
"Ulduar",
},
[29307] = {
"Drakkari Colossus",
"Gundrak",
},
[139188] = {
"Ironfur",
"Verdant Wilds (Islands 8)",
},
[29819] = {
"Drakkari Lancer",
"Gundrak",
},
[134069] = {
"Vol'zith the Whisperer",
"Shrine of the Storm",
},
[60402] = {
"Zandalari Fire-Dancer",
"Mogu'shan Vaults",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[36597] = {
"The Lich King",
"Icecrown Citadel",
},
[36853] = {
"Sindragosa",
"Icecrown Citadel",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[23420] = {
"Essence of Anger",
"Black Temple",
"enUS",
},
[111070] = {
"Soul Fragment of Azzinoth",
"The Nighthold",
},
[157620] = {
"Prophet Skitra",
"Ny'alotha, the Waking City",
},
[87521] = {
"Iron Slag-Shaper",
"Blackrock Foundry",
},
[104415] = {
"Chronomatic Anomaly",
"The Nighthold",
},
[130012] = {
"Irontide Ravager",
"Freehold",
},
[139191] = {
"Underbrush",
"Verdant Wilds (Islands 8)",
},
[172979] = {
"Honeydew Sporeflutterer",
"Mists of Tirna Scithe",
},
[33526] = {
"Ironroot Lasher",
"Ulduar",
},
[144311] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[153526] = {
"Aqir Swarmer",
"Horrific Vision of Orgrimmar",
},
[126429] = {
"Encrusted Coralback",
"Whispering Reef (Islands 10)",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[17533] = {
"Romulo",
"Karazhan",
},
[223150] = {
"Ascended Voidspeaker",
"Nerub-ar Palace",
"enUS",
},
[153527] = {
"Aqir Swarmleader",
"Horrific Vision of Orgrimmar",
},
[73188] = {
"Captive Cave Bat",
"Siege of Orgrimmar",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[145337] = {
"Sandclaw Crab",
"The Eternal Palace",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[162744] = {
"Nekthara the Mangler",
"Theater of Pain",
},
[122847] = {
"Umbral Priestess",
"Tomb of Sargeras",
},
[33271] = {
"General Vezax",
"Ulduar",
},
[33527] = {
"Nature's Blade",
"Ulduar",
},
[29308] = {
"Prince Taldaram",
"Ahn'kahet: The Old Kingdom",
},
[169912] = {
"Enraged Mask",
"De Other Side",
},
[29820] = {
"Drakkari God Hunter",
"Gundrak",
},
[153531] = {
"Aqir Bonecrusher",
"Horrific Vision of Orgrimmar",
},
[36855] = {
"Lady Deathwhisper",
"Icecrown Citadel",
},
[15551] = {
"Spectral Stable Hand",
"Karazhan",
},
[160699] = {
"Angry Mailemental",
"Horrific Vision of Stormwind",
},
[153532] = {
"Aqir Mindhunter",
"Horrific Vision of Orgrimmar",
},
[146365] = {
"Blazing Fireguard",
"Battle of Dazar'alor",
},
[16063] = {
"Sir Zeliek",
"Naxxramas",
},
[16127] = {
"Spectral Trainee",
"Naxxramas",
},
[168891] = {
"Rigged Plagueborer",
"Plaguefall",
},
[146366] = {
"Molten Hound",
"Battle of Dazar'alor",
},
[33528] = {
"Guardian of Life",
"Ulduar",
},
[126433] = {
"Bat",
"Deepwind Gorge",
},
[111075] = {
"Chaotoid",
"The Nighthold",
},
[174012] = {
"Executrix Ophelia",
"Castle Nathria",
},
[122850] = {
"Umbral Guard",
"Tomb of Sargeras",
},
[53494] = {
"Baleroc",
"Firelands",
},
[152512] = {
"Stormwraith",
"The Eternal Palace",
},
[149441] = {
"Frozen Ballista",
"Battle of Dazar'alor",
},
[160704] = {
"Letter Encrusted Void Globule",
"Horrific Vision of Orgrimmar",
},
[146370] = {
"Dark Iron Vanguard",
"Battle of Dazar'alor",
},
[122851] = {
"Umbral Archer",
"Tomb of Sargeras",
},
[172991] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[29309] = {
"Elder Nadox",
"Ahn'kahet: The Old Kingdom",
},
[219066] = {
"Inflicted Civilian",
"The Rookery",
"enUS",
},
[146371] = {
"Dark Iron Primalist",
"Battle of Dazar'alor",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[73194] = {
"Kor'kron Iron Scorpion",
"Siege of Orgrimmar",
},
[153541] = {
"Slavemaster Ul'rok",
"Horrific Vision of Stormwind",
},
[73195] = {
"Kor'kron Jailer",
"Siege of Orgrimmar",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[12416] = {
"Blackwing Legionnaire",
"Blackwing Lair",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[169925] = {
"Begrudging Waiter",
"Castle Nathria",
},
[18431] = {
"Ethereal Beacon",
"Auchindoun: Mana-Tombs",
"enUS",
},
[152521] = {
"Gunaz",
"Siege of Orgrimmar - Coup Scenario",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[73197] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[28926] = {
"Spark of Ionar",
"Halls of Lightning",
},
[68078] = {
"Iron Qon",
"Throne of Thunder",
},
[111081] = {
"Fulminant",
"The Nighthold",
},
[120808] = {
"Lylth the Silent",
"Tomb of Sargeras",
},
[152523] = {
"Mukuta",
"Siege of Orgrimmar - Coup Scenario",
},
[68079] = {
"Ro'shak",
"Throne of Thunder",
},
[162763] = {
"Soulforged Bonereaver",
"Theater of Pain",
},
[16064] = {
"Thane Korth'azz",
"Naxxramas",
},
[129000] = {
"Southsea Brawler",
"Jorundall (Islands 7)",
},
[168907] = {
"Slime Tentacle",
"Plaguefall",
},
[105451] = {
"Counterstrike Totem",
"Temple of Kotmogu",
},
[222149] = {
"Injured Earthen",
"The Stonevault",
"enUS",
},
[94189] = {
"Living Felblaze",
"Broken Shore Scenario",
},
[71152] = {
"Skeer the Bloodseeker",
"Siege of Orgrimmar",
},
[113131] = {
"Living Felblaze",
"Broken Shore Scenario",
},
[130025] = {
"Irontide Thug",
"Tol Dagor",
},
[37116] = {
"Skybreaker Sorcerer",
"Icecrown Citadel",
},
[61945] = {
"Gurthan Iron Maw",
"Azsuna",
},
[153552] = {
"Weeping Wraith",
"Torghast, Tower of the Damned",
},
[94190] = {
"Burning Sentry",
"Broken Shore Scenario",
},
[164815] = {
"Zolramus Siphoner",
"The Necrotic Wake",
"enUS",
},
[78832] = {
"Grom'kar Man-at-Arms",
"Blackrock Foundry",
},
[71153] = {
"Hisek the Swarmkeeper",
"Siege of Orgrimmar",
},
[113132] = {
"Burning Terrorhound",
"Broken Shore Scenario",
},
[130026] = {
"Bilge Rat Seaspeaker",
"Tol Dagor",
},
[20864] = {
"Protean Nightmare",
"Tempest Keep: The Arcatraz",
},
[29311] = {
"Herald Volazj",
"Ahn'kahet: The Old Kingdom",
},
[161745] = {
"Hepthys",
"Ny'alotha, the Waking City",
},
[86000] = {
"Gentle Clefthoof",
"FW Horde Garrison Level 1",
},
[71154] = {
"Ka'roz the Locust",
"Siege of Orgrimmar",
},
[60410] = {
"Elegon",
"Mogu'shan Vaults",
},
[161746] = {
"Ossirat",
"Ny'alotha, the Waking City",
},
[61434] = {
"Sik'thik Vanguard",
"Siege of Niuzao Temple",
},
[61946] = {
"Harthak Stormcaller",
"Mogu'shan Palace",
},
[5761] = {
"Deviate Shambler",
"Wailing Caverns",
},
[109038] = {
"Solarist Tel'arn",
"The Nighthold",
},
[71155] = {
"Korven the Prime",
"Siege of Orgrimmar",
},
[130028] = {
"Ashvane Priest",
"Tol Dagor",
},
[16385] = {
"Lightning Totem",
"Naxxramas",
},
[132056] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
},
[223181] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[167892] = {
"Tormented Soul",
"Halls of Atonement",
},
[223182] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[71156] = {
"Kaz'tik the Manipulator",
"Siege of Orgrimmar",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[129517] = {
"Reanimated Raptor",
"Atal'Dazar",
},
[53244] = {
"Flamewaker Trainee",
"Firelands",
},
[61947] = {
"Kargesh Ribcrusher",
"Mogu'shan Palace",
},
[109040] = {
"Arcanist Tel'arn",
"The Nighthold",
},
[148441] = {
"Gnomish Gyro-Engineer",
"Battle of Dazar'alor",
},
[71157] = {
"Xaril the Poisoned Mind",
"Siege of Orgrimmar",
},
[148442] = {
"Gnomish Commando",
"Battle of Dazar'alor",
},
[20865] = {
"Protean Horror",
"Tempest Keep: The Arcatraz",
},
[109041] = {
"Naturalist Tel'arn",
"The Nighthold",
},
[145371] = {
"Uu'nat",
"Crucible of Storms",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[71158] = {
"Rik'kal the Dissector",
"Siege of Orgrimmar",
},
[152539] = {
"Dark Ranger Thandel",
"Siege of Orgrimmar - Coup Scenario",
},
[145372] = {
"Wild Mooncaller",
"Havenswood (Islands 2)",
},
[61436] = {
"Sik'thik Bladedancer",
"Siege of Niuzao Temple",
},
[31104] = {
"Ahn'kahar Watcher",
"Ahn'kahet: The Old Kingdom",
},
[167898] = {
"Manifestation of Envy",
"Halls of Atonement",
},
[152540] = {
"Lyani Shadestalker",
"Siege of Orgrimmar - Coup Scenario",
},
[155612] = {
"Azsh'ari Channeler",
"The Eternal Palace",
},
[16065] = {
"Lady Blaumeux",
"Naxxramas",
},
[16193] = {
"Skeletal Smith",
"Naxxramas",
},
[81398] = {
"Frostwall Goren Hatchling",
"FW Horde Garrison Level 2",
},
[99828] = {
"Trained Hawk",
"Halls of Valor",
},
[136160] = {
"King Dazar",
"Kings' Rest",
},
[71160] = {
"Iyyokuk the Lucid",
"Siege of Orgrimmar",
},
[222167] = {
"Brood Infuser",
"Nerub-ar Palace",
"enUS",
},
[62205] = {
"Wing Leader Ner'onok",
"Siege of Niuzao Temple",
},
[146401] = {
"Darkscale Dig-Slave",
"Warfronts Darkshore - Horde",
},
[155616] = {
"Zanj'ir Brute",
"The Eternal Palace",
},
[141282] = {
"Kul Tiran Footman",
"Siege of Boralus",
},
[71161] = {
"Kil'ruk the Wind-Reaver",
"Siege of Orgrimmar",
},
[140259] = {
"Runehoof Greatstag",
"Skittering Hollow (Islands 5)",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[20866] = {
"Soul Devourer",
"Tempest Keep: The Arcatraz",
},
[155618] = {
"Zanj'ir Huntress",
"The Eternal Palace",
},
[140260] = {
"Runehoof Courser",
"Skittering Hollow (Islands 5)",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[158690] = {
"Cultist Tormenter",
"Horrific Vision of Stormwind",
},
[155619] = {
"Zanj'ir Honor Guard",
"The Eternal Palace",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[54015] = {
"Majordomo Staghelm",
"Firelands",
},
[23682] = {
"Headless Horseman",
"Scarlet Monastery",
},
[112118] = {
"Tainted Bloodpetal",
"The Emerald Nightmare",
},
[73723] = {
"Jun-Wei",
"Siege of Orgrimmar",
},
[140263] = {
"Runehoof Stag",
"Skittering Hollow (Islands 5)",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
"enUS",
},
[102392] = {
"Resonance Totem",
"Crucible of Storms",
},
[127477] = {
"Saltwater Snapper",
"Tol Dagor",
},
[172005] = {
"Furrowed Colossus",
"Torghast, Tower of the Damned",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[146409] = {
"Lady Jaina Proudmoore",
"Battle of Dazar'alor",
},
[140266] = {
"Broken-Horn the Ancient",
"Skittering Hollow (Islands 5)",
},
[223200] = {
"Blood Collector",
"Nerub-ar Palace",
"enUS",
},
[19843] = {
"Nethervine Trickster",
"Tempest Keep: The Botanica",
"enUS",
},
[129526] = {
"Bilge Rat Swabby",
"Freehold",
},
[28546] = {
"Ionar",
"Halls of Lightning",
},
[73725] = {
"Xiang-Lin",
"Siege of Orgrimmar",
},
[20867] = {
"Death Watcher",
"Tempest Keep: The Arcatraz",
},
[21251] = {
"Underbog Colossus",
"Coilfang: Serpentshrine Cavern",
},
[127479] = {
"The Sand Queen",
"Tol Dagor",
},
[129015] = {
"Southsea Third Mate",
"Jorundall (Islands 7)",
},
[30338] = {
"Ahn'kahar Swarmer",
"Ahn'kahet: The Old Kingdom",
},
[155628] = {
"Azsh'ari Oracle",
"The Eternal Palace",
},
[127480] = {
"Stinging Parasite",
"Tol Dagor",
},
[223204] = {
"Chamber Guardian",
"Nerub-ar Palace",
"enUS",
},
[129016] = {
"Southsea Musketeer",
"Jorundall (Islands 7)",
},
[16194] = {
"Unholy Axe",
"Naxxramas",
},
[155629] = {
"Azsh'ari Stormbinder",
"The Eternal Palace",
},
[156653] = {
"Coagulated Horror",
"Horrific Vision of Orgrimmar",
},
[147439] = {
"Molten Hound",
"Battle of Dazar'alor",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[36612] = {
"Lord Marrowgar",
"Icecrown Citadel",
},
[147440] = {
"Blazing Fireguard",
"Battle of Dazar'alor",
},
[223207] = {
"Black Blood",
"Nerub-ar Palace",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[127482] = {
"Sewer Vicejaw",
"Tol Dagor",
},
[28547] = {
"Storming Vortex",
"Halls of Lightning",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[20868] = {
"Entropic Eye",
"Tempest Keep: The Arcatraz",
},
[137204] = {
"Hoodoo Hexer",
"Temple of Sethraliss",
},
[220138] = {
"Regurgitating Monstrosity",
"Nerub-ar Palace",
"enUS",
},
[21508] = {
"Coilfang Frenzy",
"Coilfang: Serpentshrine Cavern",
},
[142324] = {
"Bluefin Dolphin",
"Jorundall (Islands 7)",
},
[72194] = {
"Hellscream Demolisher",
"Siege of Orgrimmar",
},
[220139] = {
"Slithering Spew",
"Nerub-ar Palace",
"enUS",
},
[61442] = {
"Kuai the Brute",
"Mogu'shan Palace",
},
[108542] = {
"Skittering Spiderling",
"The Emerald Nightmare",
},
[23172] = {
"Hand of Gorefiend",
"Black Temple",
"enUS",
},
[127484] = {
"Jes Howlis",
"Tol Dagor",
},
[112638] = {
"Astral Defender",
"The Nighthold",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[16389] = {
"Spectral Apprentice",
"Karazhan",
},
[145399] = {
"Wild Starcaller",
"Havenswood (Islands 2)",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[168949] = {
"Risen Bonesoldier",
"De Other Side",
},
[122366] = {
"Varimathras",
"Antorus, the Burning Throne",
},
[172021] = {
"Coldheart Automaton",
"Torghast, Tower of the Damned",
},
[37126] = {
"Sister Svalna",
"Icecrown Citadel",
},
[174069] = {
"Hulking Gargon",
"Castle Nathria",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[127486] = {
"Ashvane Officer",
"Tol Dagor",
},
[174070] = {
"Kennel Overseer",
"Castle Nathria",
},
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[145402] = {
"Frenzied Wildheart",
"Havenswood (Islands 2)",
},
[122367] = {
"Admiral Svirax",
"Antorus, the Burning Throne",
},
[222193] = {
"Hollow Frostweaver",
"Nerub-ar Palace",
"enUS",
},
[174071] = {
"Vicious Gargon",
"Castle Nathria",
},
[20869] = {
"Arcatraz Sentinel",
"Tempest Keep: The Arcatraz",
},
[124927] = {
"Jun-Ti",
"Whispering Reef (Islands 10)",
},
[21253] = {
"Tainted Water Elemental",
"Coilfang: Serpentshrine Cavern",
},
[43014] = {
"Imp",
"The Stonecore",
},
[164857] = {
"Spriggan Mendbender",
"De Other Side",
},
[45062] = {
"Oathsworn Scorpid Keeper",
"Lost City of the Tol'vir",
},
[37127] = {
"Ymirjar Frostbinder",
"Icecrown Citadel",
},
[22917] = {
"Illidan Stormrage",
"Black Temple",
"enUS",
},
[69639] = {
"Humming Crystal",
"Throne of Thunder",
},
[127488] = {
"Ashvane Flamecaster",
"Tol Dagor",
},
[16067] = {
"Deathcharger Steed",
"Naxxramas",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[73223] = {
"Pterrordax",
"Siege of Orgrimmar",
},
[16390] = {
"Deathchill Servant",
"Naxxramas",
},
[173051] = {
"Suppressor Xelors",
"Torghast, Tower of the Damned",
},
[33288] = {
"Yogg-Saron",
"Ulduar",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[17414] = {
"Shadowmoon Technician",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[142336] = {
"Pygmy Octopus",
"Verdant Wilds (Islands 8)",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[218103] = {
"Nerubian Lord",
"Skittering Breach",
"enUS",
},
[97285] = {
"Wind Rush Totem",
"Crucible of Storms",
},
[45063] = {
"Bonesnapper Scorpid",
"Lost City of the Tol'vir",
},
[61701] = {
"Sik'thik Warrior",
"Siege of Niuzao Temple",
},
[70153] = {
"Fungal Growth",
"Throne of Thunder",
},
[167935] = {
"Contagious Droplet",
"Plaguefall",
},
[20870] = {
"Zereketh the Unbound",
"Tempest Keep: The Arcatraz",
},
[34057] = {
"Assault Bot",
"Ulduar",
},
[29573] = {
"Drakkari Elemental",
"Gundrak",
},
[163841] = {
"Amalgamation of Flesh",
"Ny'alotha, the Waking City",
},
[29829] = {
"Drakkari Earthshaker",
"Gundrak",
},
[166913] = {
"Corrupted Guardian",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[168961] = {
"The Hungering Ones",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[146436] = {
"Tempting Siren",
"Battle of Dazar'alor",
},
[139269] = {
"Gloom Horror",
"Waycrest Manor",
},
[140293] = {
"Snowfur Snarler",
"Havenswood (Islands 2)",
},
[149508] = {
"Ice Blocked Nathanos",
"Battle of Dazar'alor",
},
[166914] = {
"Fallen Keeper",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[168962] = {
"Reborn Phoenix",
"Castle Nathria",
},
[69131] = {
"Frost King Malakk",
"Throne of Thunder",
},
[140294] = {
"Snowfur Wolf",
"Havenswood (Islands 2)",
},
[157700] = {
"Agustus Moulaine",
"Horrific Vision of Stormwind",
},
[166915] = {
"Possessed Tender",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[32517] = {
"Spirit Beast",
"Crucible of Storms",
},
[138247] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[140295] = {
"Snowfur Pup",
"Havenswood (Islands 2)",
},
[12420] = {
"Blackwing Mage",
"Blackwing Lair",
},
[69132] = {
"High Priestess Mar'li",
"Throne of Thunder",
},
[166917] = {
"Grove Wrecker",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[18311] = {
"Ethereal Crypt Raider",
"Auchindoun: Mana-Tombs",
"enUS",
},
[36874] = {
"Disturbed Glacial Revenant",
"Pit of Saron",
},
[123398] = {
"Garothi Annihilator",
"Antorus, the Burning Throne",
},
[215040] = {
"Kobyss Bonechewer",
"Tak-Rethan Abyss",
"enUS",
},
[38154] = {
"Warhawk",
"Icecrown Citadel",
},
[69133] = {
"Unharnessed Power",
"Throne of Thunder",
},
[155656] = {
"Misha",
"Horrific Vision of Orgrimmar",
},
[14020] = {
"Chromaggus",
"Blackwing Lair",
},
[168967] = {
"Gerwyn",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[155657] = {
"Huffer",
"Horrific Vision of Orgrimmar",
},
[166920] = {
"Blighted Servitor",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[168968] = {
"Plaguebound Fallen",
"Plaguefall",
},
[69134] = {
"Kazra'jin",
"Throne of Thunder",
},
[126983] = {
"Harlan Sweete",
"Freehold",
},
[29830] = {
"Living Mojo",
"Gundrak",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[168969] = {
"Gushing Slime",
"Plaguefall",
},
[73742] = {
"Thresher Turret",
"Siege of Orgrimmar",
},
[53513] = {
"Imprisoned Wraith",
"Nexus Legendary",
},
[149516] = {
"Blackpaw",
"Warfronts Darkshore - Horde",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[23047] = {
"Shadowmoon Soldier",
"Black Temple",
"enUS",
},
[117769] = {
"Felborne Spellbreaker",
"Tomb of Sargeras",
},
[138254] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[174090] = {
"Nathrian Hierarch",
"Castle Nathria",
},
[48906] = {
"Blaze of the Heavens",
"Lost City of the Tol'vir",
},
[157709] = {
"Dreliana",
"Blackwing Descent Scenario",
},
[167948] = {
"Infectious Monstrosity",
"Plaguefall",
},
[127497] = {
"Ashvane Warden",
"Tol Dagor",
},
[174092] = {
"Nathrian Gargon Rider",
"Castle Nathria",
},
[167949] = {
"Plague-Ridden Survivor",
"Plaguefall",
},
[168973] = {
"High Torturer Darithos",
"Castle Nathria",
},
[137233] = {
"Plague Toad",
"Temple of Sethraliss",
},
[36620] = {
"Soulguard Adept",
"The Forge of Souls",
},
[123402] = {
"Garothi Decimator",
"Antorus, the Burning Throne",
},
[174093] = {
"Nathrian Ranger",
"Castle Nathria",
},
[211977] = {
"Pack Mole",
"Darkflame Cleft",
"enUS",
},
[73745] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
},
[33293] = {
"XT-002 Deconstructor",
"Ulduar",
},
[228361] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[139284] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[165905] = {
"Son of Hakkar",
"De Other Side",
},
[150547] = {
"Scrapbone Grunter",
"Operation: Mechagon",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[36877] = {
"Wrathbone Skeleton",
"Pit of Saron",
},
[37133] = {
"Ymirjar Warlord",
"Icecrown Citadel",
},
[5763] = {
"Nightmare Ectoplasm",
"Wailing Caverns",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[219148] = {
"Skardyn Metamorphosis",
"Hall of Awakening",
"enUS",
},
[167955] = {
"Sanguine Cadet",
"Sanguine Depths",
},
[129548] = {
"Blacktooth Brute",
"Freehold",
},
[219149] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[222221] = {
"Swarmspike",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[175123] = {
"Warden Arkoban",
"Torghast, Tower of the Damned",
},
[33806] = {
"Void Beast",
"Ulduar",
},
[161813] = {
"K'thir Assassin",
"Chamber of Heart - Scenario",
},
[94737] = {
"7th Legion Battlemage",
"The Maw of Nashal",
},
[174100] = {
"Nathrian Singuard",
"Castle Nathria",
},
[166933] = {
"Ventun the Ravenous",
"Torghast, Tower of the Damned",
},
[112655] = {
"Celestial Acolyte",
"The Nighthold",
},
[18313] = {
"Ethereal Sorcerer",
"Auchindoun: Mana-Tombs",
"enUS",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[37134] = {
"Ymirjar Huntress",
"Icecrown Citadel",
},
[166934] = {
"Lor the Loyal",
"Torghast, Tower of the Damned",
},
[159767] = {
"Sanguimar",
"Ny'alotha, the Waking City",
},
[161815] = {
"K'thir Voidcaller",
"Chamber of Heart - Scenario",
},
[131099] = {
"Giggling Nettlevine",
"Whispering Reef (Islands 10)",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
"enUS",
},
[159768] = {
"Deresh of the Nothingness",
"Ny'alotha, the Waking City",
},
[129550] = {
"Bilge Rat Padfoot",
"Freehold",
},
[20873] = {
"Negaton Warp-Master",
"Tempest Keep: The Arcatraz",
},
[117264] = {
"Maiden of Valor",
"Tomb of Sargeras",
},
[117776] = {
"Shadow Council Warlock",
"Tomb of Sargeras",
},
[127503] = {
"Overseer Korgus",
"Tol Dagor",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[134173] = {
"Animated Droplet",
"Shrine of the Storm",
},
[151579] = {
"Shield Generator",
"Operation: Mechagon",
},
[130575] = {
"Wandering Axebeak",
"Battle of Dazar'alor",
},
[36879] = {
"Plagueborn Horror",
"Pit of Saron",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[167962] = {
"Defunct Dental Drill",
"De Other Side",
},
[168986] = {
"Skeletal Raptor",
"De Other Side",
},
[118289] = {
"Maiden of Vigilance",
"Tomb of Sargeras",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[224276] = {
"Twilight Enforcer",
"Grim Batol",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
"enUS",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[149535] = {
"Icebound Image",
"Battle of Dazar'alor",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
},
[72728] = {
"Kor'kron Blood Axe",
"Siege of Orgrimmar",
},
[53006] = {
"Spirit Link Totem",
"Crucible of Storms",
},
[61453] = {
"Mu'Shiba",
"Mogu'shan Palace",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[167966] = {
"Experimental Sludge",
"De Other Side",
},
[69657] = {
"Zeb'tula Beastcaller",
"Mogu Island Progression Events",
},
[140322] = {
"Stonehusk Broodwatcher",
"Skittering Hollow (Islands 5)",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[93719] = {
"Fel Commander Azgalor",
"Broken Shore Scenario",
},
[172064] = {
"Unstable Larva",
"Plaguefall",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[36881] = {
"Skeletal Slave",
"Pit of Saron",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
"enUS",
},
[152612] = {
"Subjugator Klontzas",
"Torghast, Tower of the Damned",
},
[140326] = {
"Stonehusk Swarmer",
"Skittering Hollow (Islands 5)",
},
[131112] = {
"Cutwater Striker",
"Tol Dagor",
},
[12422] = {
"Death Talon Dragonspawn",
"Blackwing Lair",
},
[109591] = {
"Felguard Legionnaire",
"Broken Shore Scenario",
},
[155686] = {
"Azsh'ari Venomwatcher",
"The Eternal Palace",
},
[43537] = {
"Stonecore Earthshaper",
"The Stonecore",
},
[154663] = {
"Gnome-Eating Droplet",
"Operation: Mechagon",
},
[54544] = {
"Echo of Tyrande",
"End Time",
},
[109592] = {
"Felguard Legionnaire",
"Broken Shore Scenario",
},
[155688] = {
"Azsh'ari Frostbinder",
"The Eternal Palace",
},
[14022] = {
"Corrupted Red Whelp",
"Blackwing Lair",
},
[130582] = {
"Despondent Scallywag",
"Tol Dagor",
},
[155689] = {
"Zanj'ir Gladiator",
"The Eternal Palace",
},
[148522] = {
"Ice Block",
"Battle of Dazar'alor",
},
[20875] = {
"Negaton Screamer",
"Tempest Keep: The Arcatraz",
},
[110617] = {
"Shadowsworn Harbinger",
"Broken Shore Scenario",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[112153] = {
"Dire Shaman",
"The Emerald Nightmare",
},
[112665] = {
"Nighthold Protector",
"The Nighthold",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[36627] = {
"Rotface",
"Icecrown Citadel",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[110618] = {
"Anchoring Crystal",
"Broken Shore Scenario",
},
[140334] = {
"Nightscale Coilfang",
"Havenswood (Islands 2)",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[140335] = {
"Nightscale Screecher",
"Havenswood (Islands 2)",
},
[99868] = {
"Fenryr",
"Halls of Valor",
},
[217126] = {
"Over-Indulged Patron",
"Cinderbrew Meadery",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[140336] = {
"Nightscale Wind Serpent",
"Verdant Wilds (Islands 8)",
},
[71712] = {
"Despair Spawn",
"Siege of Orgrimmar",
},
[152623] = {
"Underhold Grunt",
"Siege of Orgrimmar - Coup Scenario",
},
[44819] = {
"Siamat",
"Lost City of the Tol'vir",
},
[140337] = {
"Nightscale Hatchling",
"Havenswood (Islands 2)",
},
[131123] = {
"Enchanted Tiki Mask",
"Atal'Dazar",
},
[140338] = {
"Clutch Guardian Jinka'lo",
"Crestfall (Islands 11)",
},
[174126] = {
"Baron Duskhollow",
"Castle Nathria",
},
[129050] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
},
[140339] = {
"Vale Terror",
"The Rotting Mire (Islands 9)",
},
[34069] = {
"Molten Colossus",
"Ulduar",
},
[73250] = {
"Kor'kron Wild Gun",
"Siege of Orgrimmar",
},
[140341] = {
"Cloudscraper",
"Whispering Reef (Islands 10)",
},
[149556] = {
"Eternal Enforcer",
"Battle of Dazar'alor",
},
[23436] = {
"Image of Dementia",
"Black Temple",
"enUS",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[70179] = {
"Ritual Guard",
"Throne of Thunder",
},
[71715] = {
"Orgrimmar Faithful",
"Siege of Orgrimmar",
},
[163892] = {
"Rotting Slimeclaw",
"Plaguefall",
},
[16525] = {
"Spell Shade",
"Karazhan",
},
[149558] = {
"Jaina's Tide Elemental",
"Battle of Dazar'alor",
},
[227373] = {
"Vicious Spiderling",
"Earthcrawl Mines",
"enUS",
},
[158774] = {
"Broken Citizen",
"Horrific Vision of Stormwind",
},
[112671] = {
"Duskwatch Battle-Magus",
"The Nighthold",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[18317] = {
"Ethereal Priest",
"Auchindoun: Mana-Tombs",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[140345] = {
"Stormscreech",
"Havenswood (Islands 2)",
},
[136250] = {
"Hoodoo Hexer",
"Temple of Sethraliss",
},
[174134] = {
"Lord Evershade",
"Castle Nathria",
},
[14023] = {
"Corrupted Green Whelp",
"Blackwing Lair",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[146491] = {
"Phantom of Retribution",
"Battle of Dazar'alor",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[44566] = {
"Ozumat",
"Throne of the Tides",
},
[146492] = {
"Phantom of Rage",
"Battle of Dazar'alor",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[167994] = {
"Ossified Conscript",
"Theater of Pain",
},
[15687] = {
"Moroes",
"Karazhan",
},
[146493] = {
"Phantom of Slaughter",
"Battle of Dazar'alor",
},
[63508] = {
"Xuen",
"Crucible of Storms",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[151613] = {
"Anti-Personnel Squirrel",
"Operation: Mechagon",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[16526] = {
"Sorcerous Shade",
"Karazhan",
},
[158781] = {
"Shredded Psyche",
"Ny'alotha, the Waking City",
},
[112675] = {
"Duskwatch Sentinel",
"The Nighthold",
},
[72744] = {
"Kor'kron Skullsplitter",
"Siege of Orgrimmar",
},
[172093] = {
"Hearty Haunch",
"Plaguefall",
},
[37144] = {
"Skybreaker Marksman",
"Icecrown Citadel",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
},
[109604] = {
"Felguard Legionnaire",
"Broken Shore Scenario",
},
[172094] = {
"Dissectible Dessert",
"Plaguefall",
},
[140354] = {
"Brightscale Wind Serpent",
"Jorundall (Islands 7)",
},
[149569] = {
"Dazari Worshipper",
"Battle of Dazar'alor",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[10184] = {
"Onyxia",
"Onyxia's Lair",
},
[140355] = {
"Brightscale Screecher",
"Jorundall (Islands 7)",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[168001] = {
"Empowered Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[140357] = {
"Venomreaver",
"Jorundall (Islands 7)",
},
[134214] = {
"Riftblade Kelain",
"Jorundall (Islands 7)",
},
[168002] = {
"Empowered Mawsworn Shackler",
"Torghast, Tower of the Damned",
},
[152644] = {
"Deadsoul Drifter",
"Torghast, Tower of the Damned",
},
[23694] = {
"Pulsing Pumpkin",
"Scarlet Monastery",
},
[134215] = {
"Duskrunner Lorinas",
"Jorundall (Islands 7)",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[134216] = {
"Shadeweaver Zarra",
"Jorundall (Islands 7)",
},
[168004] = {
"Empowered Imperial Consular",
"Torghast, Tower of the Damned",
},
[136264] = {
"Half-Finished Mummy",
"Kings' Rest",
},
[219198] = {
"Ravenous Scarab",
"City of Threads",
"enUS",
},
[140360] = {
"Sunback",
"Havenswood (Islands 2)",
},
[217151] = {
"Dark Bombardier",
"Nightfall Sanctum",
"enUS",
},
[72236] = {
"Embodied Doubt",
"Siege of Orgrimmar",
},
[139337] = {
"Icetusk Blood-Drinker",
"The Rotting Mire (Islands 9)",
},
[140361] = {
"Darkshadow the Omen",
"Un'gol Ruins (Islands 1)",
},
[139338] = {
"Icetusk Prophet",
"The Rotting Mire (Islands 9)",
},
[140362] = {
"Shimmerwing",
"Crestfall (Islands 11)",
},
[39450] = {
"Trogg Dweller",
"Grim Batol",
"enUS",
},
[14024] = {
"Corrupted Blue Whelp",
"Blackwing Lair",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[72237] = {
"Embodied Fear",
"Siege of Orgrimmar",
},
[222273] = {
"Sureki Silkbow",
"Nerub-ar Palace",
"enUS",
},
[20879] = {
"Eredar Soul-Eater",
"Tempest Keep: The Arcatraz",
},
[33819] = {
"Twilight Frost Mage",
"Ulduar",
},
[21263] = {
"Greyheart Technician",
"Coilfang: Serpentshrine Cavern",
},
[139340] = {
"Icetusk Necromancer",
"Jorundall (Islands 7)",
},
[29838] = {
"Drakkari Rhino",
"Gundrak",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[135245] = {
"Bilge Rat Demolisher",
"Siege of Boralus",
"enUS",
},
[130087] = {
"Irontide Raider",
"Tol Dagor",
},
[139341] = {
"Icetusk Shadowcaster",
"Jorundall (Islands 7)",
},
[222275] = {
"Training Dummy",
"Nerub-ar Palace",
"enUS",
},
[135246] = {
"\"Stabby\" Lottie",
"Havenswood (Islands 2)",
},
[139342] = {
"Icetusk Warrior",
"Jorundall (Islands 7)",
},
[135247] = {
"Varigg",
"Havenswood (Islands 2)",
},
[24207] = {
"Army of the Dead",
"Isle of Conquest",
},
[139343] = {
"Icetusk Drudge",
"Jorundall (Islands 7)",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[151630] = {
"Void Ichor",
"Crucible of Storms",
},
[36892] = {
"Ymirjar Deathbringer",
"Pit of Saron",
},
[37148] = {
"Skybreaker Summoner",
"Icecrown Citadel",
},
[53786] = {
"Blazing Monstrosity",
"Firelands",
},
[152656] = {
"Deadsoul Stalker",
"Torghast, Tower of the Damned",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[140371] = {
"Egg-Tender Ny'xik",
"Whispering Reef (Islands 10)",
},
[20880] = {
"Eredar Deathbringer",
"Tempest Keep: The Arcatraz",
},
[127019] = {
"Training Dummy",
"Freehold",
},
[36893] = {
"Ymirjar Flamebearer",
"Pit of Saron",
},
[174161] = {
"Lady Sinsear",
"Castle Nathria",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[135254] = {
"Irontide Raider",
"Tol Dagor",
},
[174162] = {
"Countess Gloomveil",
"Castle Nathria",
},
[152661] = {
"Mawsworn Ward",
"Torghast, Tower of the Damned",
},
[139351] = {
"Shadowspeaker Angolo",
"Jorundall (Islands 7)",
},
[16529] = {
"Magical Horror",
"Karazhan",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
},
[33822] = {
"Twilight Guardian",
"Ulduar",
},
[111151] = {
"Midnight Siphoner",
"The Nighthold",
},
[149591] = {
"Rastari Marksman",
"Battle of Dazar'alor",
},
[53532] = {
"Twilight Riftweaver",
"Nexus Legendary",
},
[37662] = {
"Darkfallen Commander",
"Icecrown Citadel",
},
[168022] = {
"Slime Tentacle",
"Plaguefall",
},
[173142] = {
"Dread Feaster",
"Castle Nathria",
},
[14025] = {
"Corrupted Bronze Whelp",
"Blackwing Lair",
},
[170071] = {
"Mawsworn Shadestalker",
"Torghast, Tower of the Damned",
},
[139355] = {
"Guran the Frostblade",
"Whispering Reef (Islands 10)",
},
[33567] = {
"Deathsworn Zealot",
"Ulduar",
},
[33823] = {
"Twilight Slayer",
"Ulduar",
},
[71734] = {
"Sha of Pride",
"Siege of Orgrimmar",
},
[113201] = {
"Spirit Beast",
"Deepwind Gorge",
},
[139357] = {
"Icetusk Shambler",
"The Rotting Mire (Islands 9)",
},
[173145] = {
"Gorging Mite",
"Castle Nathria",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
},
[15689] = {
"Netherspite",
"Karazhan",
},
[173146] = {
"Winged Ravager",
"Castle Nathria",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[152669] = {
"Void Globule",
"Horrific Vision of Orgrimmar",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[90677] = {
"Wrathguard Dreadblade",
"Broken Shore Scenario",
},
[33824] = {
"Twilight Shadowblade",
"Ulduar",
},
[139360] = {
"Risen Icetusk Brute",
"The Rotting Mire (Islands 9)",
},
[223318] = {
"Devoted Worshipper",
"Nerub-ar Palace",
"enUS",
},
[60701] = {
"Zian of the Endless Shadow",
"Mogu'shan Vaults",
},
[36896] = {
"Stonespine Gargoyle",
"Pit of Saron",
},
[37664] = {
"Darkfallen Archmage",
"Icecrown Citadel",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
},
[72249] = {
"Galakras",
"Siege of Orgrimmar",
},
[56862] = {
"Drunken Hozen Brawler",
"Stormstout Brewery",
},
[174175] = {
"Loyal Stoneborn",
"Halls of Atonement",
},
[29713] = {
"Slad'ran Constrictor",
"Gundrak",
},
[70202] = {
"Manchu",
"Throne of Thunder",
},
[216155] = {
"Skittering Ambusher",
"Skittering Breach",
"enUS",
},
[53791] = {
"Blazing Monstrosity",
"Firelands",
},
[91704] = {
"Anchoring Crystal",
"Broken Shore Scenario",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[56863] = {
"Sleepy Hozen Brawler",
"Stormstout Brewery",
},
[65310] = {
"Turnip Punching Bag",
"Kings' Rest",
},
[148582] = {
"Stormbound Guardian",
"Battle of Dazar'alor",
},
[151654] = {
"Deuce Mecha-Buffer",
"Operation: Mechagon",
},
[60447] = {
"Krik'thik Saboteur",
"Gate of the Setting Sun",
},
[136297] = {
"Forgotten Denizen",
"Shrine of the Storm",
},
[44577] = {
"General Husam",
"Lost City of the Tol'vir",
},
[148584] = {
"Archmage Mordent Evenshade",
"Warfronts Darkshore - Horde",
},
[115767] = {
"Mistress Sassz'ine",
"Tomb of Sargeras",
},
[37666] = {
"Darkfallen Tactician",
"Icecrown Citadel",
},
[160871] = {
"Possessed Package",
"Horrific Vision of Orgrimmar",
},
[164967] = {
"Doctor Ickus",
"Plaguefall",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
},
[121399] = {
"Inquisitor Sebilus",
"Tomb of Sargeras",
},
[222305] = {
"Palace Guardian",
"Nerub-ar Palace",
"enUS",
},
[20883] = {
"Spiteful Temptress",
"Tempest Keep: The Arcatraz",
},
[151658] = {
"Strider Tonk",
"Operation: Mechagon",
},
[21395] = {
"Protean Spawn",
"Tempest Keep: The Arcatraz",
},
[70206] = {
"Untrained Quilen",
"Throne of Thunder",
},
[149611] = {
"Apetagonizer 3000",
"Battle of Dazar'alor",
},
[151659] = {
"Rocket Tonk",
"Operation: Mechagon",
},
[121400] = {
"Accusator Gnazh",
"Tomb of Sargeras",
},
[203877] = {
"Kobold Thwacker",
"The Waterworks",
"enUS",
},
[53793] = {
"Harbinger of Flame",
"Firelands",
},
[203878] = {
"Kobold Mystic",
"The Waterworks",
"enUS",
},
[56865] = {
"Aqua Dancer",
"Stormstout Brewery",
},
[24723] = {
"Selin Fireheart",
"Magisters' Terrace",
"enUS",
},
[33572] = {
"Steelforged Defender",
"Ulduar",
},
[148591] = {
"Prison Groundsman",
"Tol Dagor Scenario",
},
[170093] = {
"Mawsworn Seeker",
"Torghast, Tower of the Damned",
},
[148592] = {
"Prison Groundsman",
"Tol Dagor Scenario",
},
[157807] = {
"Mawsworn Soulweaver",
"Torghast, Tower of the Damned",
},
[111164] = {
"Twilight Stardancer",
"The Nighthold",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[157809] = {
"Mawsworn Darkcaster",
"Torghast, Tower of the Damned",
},
[34085] = {
"Forge Construct",
"Ulduar",
},
[76865] = {
"Beastlord Darmac",
"Blackrock Foundry",
},
[94271] = {
"Skyfire Engineer",
"The Maw of Nashal",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[72770] = {
"Kor'kron Dark Farseer",
"Siege of Orgrimmar",
},
[157811] = {
"Lilliam Sparkspindle",
"Horrific Vision of Stormwind",
},
[111166] = {
"Resolute Courtesan",
"The Nighthold",
},
[174194] = {
"Court Executor",
"Castle Nathria",
},
[142454] = {
"Ashtail Bandicoon",
"Battle of Dazar'alor",
},
[56867] = {
"Fiery Trickster",
"Stormstout Brewery",
},
[130620] = {
"Frostfencer Seraphi",
"Havenswood (Islands 2)",
},
[157813] = {
"Sprite Jumpsprocket",
"Horrific Vision of Stormwind",
},
[142455] = {
"Riverland Bronco",
"Battle of Dazar'alor",
},
[34086] = {
"Magma Rager",
"Ulduar",
},
[162933] = {
"Thought Harvester",
"Ny'alotha, the Waking City",
},
[139384] = {
"Slitherblade Striker",
"The Rotting Mire (Islands 9)",
},
[70212] = {
"Flaming Head",
"Throne of Thunder",
},
[146552] = {
"Kul Tiran Tideweaver",
"Battle of Dazar'alor",
},
[37158] = {
"Quel'Delar",
"Halls of Reflection",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[217200] = {
"Void Crystal Monstrosity",
"Hall of Awakening",
"enUS",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[69701] = {
"Anima Golem",
"Throne of Thunder",
},
[224368] = {
"Chamber Expeller",
"Nerub-ar Palace",
"enUS",
},
[129598] = {
"Freehold Pack Mule",
"Freehold",
},
[130622] = {
"Squallshaper Auran",
"Havenswood (Islands 2)",
},
[20885] = {
"Dalliah the Doomsayer",
"Tempest Keep: The Arcatraz",
},
[151674] = {
"Stinkfur Hopling",
"Snowblossom Village (Islands 3)",
},
[126527] = {
"Fel Portal",
"Antorus, the Burning Throne",
},
[94275] = {
"Skyfire Powder Monkey",
"The Maw of Nashal",
},
[59684] = {
"Hozen Party Animal",
"Stormstout Brewery",
},
[129599] = {
"Cutwater Knife Juggler",
"Freehold",
},
[156795] = {
"SI:7 Informant",
"Horrific Vision of Stormwind",
},
[151676] = {
"Stinkfur Hooligan",
"Snowblossom Village (Islands 3)",
},
[15691] = {
"The Curator",
"Karazhan",
},
[111170] = {
"Astral Farseer",
"The Nighthold",
},
[150653] = {
"Blackwater Behemoth",
"The Eternal Palace",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[16406] = {
"Phantom Attendant",
"Karazhan",
},
[139392] = {
"Mirelurk Saurok",
"The Rotting Mire (Islands 9)",
},
[148607] = {
"Kal'ia Pa'kuaya",
"Battle of Dazar'alor",
},
[60197] = {
"Training Dummy",
"Scarlet Monastery",
},
[151679] = {
"Stinkfur Thumper",
"Snowblossom Village (Islands 3)",
},
[152703] = {
"Walkie Shockie X1",
"Operation: Mechagon",
},
[138369] = {
"Footbomb Hooligan",
"The MOTHERLODE!!",
},
[163966] = {
"Dread Siphonist",
"Revendreth Scenario",
},
[61989] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
},
[151680] = {
"Orangetooth",
"Snowblossom Village (Islands 3)",
},
[152704] = {
"Crawling Corruption",
"Horrific Vision of Orgrimmar",
},
[139394] = {
"Mirelurk Bog Priest",
"The Dread Chain (Islands 4)",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
},
[139395] = {
"Mirelurk Bogtender",
"The Rotting Mire (Islands 9)",
},
[148610] = {
"Druid of the Branch",
"Warfronts Darkshore - Horde",
},
[157825] = {
"Crazed Tormenter",
"Horrific Vision of Orgrimmar",
},
[20886] = {
"Wrath-Scryer Soccothrates",
"Tempest Keep: The Arcatraz",
},
[139396] = {
"Mirelurk Guardian",
"The Rotting Mire (Islands 9)",
},
[148611] = {
"Yoru'cha",
"Battle of Dazar'alor",
},
[149635] = {
"Blooming Protector",
"Warfronts Darkshore - Horde",
},
[112709] = {
"Promenade Guard",
"The Nighthold",
},
[60710] = {
"Subetai the Swift",
"Mogu'shan Vaults",
},
[139397] = {
"Mirelurk Lurker",
"The Dread Chain (Islands 4)",
},
[152708] = {
"Mawsworn Seeker",
"Torghast, Tower of the Damned",
},
[23318] = {
"Ashtongue Rogue",
"Black Temple",
"enUS",
},
[139398] = {
"Mirelurk Assassin",
"The Rotting Mire (Islands 9)",
},
[148613] = {
"Commander Broadside",
"Battle of Dazar'alor",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
},
[175234] = {
"Tractus the Icebreaker",
"Torghast, Tower of the Damned",
},
[139399] = {
"Mirelurk Basher",
"The Rotting Mire (Islands 9)",
},
[148614] = {
"Kul Tiran Cannoneer",
"Battle of Dazar'alor",
},
[223357] = {
"Sureki Conscript",
"City of Threads",
"enUS",
},
[134280] = {
"Vindicator Baatul",
"Jorundall (Islands 7)",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[127045] = {
"Antoran Champion",
"Antorus, the Burning Throne",
},
[148615] = {
"Div'yane",
"Battle of Dazar'alor",
},
[151687] = {
"Shrieker",
"Snowblossom Village (Islands 3)",
},
[44841] = {
"Blight Beast",
"Throne of the Tides",
},
[45097] = {
"Oathsworn Tamer",
"Lost City of the Tol'vir",
},
[140425] = {
"Surefoot",
"Havenswood (Islands 2)",
},
[151688] = {
"Melonsmasher",
"Snowblossom Village (Islands 3)",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
},
[148617] = {
"Akunda the Devout",
"Battle of Dazar'alor",
},
[134283] = {
"Anchorite Lanna",
"Jorundall (Islands 7)",
},
[160904] = {
"Image of Absolution",
"Ny'alotha, the Waking City",
},
[173191] = {
"Soulstalker V'lara",
"Torghast, Tower of the Damned",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[139404] = {
"High Prophet Massas",
"The Rotting Mire (Islands 9)",
},
[148619] = {
"Echo of Akunda",
"Battle of Dazar'alor",
},
[36907] = {
"Wrathbone Siegesmith",
"Pit of Saron",
},
[140429] = {
"Drifthopper the Swift",
"Havenswood (Islands 2)",
},
[134286] = {
"Archmage Tamuura",
"Jorundall (Islands 7)",
},
[139406] = {
"Hassan the Bloody Scale",
"The Rotting Mire (Islands 9)",
},
[148621] = {
"Jek'kwa",
"Battle of Dazar'alor",
},
[16408] = {
"Phantom Valet",
"Karazhan",
},
[148622] = {
"Echo of Kimbul",
"Battle of Dazar'alor",
},
[33836] = {
"Bomb Bot",
"Ulduar",
},
[152718] = {
"Alleria Windrunner",
"Horrific Vision of Stormwind",
},
[155790] = {
"Mawsworn Acolyte",
"Torghast, Tower of the Damned",
},
[148623] = {
"Echo of Gonk",
"Battle of Dazar'alor",
},
[72784] = {
"Kor'kron Gunner",
"Siege of Orgrimmar",
},
[114251] = {
"Galindre",
"Return to Karazhan",
},
[155791] = {
"Horrific Shrieker",
"The Eternal Palace",
},
[148624] = {
"Echo of Pa'ku",
"Battle of Dazar'alor",
},
[127050] = {
"Fel Portal",
"Antorus, the Burning Throne",
},
[148625] = {
"Echo of Krag'wa",
"Battle of Dazar'alor",
},
[215177] = {
"Waximus",
"New Candle, New Hope",
"enUS",
},
[167055] = {
"Rot Flinger",
"The Necrotic Wake",
},
[217225] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[155793] = {
"Skeletal Remains",
"Torghast, Tower of the Damned",
},
[152722] = {
"Fallen Voidspeaker",
"Horrific Vision of Stormwind",
},
[156818] = {
"Wrathion",
"Ny'alotha, the Waking City",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[100943] = {
"Earthen Wall Totem",
"Battle of Dazar'alor",
},
[139414] = {
"Mire Priest Vassz",
"The Rotting Mire (Islands 9)",
},
[70227] = {
"Skittering Spiderling",
"Throne of Thunder",
},
[223372] = {
"Prime Slime",
"Nerub-ar Palace",
"enUS",
},
[11981] = {
"Flamegor",
"Blackwing Lair",
},
[112718] = {
"Sidereal Familiar",
"The Nighthold",
},
[56875] = {
"Krik'thik Demolisher",
"Gate of the Setting Sun",
},
[16409] = {
"Phantom Guest",
"Karazhan",
},
[33838] = {
"Enslaved Fire Elemental",
"Ulduar",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[148631] = {
"Unexploded Ordnance",
"Battle of Dazar'alor",
},
[72276] = {
"Amalgam of Corruption",
"Siege of Orgrimmar",
},
[139417] = {
"Rotwood the Cursed",
"The Rotting Mire (Islands 9)",
},
[140441] = {
"Muskflank Calf",
"The Dread Chain (Islands 4)",
},
[135322] = {
"The Golden Serpent",
"Kings' Rest",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[140442] = {
"Muskflank Yak",
"The Dread Chain (Islands 4)",
},
[19865] = {
"Mutate Horror",
"Tempest Keep: The Botanica",
"enUS",
},
[136347] = {
"Tidesage Initiate",
"Shrine of the Storm",
},
[56876] = {
"Krik'thik Sapper",
"Gate of the Setting Sun",
},
[130638] = {
"Vicejaw Crocolisk",
"Whispering Reef (Islands 10)",
},
[139419] = {
"High Oracle Asayza",
"The Rotting Mire (Islands 9)",
},
[140443] = {
"Muskflank Charger",
"Verdant Wilds (Islands 8)",
},
[140444] = {
"Muskflank Bull",
"Verdant Wilds (Islands 8)",
},
[227474] = {
"Ascension Researcher",
"The Underkeep",
"enUS",
},
[130639] = {
"Vicejaw Chomper",
"Whispering Reef (Islands 10)",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[56877] = {
"Raigonn",
"Gate of the Setting Sun",
},
[130640] = {
"Vicejaw Sawtooth",
"Whispering Reef (Islands 10)",
},
[16410] = {
"Spectral Retainer",
"Karazhan",
},
[140447] = {
"Demolishing Terror",
"Siege of Boralus",
},
[70232] = {
"Muckbat",
"Throne of Thunder",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[122450] = {
"Garothi Worldbreaker",
"Antorus, the Burning Throne",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[140449] = {
"Thickflank",
"Havenswood (Islands 2)",
},
[153760] = {
"Enthralled Footman",
"Horrific Vision of Stormwind",
},
[114260] = {
"Mrrgria",
"Return to Karazhan",
},
[122963] = {
"Rezan",
"Atal'Dazar",
},
[28825] = {
"Cyclone",
"Halls of Lightning",
},
[33329] = {
"Heart of the Deconstructor",
"Ulduar",
},
[104534] = {
"D'zorykx the Trapper",
"The Nighthold",
},
[146596] = {
"Darkscale Myrmidon",
"Warfronts Darkshore - Horde",
},
[139429] = {
"Stonebound Warrior",
"The Dread Chain (Islands 4)",
},
[123476] = {
"Hulking Demolisher",
"Antorus, the Burning Throne",
},
[168098] = {
"Empowered Coldheart Agent",
"Torghast, Tower of the Damned",
},
[226459] = {
"Glowmite",
"Fungal Folly",
"enUS",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[70235] = {
"Frozen Head",
"Throne of Thunder",
},
[216221] = {
"Earthen-Ward Sentinel",
"Hall of Awakening",
"enUS",
},
[168099] = {
"Empowered Coldheart Javelineer",
"Torghast, Tower of the Damned",
},
[170147] = {
"Volatile Memory",
"De Other Side",
},
[171171] = {
"Mawsworn Archer",
"Torghast, Tower of the Damned",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
},
[156837] = {
"Valeera Sanguinar",
"Horrific Vision of Stormwind",
},
[66652] = {
"Lesser Volatile Energy",
"Shado-Pan Monastery",
},
[171172] = {
"Mawsworn Shackler",
"Torghast, Tower of the Damned",
},
[70236] = {
"Zandalari Storm-Caller",
"Throne of Thunder",
},
[95833] = {
"Hyrja",
"Halls of Valor",
},
[168101] = {
"Empowered Deadsoul Shade",
"Torghast, Tower of the Damned",
},
[171173] = {
"Mawsworn Shadestalker",
"Torghast, Tower of the Damned",
},
[140457] = {
"Bramblefur Grazer",
"Havenswood (Islands 2)",
},
[168102] = {
"Empowered Deadsoul Echo",
"Torghast, Tower of the Damned",
},
[227487] = {
"Underkeep Technician",
"The Underkeep",
"enUS",
},
[77404] = {
"The Butcher",
"Highmaul",
},
[221344] = {
"Gloom Hatchling",
"Nerub-ar Palace",
"enUS",
},
[140458] = {
"Bramblefur Bull",
"Havenswood (Islands 2)",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[71773] = {
"Kor'kron Warshaman",
"Siege of Orgrimmar",
},
[114264] = {
"Midnight",
"Return to Karazhan",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
},
[28826] = {
"Stormfury Revenant",
"Halls of Lightning",
},
[3636] = {
"Deviate Ravager",
"Wailing Caverns",
},
[168104] = {
"Empowered Flameforge Master",
"Torghast, Tower of the Damned",
},
[160937] = {
"Night Terror",
"Ny'alotha, the Waking City",
},
[70238] = {
"Unblinking Eye",
"Throne of Thunder",
},
[60208] = {
"Hopling",
"Stormstout Brewery",
},
[168105] = {
"Empowered Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[114265] = {
"Gang Ruffian",
"Return to Karazhan",
},
[122968] = {
"Yazma",
"Atal'Dazar",
},
[123480] = {
"Antoran Champion",
"Antorus, the Burning Throne",
},
[22939] = {
"Temple Acolyte",
"Black Temple",
"enUS",
},
[168106] = {
"Empowered Mawsworn Guard",
"Torghast, Tower of the Damned",
},
[94812] = {
"7th Legion Paratrooper",
"The Maw of Nashal",
},
[168107] = {
"Empowered Mawsworn Interceptor",
"Torghast, Tower of the Damned",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[16540] = {
"Shadow Pillager",
"Karazhan",
},
[168108] = {
"Empowered Lumbering Creation",
"Torghast, Tower of the Damned",
},
[70240] = {
"Shan'ze Celestial Shaper",
"Throne of Thunder",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[52530] = {
"Alysrazor",
"Firelands",
},
[171181] = {
"Territorial Bladebeak",
"De Other Side",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
},
[168110] = {
"Empowered Imperial Duelist",
"Torghast, Tower of the Damned",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[168111] = {
"Empowered Imperial Curator",
"Torghast, Tower of the Damned",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[168112] = {
"General Kaal",
"Castle Nathria",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[139444] = {
"Necrolord Zian",
"The Dread Chain (Islands 4)",
},
[168113] = {
"General Grashaal",
"Castle Nathria",
},
[36661] = {
"Rimefang",
"Pit of Saron",
},
[139445] = {
"Tumat",
"The Dread Chain (Islands 4)",
},
[45620] = {
"Naz'jar Soldier",
"Throne of the Tides",
},
[23196] = {
"Bonechewer Behemoth",
"Black Temple",
"enUS",
},
[155828] = {
"Runecarved Colossus",
"Torghast, Tower of the Damned",
},
[11983] = {
"Firemaw",
"Blackwing Lair",
},
[203951] = {
"Kobold Skullface",
"The Waterworks",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[141495] = {
"Kul Tiran Footman",
"Siege of Boralus",
},
[171188] = {
"Plaguebound Devoted",
"Plaguefall",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[135353] = {
"Veteran Man O' War",
"Freehold",
},
[130653] = {
"Wanton Sapper",
"The MOTHERLODE!!",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[150712] = {
"Trixie Tazer",
"Operation: Mechagon",
},
[38454] = {
"Kinetic Bomb",
"Icecrown Citadel",
},
[148665] = {
"Rastari Royal Guard",
"Battle of Dazar'alor",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[56884] = {
"Corrupted Taran Zhu",
"Shado-Pan Monastery",
},
[82532] = {
"Krush",
"Highmaul",
},
[125535] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
},
[138428] = {
"Spitefin Myrmidon",
"Skittering Hollow (Islands 5)",
},
[148667] = {
"Rastari Punisher",
"Battle of Dazar'alor",
},
[128095] = {
"Sister of the Lash",
"Antorus, the Burning Throne",
},
[95843] = {
"King Haldor",
"Halls of Valor",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[138429] = {
"Spitefin Tidebinder",
"Whispering Reef (Islands 10)",
},
[82533] = {
"Smash",
"Highmaul",
},
[31260] = {
"Ymirjar Skycaller",
"Pit of Saron",
},
[227507] = {
"Sureki Skirmisher",
"Nerub-ar Palace",
"enUS",
},
[94820] = {
"Worgen Stalker",
"The Maw of Nashal",
},
[16414] = {
"Ghostly Steward",
"Karazhan",
},
[82534] = {
"Spike",
"Highmaul",
},
[151742] = {
"Void-Twisted Invader",
"Eastern Kingdoms - Vermillion Redoubt - HoA Scenario",
},
[70248] = {
"Arcane Head",
"Throne of Thunder",
},
[139457] = {
"Stonebound Quilen",
"The Dread Chain (Islands 4)",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[138434] = {
"Spitefin Tempest Witch",
"Whispering Reef (Islands 10)",
},
[19486] = {
"Sunseeker Chemist",
"Tempest Keep: The Botanica",
"enUS",
},
[148673] = {
"Vessel of Bwonsamdi",
"Battle of Dazar'alor",
},
[166079] = {
"Brittlebone Crossbowman",
"The Necrotic Wake",
"enUS",
},
[122467] = {
"Asara, Mother of Night",
"Antorus, the Burning Throne",
},
[139459] = {
"Stonebound Soldier",
"The Dread Chain (Islands 4)",
},
[227513] = {
"Tala",
"Earthcrawl Mines",
"enUS",
},
[42808] = {
"Stonecore Flayer",
"The Stonecore",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[156866] = {
"Ra-den",
"Ny'alotha, the Waking City",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[210108] = {
"E.D.N.A",
"The Stonevault",
"enUS",
},
[72810] = {
"Staff of Resonating Water",
"Siege of Orgrimmar",
},
[122468] = {
"Noura, Mother of Flames",
"Antorus, the Burning Throne",
},
[139461] = {
"Stonebound Rockmaw",
"Verdant Wilds (Islands 8)",
},
[135366] = {
"Blacktooth Arsonist",
"Tol Dagor",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[76906] = {
"Operator Thogar",
"Blackrock Foundry",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[139462] = {
"Stonebound Shale-Speaker",
"Whispering Reef (Islands 10)",
},
[165059] = {
"Crimson Protector",
"Castle Nathria Scenario",
},
[136391] = {
"Heart Guardian",
"Temple of Sethraliss",
},
[122469] = {
"Diima, Mother of Gloom",
"Antorus, the Burning Throne",
},
[139463] = {
"Stonebound Annihilator",
"The Dread Chain (Islands 4)",
},
[165060] = {
"Animimic",
"Torghast, Tower of the Damned",
},
[118374] = {
"Captain Yathae Moonstrike",
"Tomb of Sargeras",
},
[139464] = {
"Zian-Ti Howler",
"The Dread Chain (Islands 4)",
},
[165061] = {
"Crimson Assassin",
"Castle Nathria Scenario",
},
[167109] = {
"Skeletal Vanguard",
"The Necrotic Wake",
},
[169157] = {
"Mudlump",
"Castle Nathria",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[151752] = {
"Voidswarm",
"Emerald Dream - HoA Scenario",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[114792] = {
"Virtuous Lady",
"Return to Karazhan",
},
[151754] = {
"Void Haunt",
"Emerald Dream - HoA Scenario",
},
[218306] = {
"Scarab Captain Vul'akan",
"Nerub-ar Palace",
"enUS",
},
[138444] = {
"General Vesparak",
"Whispering Reef (Islands 10)",
},
[139468] = {
"Spineripper Ku-Kon",
"Verdant Wilds (Islands 8)",
},
[111721] = {
"Venomous Spiderling",
"The Emerald Nightmare",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
"enUS",
},
[151755] = {
"Shadehound",
"Emerald Dream - HoA Scenario",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[61240] = {
"Glintrok Skulker",
"Mogu'shan Palace",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[165066] = {
"Huntsman Altimor",
"Castle Nathria",
},
[54073] = {
"Flamewaker Hound Master",
"Firelands",
},
[165067] = {
"Margore",
"Castle Nathria",
},
[129640] = {
"Snarling Dockhound",
"Siege of Boralus",
"enUS",
},
[139471] = {
"Bugan the Flesh-Crusher",
"Whispering Reef (Islands 10)",
},
[16544] = {
"Ethereal Thief",
"Karazhan",
},
[167116] = {
"Spinemaw Reaver",
"Mists of Tirna Scithe",
"enUS",
},
[125545] = {
"Blazing Imp",
"Antorus, the Burning Throne",
},
[59705] = {
"Scarlet Flamethrower",
"Scarlet Monastery",
},
[167117] = {
"Spinemaw Larva",
"Mists of Tirna Scithe",
"enUS",
},
[145616] = {
"King Rastakhan",
"Battle of Dazar'alor",
},
[122986] = {
"Wild Skyscreamer",
"Atal'Dazar",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[139474] = {
"Qor-Xin the Earth-Caller",
"Un'gol Ruins (Islands 1)",
},
[157904] = {
"Aqir Scarab",
"Horrific Vision of Orgrimmar",
},
[19872] = {
"Lady Catriona Von'Indi",
"Karazhan",
},
[56890] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
},
[114284] = {
"Elfyra",
"Return to Karazhan",
},
[139475] = {
"Jade-Formed Bonesnapper",
"Verdant Wilds (Islands 8)",
},
[20896] = {
"Ethereum Slayer",
"Tempest Keep: The Arcatraz",
},
[125547] = {
"Feltouched Skitterer",
"Antorus, the Burning Throne",
},
[30111] = {
"Twilight Worshipper",
"Ahn'kahet: The Old Kingdom",
},
[218315] = {
"Kaheti Sentry",
"Nerub-ar Palace",
"enUS",
},
[61242] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
},
[155859] = {
"Vizja'ra",
"The Eternal Palace",
},
[218316] = {
"Kaheti Vanguard",
"Nerub-ar Palace",
"enUS",
},
[156884] = {
"Essence of Vita",
"Ny'alotha, the Waking City",
},
[218317] = {
"Woven Threadmancer",
"Nerub-ar Palace",
"enUS",
},
[227532] = {
"Faceless Devotee",
"Skittering Breach",
"enUS",
},
[122477] = {
"F'harg",
"Antorus, the Burning Throne",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[69236] = {
"Shan'ze Soulripper",
"Mogu Island Progression Events",
},
[139480] = {
"Stonebound Protector",
"Verdant Wilds (Islands 8)",
},
[170197] = {
"Conjured Manifestation",
"Castle Nathria",
},
[61243] = {
"Gekkan",
"Mogu'shan Palace",
},
[218320] = {
"Web Acolyte",
"Nerub-ar Palace",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[19873] = {
"Lord Crispin Ference",
"Karazhan",
},
[56636] = {
"Commander Ri'mok",
"Gate of the Setting Sun",
},
[170199] = {
"Harnessed Specter",
"Castle Nathria",
},
[146650] = {
"Champion Sentinel",
"Warfronts Darkshore - Horde",
},
[33343] = {
"XS-013 Scrapbot",
"Ulduar",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[33855] = {
"Junk Bot",
"Ulduar",
},
[216275] = {
"Brann's Epic Egg",
"The Underkeep",
"enUS",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[114801] = {
"Spectral Apprentice",
"Return to Karazhan",
},
[22945] = {
"Shadowmoon Blood Mage",
"Black Temple",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[146653] = {
"Champion Hunter",
"Warfronts Darkshore - Horde",
},
[139486] = {
"Skycrack",
"The Dread Chain (Islands 4)",
},
[16017] = {
"Patchwork Golem",
"Naxxramas",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[218325] = {
"Swarming Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[114802] = {
"Spectral Journeyman",
"Return to Karazhan",
},
[33088] = {
"Iron Roots",
"Ulduar",
},
[33344] = {
"XM-024 Pummeller",
"Ulduar",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[138464] = {
"Ashvane Deckhand",
"Siege of Boralus",
"enUS",
},
[173276] = {
"Stone Legion Commando",
"Castle Nathria",
},
[133345] = {
"Feckless Assistant",
"The MOTHERLODE!!",
},
[160990] = {
"Image of Absolution",
"Ny'alotha, the Waking City",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[155871] = {
"Voidbound Terror",
"The Eternal Palace",
},
[146657] = {
"Veteran Sentinel",
"Warfronts Darkshore - Horde",
},
[64061] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
},
[19874] = {
"Baron Rafe Dreuger",
"Karazhan",
},
[138467] = {
"Obsidian Dragonkin",
"Verdant Wilds (Islands 8)",
},
[155873] = {
"Darkcast Annihilator",
"The Eternal Palace",
},
[28961] = {
"Titanium Siegebreaker",
"Halls of Lightning",
},
[20898] = {
"Gargantuan Abyssal",
"Tempest Keep: The Arcatraz",
},
[144611] = {
"Coralback Scuttler",
"The Eternal Palace",
},
[138468] = {
"Obsidian Flamecaller",
"Verdant Wilds (Islands 8)",
},
[173280] = {
"Stone Legion Skirmisher",
"Castle Nathria",
},
[162018] = {
"Temple Guard",
"Vision of Ysera Scenario",
},
[138469] = {
"Obsidian Scalebane",
"Un'gol Ruins (Islands 1)",
},
[22946] = {
"Shadowmoon War Hound",
"Black Temple",
"enUS",
},
[23330] = {
"Dragonmaw Wind Reaver",
"Black Temple",
"enUS",
},
[138470] = {
"Obsidian Drake",
"Verdant Wilds (Islands 8)",
},
[111222] = {
"Demonic Essence",
"The Nighthold",
},
[162020] = {
"Priestess of Elune",
"Vision of Ysera Scenario",
},
[138471] = {
"Obsidian Wyrmguard",
"Verdant Wilds (Islands 8)",
},
[33346] = {
"XE-321 Boombot",
"Ulduar",
},
[16803] = {
"Death Knight Understudy",
"Naxxramas",
},
[68220] = {
"Gastropod",
"Throne of Thunder",
},
[162021] = {
"Temple Archer",
"Vision of Ysera Scenario",
},
[69756] = {
"Anima Orb",
"Throne of Thunder",
},
[72828] = {
"Claw of Burning Anger",
"Siege of Orgrimmar",
},
[138473] = {
"Stygia",
"Verdant Wilds (Islands 8)",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[45377] = {
"Augh",
"Lost City of the Tol'vir",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[64063] = {
"Mogu'shan Arcanist",
"Mogu'shan Vaults",
},
[19875] = {
"Baroness Dorothea Millstipe",
"Karazhan",
},
[151785] = {
"Void-Twisted Wyrmkiller",
"Eastern Kingdoms - Vermillion Redoubt - HoA Scenario",
},
[152809] = {
"Alx'kov the Infested",
"Horrific Vision of Stormwind",
},
[219361] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[138475] = {
"Tyrantion",
"Un'gol Ruins (Islands 1)",
},
[3637] = {
"Deviate Guardian",
"Wailing Caverns",
},
[3653] = {
"Kresh",
"Wailing Caverns",
},
[68222] = {
"Bow Fly Swarm",
"Throne of Thunder",
},
[111225] = {
"Chaos Mage Beleron",
"The Nighthold",
},
[210148] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[145644] = {
"Bwonsamdi",
"Battle of Dazar'alor",
},
[73342] = {
"Fallen Pool Tender",
"Siege of Orgrimmar",
},
[45122] = {
"Oathsworn Captain",
"Lost City of the Tol'vir",
},
[148716] = {
"Risen Soul",
"Siege of Boralus",
},
[22947] = {
"Mother Shahraz",
"Black Temple",
"enUS",
},
[135406] = {
"Animated Gold",
"Kings' Rest",
},
[131311] = {
"Unleashed Azerite",
"Whispering Reef (Islands 10)",
},
[111226] = {
"Summoner Xiv",
"The Nighthold",
},
[16018] = {
"Bile Retcher",
"Naxxramas",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[16146] = {
"Death Knight",
"Naxxramas",
},
[123001] = {
"Dark Water",
"Havenswood (Islands 2)",
},
[169196] = {
"Crimson Cabalist",
"Castle Nathria",
},
[111227] = {
"Felweaver Pharamere",
"The Nighthold",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
},
[112251] = {
"Putrid Sludge",
"The Nighthold",
},
[162030] = {
"Darkwhisper Ritualist",
"Blackwing Descent Scenario",
},
[138481] = {
"Chromitus",
"Verdant Wilds (Islands 8)",
},
[45379] = {
"Augh",
"Lost City of the Tol'vir",
},
[152816] = {
"Stormling",
"The Eternal Palace",
},
[137458] = {
"Rotting Spore",
"The Underrot",
},
[19876] = {
"Lord Robin Daris",
"Karazhan",
},
[138483] = {
"Obsidian Monstrosity",
"Un'gol Ruins (Islands 1)",
},
[28835] = {
"Stormforged Construct",
"Halls of Lightning",
},
[134388] = {
"A Knot of Snakes",
"Temple of Sethraliss",
},
[138484] = {
"Obsidian Prophet",
"Havenswood (Islands 2)",
},
[59458] = {
"Hopling",
"Stormstout Brewery",
},
[214251] = {
"Kobyss Witherer",
"Tak-Rethan Abyss",
"enUS",
},
[134389] = {
"Venomous Ophidian",
"Temple of Sethraliss",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[61250] = {
"Sorcerer Mogu",
"Mogu'shan Vaults",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[134390] = {
"Sand-crusted Striker",
"Temple of Sethraliss",
},
[150773] = {
"Shimmerskin Pufferfish",
"The Eternal Palace",
},
[146678] = {
"Ancient Protector",
"Warfronts Darkshore - Horde",
},
[165108] = {
"Illusionary Clone",
"Mists of Tirna Scithe",
"enUS",
},
[12435] = {
"Razorgore the Untamed",
"Blackwing Lair",
},
[151798] = {
"Vexiona",
"Eastern Kingdoms - Vermillion Redoubt - HoA Scenario",
},
[59459] = {
"Hopling",
"Stormstout Brewery",
},
[112255] = {
"Sludgerax",
"The Nighthold",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[138489] = {
"Shadow of Zul",
"Kings' Rest",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[165111] = {
"Drust Spiteclaw",
"Mists of Tirna Scithe",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[73349] = {
"Tormented Initiate",
"Siege of Orgrimmar",
},
[28836] = {
"Stormforged Runeshaper",
"Halls of Lightning",
},
[142587] = {
"Devouring Maggot",
"Waycrest Manor",
},
[162041] = {
"Grubby Dirtcruncher",
"Sanguine Depths",
},
[59460] = {
"Hopling",
"Stormstout Brewery",
},
[88708] = {
"orag",
"Deepwind Gorge",
},
[138493] = {
"Minion of Zul",
"Kings' Rest",
},
[155899] = {
"Sak'ja",
"The Eternal Palace",
},
[141565] = {
"Kul Tiran Footman",
"Siege of Boralus",
},
[22949] = {
"Gathios the Shatterer",
"Black Temple",
"enUS",
},
[144637] = {
"Grong",
"Battle of Dazar'alor",
},
[170234] = {
"Oppressive Banner",
"Theater of Pain",
},
[172282] = {
"Web Wrap",
"Plaguefall",
},
[141566] = {
"Scrimshaw Gutter",
"Siege of Boralus",
},
[120449] = {
"Defensive Countermeasure",
"Tomb of Sargeras",
},
[121473] = {
"Coercitor Nixa",
"Tomb of Sargeras",
},
[121985] = {
"Flame of Taeshalach",
"Antorus, the Burning Throne",
},
[138495] = {
"Twilight Commander",
"Crestfall (Islands 11)",
},
[125569] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
},
[59461] = {
"Hopling",
"Stormstout Brewery",
},
[214263] = {
"Waxface",
"The Waterworks",
"enUS",
},
[162046] = {
"Famished Tick",
"Sanguine Depths",
},
[138497] = {
"Twilight Scalesworn",
"Crestfall (Islands 11)",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[125570] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[138498] = {
"Twilight Drake",
"Crestfall (Islands 11)",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[133379] = {
"Adderis",
"Temple of Sethraliss",
},
[112260] = {
"Dreadsoul Defiler",
"The Emerald Nightmare",
},
[152833] = {
"Azerite Giant",
"The Maelstrom - Heart of Azeroth",
},
[28581] = {
"Stormforged Tactician",
"Halls of Lightning",
},
[28837] = {
"Stormforged Sentinel",
"Halls of Lightning",
},
[28965] = {
"Titanium Thunderer",
"Halls of Lightning",
},
[20902] = {
"Sargeron Hellcaller",
"Tempest Keep: The Arcatraz",
},
[152834] = {
"Azerite Skitterer",
"The Maelstrom - Heart of Azeroth",
},
[162049] = {
"Vestige of Doubt",
"Sanguine Depths",
},
[138500] = {
"Twilight Scalesister",
"Jorundall (Islands 7)",
},
[174336] = {
"Kennel Overseer",
"Castle Nathria",
},
[112261] = {
"Dreadsoul Corruptor",
"The Emerald Nightmare",
},
[30245] = {
"Nexus Lord",
"The Eye of Eternity",
},
[152835] = {
"Crystalized Azerite",
"The Maelstrom - Heart of Azeroth",
},
[138501] = {
"Twilight Whelp",
"Jorundall (Islands 7)",
},
[53575] = {
"Lava Wielder",
"Firelands",
},
[22950] = {
"High Nethermancer Zerevor",
"Black Temple",
"enUS",
},
[151812] = {
"Detect-o-Bot",
"Operation: Mechagon",
},
[152836] = {
"Azerite Borer",
"The Maelstrom - Heart of Azeroth",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[174338] = {
"Stinky Feedhauler",
"Castle Nathria",
},
[194816] = {
"Forgewrought Monstrosity",
"Neltharus",
"enUS",
},
[222461] = {
"Congealed Mass",
"Nerub-ar Palace",
"enUS",
},
[133384] = {
"Merektha",
"Temple of Sethraliss",
},
[151814] = {
"Deadsoul Shade",
"Torghast, Tower of the Damned",
},
[163077] = {
"Azules",
"Spires of Ascension",
},
[17447] = {
"grizette",
"Temple of Kotmogu",
},
[151815] = {
"Deadsoul Echo",
"Torghast, Tower of the Damned",
},
[18343] = {
"Tavarok",
"Auchindoun: Mana-Tombs",
"enUS",
},
[216320] = {
"The Coaglamation",
"City of Threads",
"enUS",
},
[151816] = {
"Deadsoul Scavenger",
"Torghast, Tower of the Damned",
},
[139530] = {
"Earth-Wrought Siegebreaker",
"The Rotting Mire (Islands 9)",
},
[151817] = {
"Deadsoul Devil",
"Torghast, Tower of the Damned",
},
[162056] = {
"Rockbound Sprite",
"Sanguine Depths",
},
[138507] = {
"Warlord Ultriss",
"Crestfall (Islands 11)",
},
[28838] = {
"Titanium Vanguard",
"Halls of Lightning",
},
[33355] = {
"Misguided Nymph",
"Ulduar",
},
[151818] = {
"Deadsoul Miscreation",
"Torghast, Tower of the Damned",
},
[101002] = {
"Krosus",
"The Nighthold",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[133389] = {
"Galvazzt",
"Temple of Sethraliss",
},
[162058] = {
"Ventunax",
"Spires of Ascension",
},
[223491] = {
"Flatcram Mite",
"Tak-Rethan Abyss",
"enUS",
},
[22951] = {
"Lady Malande",
"Black Temple",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[138510] = {
"Twilight Doomcaller",
"Jorundall (Islands 7)",
},
[16020] = {
"Mad Scientist",
"Naxxramas",
},
[224516] = {
"Skardyn Invader",
"The Stonevault",
"enUS",
},
[16148] = {
"Spectral Death Knight",
"Naxxramas",
},
[162060] = {
"Oryphrion",
"Spires of Ascension",
},
[16424] = {
"Spectral Sentry",
"Karazhan",
},
[162061] = {
"Devos",
"Spires of Ascension",
},
[139536] = {
"Zara'thik Drone",
"Jorundall (Islands 7)",
},
[140560] = {
"Blazeseeker",
"Verdant Wilds (Islands 8)",
},
[223494] = {
"Flatcram Eel",
"Tak-Rethan Abyss",
"enUS",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[155919] = {
"Stormling",
"The Eternal Palace",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[155920] = {
"Azsh'ari Galeblade",
"The Eternal Palace",
},
[216329] = {
"Congealed Droplet",
"City of Threads",
"enUS",
},
[217353] = {
"Master Machinist Dunstan",
"Hall of Awakening",
"enUS",
},
[56906] = {
"Saboteur Kip'tilak",
"Gate of the Setting Sun",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[139539] = {
"Tavok, Hammer of the Empress",
"Jorundall (Islands 7)",
},
[223497] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[20904] = {
"Warden Mellichar",
"Tempest Keep: The Arcatraz",
},
[192781] = {
"Ore Elemental",
"Neltharus",
"enUS",
},
[153874] = {
"Mawsworn Sentry",
"Torghast, Tower of the Damned",
},
[163089] = {
"Disgusting Refuse",
"Theater of Pain",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[223498] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[165138] = {
"Blight Bag",
"The Necrotic Wake",
"enUS",
},
[22952] = {
"Veras Darkshadow",
"Black Temple",
"enUS",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
},
[76946] = {
"Faultline",
"Blackrock Foundry",
},
[134423] = {
"Abyss Dweller",
"Shrine of the Storm",
},
[56395] = {
"Shado-Pan Novice",
"Shado-Pan Monastery",
},
[114318] = {
"Baron Rafe Dreuger",
"Return to Karazhan",
},
[16425] = {
"Phantom Guardsman",
"Karazhan",
},
[156949] = {
"Armsmaster Terenson",
"Horrific Vision of Stormwind",
},
[153878] = {
"Mawsworn Archer",
"Torghast, Tower of the Damned",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[104592] = {
"Nightmare Tentacle",
"The Emerald Nightmare",
},
[153879] = {
"Deadsoul Shadow",
"Torghast, Tower of the Damned",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[100497] = {
"Ursoc",
"The Emerald Nightmare",
},
[62795] = {
"Sik'thik Warden",
"Siege of Niuzao Temple",
},
[126094] = {
"Slitherblade Wavecaller",
"Whispering Reef (Islands 10)",
},
[120463] = {
"Undersea Custodian",
"Tomb of Sargeras",
},
[14101] = {
"Enraged Felguard",
"Blackwing Lair",
},
[114320] = {
"Lord Robin Daris",
"Return to Karazhan",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[127119] = {
"Freehold Deckhand",
"Freehold",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[114321] = {
"Lord Crispin Ference",
"Return to Karazhan",
},
[37711] = {
"Hungering Ghoul",
"Pit of Saron",
},
[151836] = {
"Void Horror",
"Emerald Dream - HoA Scenario",
},
[23337] = {
"Illidari Centurion",
"Black Temple",
"enUS",
},
[16021] = {
"Living Monstrosity",
"Naxxramas",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[16149] = {
"Spectral Horse",
"Naxxramas",
},
[153885] = {
"Deadsoul Shambler",
"Torghast, Tower of the Damned",
},
[106643] = {
"Elisande",
"The Nighthold",
},
[173339] = {
"Plaguebelcher",
"Plaguefall",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[118930] = {
"Ixallon the Soulbreaker",
"Tomb of Sargeras",
},
[52558] = {
"Lord Rhyolith",
"Firelands",
},
[37712] = {
"Deathwhisper Shadowcaster",
"Pit of Saron",
},
[147745] = {
"The Indomitable",
"Battle of Dazar'alor",
},
[136483] = {
"Ashvane Deckhand",
"Siege of Boralus",
"enUS",
},
[28585] = {
"Slag",
"Halls of Lightning",
},
[150818] = {
"Disturbed Blood Globule",
"Uldir Scenario",
},
[2630] = {
"Earthbind Totem",
"Magisters' Terrace",
"enUS",
},
[152866] = {
"Hardened Azerite",
"The Maelstrom - Heart of Azeroth",
},
[126099] = {
"Duskcoat Den-Mother",
"Skittering Hollow (Islands 5)",
},
[30249] = {
"Scion of Eternity",
"The Eye of Eternity",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[37713] = {
"Deathwhisper Torturer",
"Pit of Saron",
},
[127124] = {
"Freehold Barhand",
"Freehold",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[58959] = {
"Pip'tok",
"Crucible of Storms",
},
[78491] = {
"Brackenspore",
"Highmaul",
},
[144680] = {
"Frida Ironbellows",
"Battle of Dazar'alor",
},
[37970] = {
"Prince Valanar",
"Icecrown Citadel",
},
[125590] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
},
[56912] = {
"Krik'thik Engulfer",
"Gate of the Setting Sun",
},
[28586] = {
"General Bjarngrim",
"Halls of Lightning",
},
[155945] = {
"Gherus the Chained",
"Torghast, Tower of the Damned",
},
[3654] = {
"Mutanus the Devourer",
"Wailing Caverns",
},
[152874] = {
"Vez'okk the Lightless",
"Horrific Vision of Orgrimmar",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[146731] = {
"Zombie Dust Totem",
"Battle of Dazar'alor",
},
[52305] = {
"Toxic Husk",
"Zul'Gurub",
},
[152875] = {
"Massive Crusher",
"Torghast, Tower of the Damned",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[22955] = {
"Charming Patron",
"Black Temple",
"enUS",
},
[217380] = {
"Master Machinist Dunstan",
"Hall of Awakening",
"enUS",
},
[23339] = {
"Illidari Heartseeker",
"Black Temple",
"enUS",
},
[69791] = {
"Kokayy",
"Crucible of Storms",
},
[16022] = {
"Surgical Assistant",
"Naxxramas",
},
[120473] = {
"Tidescale Combatant",
"Tomb of Sargeras",
},
[16150] = {
"Spectral Rider",
"Naxxramas",
},
[72351] = {
"Dragonmaw Flagbearer",
"Siege of Orgrimmar",
},
[135472] = {
"Zanazal the Wise",
"Kings' Rest",
},
[69792] = {
"Kokayy",
"Crucible of Storms",
},
[52306] = {
"Tangled Vine",
"Zul'Gurub",
},
[121498] = {
"Twilight Soul",
"Tomb of Sargeras",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[155951] = {
"Ruffer",
"Horrific Vision of Orgrimmar",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[155952] = {
"Suffer",
"Horrific Vision of Orgrimmar",
},
[135475] = {
"Kula the Butcher",
"Kings' Rest",
},
[56658] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
},
[28587] = {
"Volkhan",
"Halls of Lightning",
},
[155953] = {
"C'Thuffer",
"Horrific Vision of Orgrimmar",
},
[20908] = {
"Akkiris Lightning-Waker",
"Tempest Keep: The Arcatraz",
},
[34133] = {
"Champion of Hodir",
"Ulduar",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
"enUS",
},
[173360] = {
"Plaguebelcher",
"Plaguefall",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[169265] = {
"Creepy Crawler",
"Plaguefall",
},
[105630] = {
"Eye of Gul'dan",
"The Nighthold",
},
[163122] = {
"Brittlebone Warrior",
"The Necrotic Wake",
"enUS",
},
[173361] = {
"Slimy Morsel",
"Plaguefall",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
},
[22956] = {
"Priestess of Torment",
"Black Temple",
"enUS",
},
[37973] = {
"Prince Taldaram",
"Icecrown Citadel",
},
[144693] = {
"Manceroy Flamefist",
"Battle of Dazar'alor",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[131383] = {
"Sporecaller Zancha",
"The Underrot",
},
[156980] = {
"Essence of Void",
"Ny'alotha, the Waking City",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[162100] = {
"Kryxis the Voracious",
"Sanguine Depths",
},
[65362] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[33110] = {
"Dark Rune Acolyte",
"Ulduar",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
},
[34134] = {
"Winter Revenant",
"Ulduar",
},
[70308] = {
"Soul-Fed Construct",
"Throne of Thunder",
},
[72356] = {
"Master Cannoneer Dagryn",
"Siege of Orgrimmar",
},
[162102] = {
"Grand Proctor Beryllia",
"Sanguine Depths",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[36950] = {
"Skybreaker Marine",
"Icecrown Citadel",
},
[168246] = {
"Reanimated Crossbowman",
"The Necrotic Wake",
"enUS",
},
[162103] = {
"Executor Tarvold",
"Sanguine Depths",
},
[72357] = {
"Lieutenant Krugruk",
"Siege of Orgrimmar",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[133436] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
},
[34135] = {
"Winter Rumbler",
"Ulduar",
},
[58964] = {
"Hrogrik",
"Crucible of Storms",
},
[138556] = {
"Tainted Ooze",
"Havenswood (Islands 2)",
},
[72358] = {
"Kor'kron Cannon",
"Siege of Orgrimmar",
},
[22957] = {
"Mistress of Dementia",
"Black Temple",
"enUS",
},
[138558] = {
"Faceless One",
"Havenswood (Islands 2)",
},
[112290] = {
"Horrid Eagle",
"The Emerald Nightmare",
},
[16151] = {
"Midnight",
"Karazhan",
},
[16215] = {
"Unholy Staff",
"Naxxramas",
},
[223541] = {
"Stolen Loader",
"Kriegval's Rest",
"enUS",
},
[160061] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
},
[58965] = {
"Zig-amal",
"Waycrest Manor",
},
[120482] = {
"Tidescale Seacaller",
"Tomb of Sargeras",
},
[112803] = {
"Astrologer Jarin",
"The Nighthold",
},
[140609] = {
"Ravenous Mako",
"Havenswood (Islands 2)",
},
[151872] = {
"Grip of Horror",
"Emerald Dream - HoA Scenario",
},
[146753] = {
"Kul Tiran Marine",
"Battle of Dazar'alor",
},
[112804] = {
"Trained Shadescale",
"The Nighthold",
},
[96934] = {
"Valarjar Trapper",
"Halls of Valor",
},
[32857] = {
"Stormcaller Brundir",
"Ulduar",
},
[33113] = {
"Flame Leviathan",
"Ulduar",
},
[58198] = {
"Shado-Pan Disciple",
"Shado-Pan Monastery",
},
[34137] = {
"Winter Jormungar",
"Ulduar",
},
[21806] = {
"Greyheart Spellbinder",
"Coilfang: Serpentshrine Cavern",
},
[52311] = {
"Venomguard Destroyer",
"Zul'Gurub",
},
[129699] = {
"Ludwig Von Tortollan",
"Freehold",
},
[146756] = {
"Energized Storm",
"Battle of Dazar'alor",
},
[124580] = {
"Grotto Terrapin",
"Havenswood (Islands 2)",
},
[162115] = {
"Koda Steelclaw",
"Vision of Ysera Scenario",
},
[229691] = {
"Swarmbot",
"Awakening The Machine",
"enUS",
},
[162116] = {
"Lyanis Moonfall",
"Vision of Ysera Scenario",
},
[124581] = {
"Spineshell Snapper",
"Havenswood (Islands 2)",
},
[162117] = {
"Tyrande Whisperwind",
"Vision of Ysera Scenario",
},
[59223] = {
"Brother Korloff",
"Scarlet Monastery",
},
[171333] = {
"Atal'ai Devoted",
"De Other Side",
},
[131402] = {
"Underrot Tick",
"The Underrot",
},
[124582] = {
"Chasm-Hunter",
"Whispering Reef (Islands 10)",
},
[229695] = {
"Corrupted Machinist",
"Awakening The Machine",
"enUS",
},
[151881] = {
"Abyssal Commander Sivara",
"The Eternal Palace",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[214338] = {
"Kobyss Spearfisher",
"Tak-Rethan Abyss",
"enUS",
},
[124583] = {
"Garnetback Worm",
"Whispering Reef (Islands 10)",
},
[225601] = {
"Mereldar Citizen",
"The Dawnbreaker",
"enUS",
},
[226625] = {
"Cave Skipper",
"Nightfall Sanctum",
"enUS",
},
[147787] = {
"7th Legion Battlemage",
"Battle of Dazar'alor",
},
[157002] = {
"Imperial Enforcer",
"Torghast, Tower of the Damned",
},
[150859] = {
"Za'qul",
"The Eternal Palace",
},
[113321] = {
"Shambling Hungerer",
"The Nighthold",
},
[157003] = {
"Imperial Duelist",
"Torghast, Tower of the Damned",
},
[22959] = {
"Ardent Host",
"Black Temple",
"enUS",
},
[23215] = {
"Ashtongue Sorcerer",
"Black Temple",
"enUS",
},
[164171] = {
"Honored Duelist",
"Revendreth Scenario",
},
[16024] = {
"Embalming Slime",
"Naxxramas",
},
[72367] = {
"Dragonmaw Tidal Shaman",
"Siege of Orgrimmar",
},
[146766] = {
"Greater Serpent Totem",
"Battle of Dazar'alor",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[152910] = {
"Queen Azshara",
"The Eternal Palace",
},
[138576] = {
"Faceless Tendril",
"Havenswood (Islands 2)",
},
[214343] = {
"Kobyss Trickster",
"Tak-Rethan Abyss",
"enUS",
},
[225606] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[218439] = {
"Sureki War Banner",
"Nerub-ar Palace",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[73904] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
},
[218440] = {
"Kaheti War Banner",
"Nerub-ar Palace",
"enUS",
},
[171342] = {
"Juvenile Runestag",
"De Other Side",
},
[131411] = {
"Venomscale Monitor",
"Havenswood (Islands 2)",
},
[121003] = {
"Rez the Tombwatcher",
"Tomb of Sargeras",
},
[138579] = {
"Giant Claw Tentacle",
"Havenswood (Islands 2)",
},
[20912] = {
"Harbinger Skyriss",
"Tempest Keep: The Arcatraz",
},
[164177] = {
"Royal Nightcloak",
"Revendreth Scenario",
},
[43612] = {
"High Prophet Barim",
"Lost City of the Tol'vir",
},
[52059] = {
"High Priestess Kilnara",
"Zul'Gurub",
},
[71858] = {
"Wavebinder Kardris",
"Siege of Orgrimmar",
},
[52571] = {
"Majordomo Staghelm",
"Firelands",
},
[204109] = {
"Cavernous Shrieker",
"The Waterworks",
"enUS",
},
[229706] = {
"Explosive Bomberbot",
"Awakening The Machine",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[158035] = {
"Magister Umbric",
"Horrific Vision of Stormwind",
},
[22960] = {
"Dragonmaw Wyrmcaller",
"Black Temple",
"enUS",
},
[125612] = {
"Felguard",
"Antorus, the Burning Throne",
},
[140630] = {
"Ornate Puffer",
"Verdant Wilds (Islands 8)",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
},
[71859] = {
"Earthbreaker Haromm",
"Siege of Orgrimmar",
},
[170323] = {
"General Grashaal",
"Revendreth Scenario",
},
[33118] = {
"Ignis the Furnace Master",
"Ulduar",
},
[42333] = {
"High Priestess Azil",
"The Stonecore",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[42845] = {
"Rock Borer",
"The Stonecore",
},
[140632] = {
"Scaleback Snapper",
"Verdant Wilds (Islands 8)",
},
[218447] = {
"Web Cocoon",
"Nerub-ar Palace",
"enUS",
},
[153943] = {
"Decimator Shiq'voth",
"Horrific Vision of Orgrimmar",
},
[19505] = {
"Sunseeker Channeler",
"Tempest Keep: The Botanica",
"enUS",
},
[157016] = {
"Imperial Archivist",
"Torghast, Tower of the Damned",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[56924] = {
"Inflamed Hozen Brawler",
"Stormstout Brewery",
},
[158041] = {
"N'Zoth the Corruptor",
"Ny'alotha, the Waking City",
},
[164185] = {
"Echelon",
"Halls of Atonement",
},
[43614] = {
"Lockmaw",
"Lost City of the Tol'vir",
},
[136541] = {
"Bile Oozeling",
"Waycrest Manor",
},
[16025] = {
"Stitched Giant",
"Naxxramas",
},
[164188] = {
"Horrific Figment",
"Horrific Vision of Orgrimmar",
},
[164189] = {
"Horrific Figment",
"Horrific Vision of Orgrimmar",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[44895] = {
"Augh",
"Lost City of the Tol'vir",
},
[210265] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[126642] = {
"Sandyback Crab",
"Siege of Boralus",
},
[164191] = {
"Noble Courtier",
"Revendreth Scenario",
},
[121011] = {
"Tidescale Witch",
"Tomb of Sargeras",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[140643] = {
"Ferocious Craghorn",
"The Dread Chain (Islands 4)",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[217435] = {
"Master Machinist Dunstan",
"Hall of Awakening",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[53087] = {
"Right Foot",
"Firelands",
},
[36961] = {
"Skybreaker Sergeant",
"Icecrown Citadel",
},
[37217] = {
"Precious",
"Icecrown Citadel",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[22962] = {
"Mistress of Woe",
"Black Temple",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[220508] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[131431] = {
"Safety Inspection Bot",
"The Dread Chain (Islands 4)",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[210270] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[56927] = {
"Hozen Party Animal",
"Stormstout Brewery",
},
[204127] = {
"Kobold Taskfinder",
"The Waterworks",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[33890] = {
"Brain of Yogg-Saron",
"Ulduar",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[220510] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[44897] = {
"Pygmy Scout",
"Lost City of the Tol'vir",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
},
[116407] = {
"Harjatan",
"Tomb of Sargeras",
},
[139626] = {
"Dredged Sailor",
"Shrine of the Storm",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[3527] = {
"Healing Stream Totem",
"Crucible of Storms",
},
[72893] = {
"Orgrimmar Peon",
"Siege of Orgrimmar",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[224609] = {
"Twilight Destroyer",
"Grim Batol",
"enUS",
},
[3671] = {
"Lady Anacondra",
"Wailing Caverns",
},
[21299] = {
"Coilfang Fathom-Witch",
"Coilfang: Serpentshrine Cavern",
},
[229729] = {
"Nullbot",
"Awakening The Machine",
"enUS",
},
[29874] = {
"Drakkari Inciter",
"Gundrak",
},
[152939] = {
"Boundless Corruption",
"Horrific Vision of Stormwind",
},
[44898] = {
"Pygmy Firebreather",
"Lost City of the Tol'vir",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[22963] = {
"Bonechewer Worker",
"Black Temple",
"enUS",
},
[222564] = {
"Rupturing Ooze",
"Nerub-ar Palace",
"enUS",
},
[87229] = {
"Iron Blood Mage",
"Highmaul",
},
[16154] = {
"Risen Squire",
"Naxxramas",
},
[56929] = {
"Krik'thik Protectorate",
"Gate of the Setting Sun",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[104636] = {
"Cenarius",
"The Emerald Nightmare",
},
[137585] = {
"Earthgrab Totem",
"Un'gol Ruins (Islands 1)",
},
[156015] = {
"Writhing Soulmass",
"Torghast, Tower of the Damned",
},
[140657] = {
"Craghorn Behemoth",
"The Dread Chain (Islands 4)",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[147825] = {
"7th Legion Medic",
"Battle of Dazar'alor",
},
[224616] = {
"Animated Shadow",
"The Dawnbreaker",
"enUS",
},
[160112] = {
"Stone Legion Nightblade",
"Revendreth Scenario",
},
[144754] = {
"Fa'thuul the Feared",
"Crucible of Storms",
},
[144755] = {
"Zaxasj the Speaker",
"Crucible of Storms",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[147827] = {
"7th Legion Marine",
"Battle of Dazar'alor",
},
[59746] = {
"Scarlet Centurion",
"Scarlet Monastery",
},
[52323] = {
"Chosen of Hethiss",
"Zul'Gurub",
},
[147828] = {
"7th Legion Cavalier",
"Battle of Dazar'alor",
},
[22964] = {
"Priestess of Delight",
"Black Temple",
"enUS",
},
[169330] = {
"Mucky Grunt",
"Revendreth Scenario",
},
[229739] = {
"Malfunctioning Pylon",
"Awakening The Machine",
"enUS",
},
[140662] = {
"Elder Greatfur",
"The Dread Chain (Islands 4)",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[161140] = {
"Bwemba",
"Horrific Vision of Orgrimmar",
},
[137591] = {
"Healing Tide Totem",
"Kings' Rest",
},
[214382] = {
"Whispering Monstrosity",
"11.0 - Priory Scenario",
"enUS",
},
[208239] = {
"Skittering Menace",
"Earthcrawl Mines",
"enUS",
},
[144759] = {
"Keeper Dagda",
"Warfronts Darkshore - Horde",
},
[111295] = {
"Domesticated Manasaber",
"The Nighthold",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[156023] = {
"Miniature Soulmass",
"Torghast, Tower of the Damned",
},
[208241] = {
"Ankle Biter",
"Earthcrawl Mines",
"enUS",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[19509] = {
"Sunseeker Harvester",
"Tempest Keep: The Botanica",
"enUS",
},
[70341] = {
"Tormented Spirit",
"Throne of Thunder",
},
[208242] = {
"Nerubian Darkcaster",
"Earthcrawl Mines",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
},
[166264] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[208243] = {
"Nerubian Slasher",
"The Underkeep",
"enUS",
},
[21301] = {
"Coilfang Shatterer",
"Coilfang: Serpentshrine Cavern",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[34919] = {
"7th Legion Infantry",
"Isle of Conquest",
},
[208244] = {
"Nerubian Threadmancer",
"The Underkeep",
"enUS",
},
[52325] = {
"Gurubashi Blood Drinker",
"Zul'Gurub",
},
[73414] = {
"Kor'kron Reaper",
"Siege of Orgrimmar",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
},
[140669] = {
"Rockmane Howler",
"Verdant Wilds (Islands 8)",
},
[166266] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[22965] = {
"Devoted Steward",
"Black Temple",
"enUS",
},
[144765] = {
"Asithra Diresong",
"Warfronts Darkshore - Horde",
},
[146813] = {
"Gunther the Gray",
"Havenswood (Islands 2)",
},
[72903] = {
"Kor'kron Siegemaster",
"Siege of Orgrimmar",
},
[138623] = {
"Amathet Archer",
"Havenswood (Islands 2)",
},
[32872] = {
"Runic Colossus",
"Ulduar",
},
[222581] = {
"Ruptured Ooze",
"Nerub-ar Palace",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[144767] = {
"Gonk's Aspect",
"Battle of Dazar'alor",
},
[132481] = {
"Kul Tiran Vanguard",
"Siege of Boralus",
},
[80071] = {
"Bladespire Sorcerer",
"Highmaul",
},
[80583] = {
"Pale Gloomstalker",
"FW Horde Garrison Level 1",
},
[61029] = {
"Primal Fire Elemental",
"Shrine of the Storm",
},
[146816] = {
"Sir Barton Brigham",
"Havenswood (Islands 2)",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[138626] = {
"Amathet Zealot",
"Havenswood (Islands 2)",
},
[216441] = {
"Pale Illusion",
"Tak-Rethan Abyss",
"enUS",
},
[56678] = {
"Jade Staff",
"Shado-Pan Monastery",
},
[139651] = {
"Coldlight Deepseer",
"Whispering Reef (Islands 10)",
},
[138628] = {
"Amathet Priest",
"Havenswood (Islands 2)",
},
[139652] = {
"Coldlight Coastrunner",
"Whispering Reef (Islands 10)",
},
[120516] = {
"Razorjaw Swiftfin",
"Tomb of Sargeras",
},
[52327] = {
"Gurubashi Shadow Hunter",
"Zul'Gurub",
},
[144772] = {
"Lady Tamakeen",
"Verdant Wilds (Islands 8)",
},
[44648] = {
"Unyielding Behemoth",
"Throne of the Tides",
},
[53095] = {
"Matriarch Fire Turtle",
"Firelands",
},
[36969] = {
"Skybreaker Rifleman",
"Icecrown Citadel",
},
[140677] = {
"Hulking Frostbeard",
"Skittering Hollow (Islands 5)",
},
[23222] = {
"Bonechewer Brawler",
"Black Temple",
"enUS",
},
[138630] = {
"Cleric Izzad",
"Havenswood (Islands 2)",
},
[139654] = {
"Dampscale Mudskipper",
"Whispering Reef (Islands 10)",
},
[165251] = {
"Illusionary Vulpin",
"Mists of Tirna Scithe",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[139655] = {
"Coldlight Seer",
"Whispering Reef (Islands 10)",
},
[140679] = {
"Frostbeard Wendigo",
"Skittering Hollow (Islands 5)",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
"enUS",
},
[139656] = {
"Coldlight Oracle",
"Whispering Reef (Islands 10)",
},
[173444] = {
"Caramain",
"Castle Nathria",
},
[13020] = {
"Vaelastrasz the Corrupt",
"Blackwing Lair",
},
[121030] = {
"Fan'verg the Vicious",
"Tomb of Sargeras",
},
[144776] = {
"Airyn Swiftfeet",
"Verdant Wilds (Islands 8)",
},
[53096] = {
"Fire Turtle Hatchling",
"Firelands",
},
[139657] = {
"Coldlight Shorestriker",
"Whispering Reef (Islands 10)",
},
[173445] = {
"Sindrel",
"Castle Nathria",
},
[135562] = {
"Venomous Ophidian",
"Temple of Sethraliss",
},
[139658] = {
"Coldlight Murkdweller",
"Whispering Reef (Islands 10)",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[139659] = {
"Dampscale Oracle",
"Whispering Reef (Islands 10)",
},
[146827] = {
"Feral Dog",
"Havenswood (Islands 2)",
},
[139660] = {
"Dampscale Murloc",
"Whispering Reef (Islands 10)",
},
[173448] = {
"Dragost",
"Castle Nathria",
},
[215427] = {
"Waxen Copy",
"New Candle, New Hope",
"enUS",
},
[146828] = {
"Feral Pup",
"Havenswood (Islands 2)",
},
[139661] = {
"Dampscale Forager",
"Whispering Reef (Islands 10)",
},
[23223] = {
"Bonechewer Spectator",
"Black Temple",
"enUS",
},
[137614] = {
"Demolishing Terror",
"Siege of Boralus",
"enUS",
},
[146829] = {
"Undying Guardian",
"Crucible of Storms",
},
[139662] = {
"Dampscale Raincaller",
"Whispering Reef (Islands 10)",
},
[158092] = {
"Fallen Heartpiercer",
"Horrific Vision of Stormwind",
},
[16156] = {
"Dark Touched Warrior",
"Naxxramas",
},
[144782] = {
"Brother Bruen",
"Verdant Wilds (Islands 8)",
},
[139663] = {
"Dampscale Reedweaver",
"Whispering Reef (Islands 10)",
},
[165260] = {
"Oozing Leftovers",
"Theater of Pain",
},
[33388] = {
"Dark Rune Guardian",
"Ulduar",
},
[136592] = {
"Flynn Fairwind",
"Skittering Hollow (Islands 5)",
},
[146831] = {
"Kul Tiran Stormbringer",
"Battle of Dazar'alor",
},
[139664] = {
"Dampscale Terrorfin",
"Whispering Reef (Islands 10)",
},
[60009] = {
"Feng the Accursed",
"Mogu'shan Vaults",
},
[17976] = {
"Commander Sarannis",
"Tempest Keep: The Botanica",
"enUS",
},
[138641] = {
"Kvaldir Dreadbringer",
"Verdant Wilds (Islands 8)",
},
[140689] = {
"Dreadfang Slitherer",
"Jorundall (Islands 7)",
},
[116939] = {
"Fallen Avatar",
"Tomb of Sargeras",
},
[146833] = {
"Necromancer Conjurer",
"Havenswood (Islands 2)",
},
[19512] = {
"Nethervine Reaper",
"Tempest Keep: The Botanica",
"enUS",
},
[140690] = {
"Dreadfang Viper",
"Jorundall (Islands 7)",
},
[138643] = {
"Kvaldir Berserker",
"Havenswood (Islands 2)",
},
[32877] = {
"Dark Rune Warbringer",
"Ulduar",
},
[140691] = {
"Giant Dreadfang",
"Jorundall (Islands 7)",
},
[138644] = {
"Kvaldir Cursewalker",
"Havenswood (Islands 2)",
},
[139668] = {
"Wavebinder Gorgl",
"Whispering Reef (Islands 10)",
},
[215435] = {
"Foreseer Xix'amon",
"Nerub-ar Palace",
"enUS",
},
[71378] = {
"Quilen Guardian",
"Siege of Orgrimmar",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
},
[138645] = {
"Kvaldir Soulflayer",
"Havenswood (Islands 2)",
},
[37229] = {
"Frostwarden Sorceress",
"Icecrown Citadel",
},
[54123] = {
"Echo of Sylvanas",
"End Time",
},
[5775] = {
"Verdan the Everliving",
"Wailing Caverns",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[138646] = {
"Kvaldir Mistcaller",
"Havenswood (Islands 2)",
},
[139670] = {
"Morgok",
"Whispering Reef (Islands 10)",
},
[55659] = {
"Wild Imp",
"Waycrest Manor",
},
[217485] = {
"Nightfall Lookout",
"Nightfall Sanctum",
"enUS",
},
[146838] = {
"Brittle Skeleton",
"Havenswood (Islands 2)",
},
[139671] = {
"Sharkslayer Mugluk",
"Whispering Reef (Islands 10)",
},
[33134] = {
"Sara",
"Ulduar",
},
[161173] = {
"Abyssal Watcher",
"Ny'alotha, the Waking City",
},
[139672] = {
"Gibberfin",
"Whispering Reef (Islands 10)",
},
[71380] = {
"Animated Stone Mogu",
"Siege of Orgrimmar",
},
[17977] = {
"Warp Splinter",
"Tempest Keep: The Botanica",
"enUS",
},
[218511] = {
"Forming Whispers",
"11.0 - Priory Scenario",
"enUS",
},
[137625] = {
"Demolishing Terror",
"Siege of Boralus",
"enUS",
},
[146840] = {
"Skeleton Guardian",
"Whispering Reef (Islands 10)",
},
[139673] = {
"Many-Teeth",
"Whispering Reef (Islands 10)",
},
[37230] = {
"Spire Frostwyrm",
"Icecrown Citadel",
},
[137626] = {
"Demolishing Terror",
"Siege of Boralus",
"enUS",
},
[138650] = {
"Tide-Lost Champion",
"Havenswood (Islands 2)",
},
[19513] = {
"Mutate Fear-Shrieker",
"Tempest Keep: The Botanica",
"enUS",
},
[217489] = {
"Anub'arash",
"Nerub-ar Palace",
"enUS",
},
[137627] = {
"Constricting Terror",
"Siege of Boralus",
"enUS",
},
[139675] = {
"Fathom-Seeker",
"Whispering Reef (Islands 10)",
},
[29240] = {
"Stormforged Lieutenant",
"Halls of Lightning",
},
[146843] = {
"Spiked Ghoul",
"Havenswood (Islands 2)",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[71382] = {
"Burial Urn",
"Siege of Orgrimmar",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
},
[152987] = {
"Faceless Willbreaker",
"Horrific Vision of Orgrimmar",
},
[154011] = {
"Armed Prisoner",
"Torghast, Tower of the Damned",
},
[146844] = {
"Olfkrig the Indentured",
"The Dread Chain (Islands 4)",
},
[229778] = {
"Automatic Ironstrider",
"Awakening The Machine",
"enUS",
},
[22841] = {
"Shade of Akama",
"Black Temple",
"enUS",
},
[152988] = {
"Faceless Shadowcaller",
"Horrific Vision of Orgrimmar",
},
[146845] = {
"Jared the Jagged",
"Verdant Wilds (Islands 8)",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[71383] = {
"Kor'thik Warcaller",
"Siege of Orgrimmar",
},
[143774] = {
"Revitalized Voodoo Totem",
"Shrine of the Storm",
},
[139679] = {
"Argl",
"Whispering Reef (Islands 10)",
},
[24761] = {
"Brightscale Wyrm",
"Magisters' Terrace",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
"enUS",
},
[17978] = {
"Thorngrin the Tender",
"Tempest Keep: The Botanica",
"enUS",
},
[72408] = {
"Anti-Air Turret",
"Siege of Orgrimmar",
},
[154015] = {
"Escaped Ritualist",
"Torghast, Tower of the Damned",
},
[122578] = {
"Kin'garoth",
"Antorus, the Burning Throne",
},
[229782] = {
"Awakened Phalanx",
"Awakening The Machine",
"enUS",
},
[53614] = {
"Ceredos",
"Nexus Legendary",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[68313] = {
"Roaming Fog",
"Throne of Thunder",
},
[154016] = {
"Prisonbreak Soulmender",
"Torghast, Tower of the Damned",
},
[171422] = {
"Arch-Suppressor Laguas",
"Torghast, Tower of the Damned",
},
[164255] = {
"Globgrog",
"Plaguefall",
},
[120019] = {
"Ryul the Fading",
"Tomb of Sargeras",
},
[71385] = {
"Sri'thik Bombardier",
"Siege of Orgrimmar",
},
[218521] = {
"Hazzk the Ascended",
"11.0 - Priory Scenario",
"enUS",
},
[146850] = {
"Grand Master Ulrich",
"Whispering Reef (Islands 10)",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[166304] = {
"Mistveil Stinger",
"Mists of Tirna Scithe",
"enUS",
},
[34161] = {
"Mechanostriker 54-A",
"Ulduar",
},
[154018] = {
"Prisonbreak Mauler",
"Torghast, Tower of the Damned",
},
[204188] = {
"Tomb-Raider Drywhisker",
"Kriegval's Rest",
"enUS",
},
[52079] = {
"Gurubashi Bloodrager",
"Zul'Gurub",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[146853] = {
"Kefolkis the Unburied",
"Havenswood (Islands 2)",
},
[72411] = {
"Kor'kron Provisioner",
"Siege of Orgrimmar",
},
[146854] = {
"Stella Darkpaw",
"Verdant Wilds (Islands 8)",
},
[32882] = {
"Jormungar Behemoth",
"Ulduar",
},
[24762] = {
"Sunblade Keeper",
"Magister's Terrace",
},
[144807] = {
"Ravenous Stalker",
"Battle of Dazar'alor",
},
[212383] = {
"Kobold Taskworker",
"Darkflame Cleft",
"enUS",
},
[164261] = {
"Hungering Destroyer",
"Castle Nathria",
},
[157094] = {
"Imperial Curator",
"Torghast, Tower of the Damned",
},
[17723] = {
"Bog Giant",
"Coilfang: The Underbog",
"enUS",
},
[71388] = {
"Amber-Encased Kunchong",
"Siege of Orgrimmar",
},
[72412] = {
"Kor'kron Grunt",
"Siege of Orgrimmar",
},
[73948] = {
"Commander Ik'tal",
"Siege of Orgrimmar",
},
[139690] = {
"Brineshell Seacaller",
"Whispering Reef (Islands 10)",
},
[79068] = {
"Iron Grunt",
"Highmaul",
},
[171431] = {
"Suppressor Vellon",
"Torghast, Tower of the Damned",
},
[139691] = {
"Brineshell Squallshaper",
"Whispering Reef (Islands 10)",
},
[33651] = {
"VX-001",
"Ulduar",
},
[160169] = {
"Honored Duelist",
"Revendreth Scenario",
},
[146859] = {
"Enslaved Rock Elemental",
"Jorundall (Islands 7)",
},
[119000] = {
"Dreadbeard",
"Jorundall (Islands 7)",
},
[148907] = {
"Prismatic Image",
"Battle of Dazar'alor",
},
[95451] = {
"Genn Greymane",
"The Maw of Nashal",
},
[104154] = {
"Gul'dan",
"The Nighthold",
},
[168361] = {
"Fen Hornet",
"Plaguefall",
},
[153003] = {
"Soul Fragment",
"Torghast, Tower of the Damned",
},
[44658] = {
"Deep Murloc Invader",
"Throne of the Tides",
},
[171433] = {
"Suppressor Cer",
"Torghast, Tower of the Damned",
},
[164266] = {
"Domina Venomblade",
"Plaguefall",
},
[157099] = {
"Imperial Censor",
"Torghast, Tower of the Damned",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[127192] = {
"Constellar Designate",
"Antorus, the Burning Throne",
},
[72927] = {
"Kovok",
"Siege of Orgrimmar",
},
[146862] = {
"Mistscorn Subjugator",
"Jorundall (Islands 7)",
},
[73951] = {
"Commander Tik",
"Siege of Orgrimmar",
},
[150958] = {
"Mawsworn Guard",
"Torghast, Tower of the Damned",
},
[34164] = {
"Mechagnome Battletank",
"Ulduar",
},
[154030] = {
"Oddly Large Mawrat",
"Torghast, Tower of the Damned",
},
[146863] = {
"Mistscorn Ravager",
"Jorundall (Islands 7)",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[17724] = {
"Underbat",
"Coilfang: The Underbog",
"enUS",
},
[216487] = {
"Skardyn Remnants",
"Hall of Awakening",
"enUS",
},
[168365] = {
"Fungret Shroomtender",
"Plaguefall",
},
[161198] = {
"Warpweaver Dushar",
"Horrific Vision of Orgrimmar",
},
[146864] = {
"Mistscorn Earthbinder",
"Jorundall (Islands 7)",
},
[132530] = {
"Kul Tiran Vanguard",
"Siege of Boralus",
},
[170414] = {
"Howling Spectre",
"Torghast, Tower of the Damned",
},
[139698] = {
"Clattercraw the Oracle",
"Whispering Reef (Islands 10)",
},
[71393] = {
"Mogu Shadow Ritualist",
"Siege of Orgrimmar",
},
[72929] = {
"Sra'thik Amber-Master",
"Siege of Orgrimmar",
},
[146866] = {
"Enslaved Frost Elemental",
"Jorundall (Islands 7)",
},
[32885] = {
"Captured Mercenary Soldier",
"Ulduar",
},
[28859] = {
"Malygos",
"The Eye of Eternity",
},
[146867] = {
"Mistscorn Sharphorn",
"Jorundall (Islands 7)",
},
[147891] = {
"Proudmoore Infantry",
"Tol Dagor Scenario",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[52339] = {
"Lesser Priest of Bethekk",
"Zul'Gurub",
},
[153011] = {
"Binder Baritas",
"Torghast, Tower of the Damned",
},
[122076] = {
"Snow Orb",
"Un'gol Ruins (Islands 1)",
},
[36725] = {
"Nerub'ar Broodkeeper",
"Icecrown Citadel",
},
[147892] = {
"Proudmoore Defender",
"Tol Dagor Scenario",
},
[53619] = {
"Druid of the Flame",
"Firelands",
},
[22844] = {
"Ashtongue Battlelord",
"Black Temple",
"enUS",
},
[217516] = {
"Nightfall Executor",
"Nightfall Sanctum",
"enUS",
},
[170418] = {
"Goxul the Devourer",
"Torghast, Tower of the Damned",
},
[147893] = {
"Proudmoore Sentry",
"Tol Dagor Scenario",
},
[150965] = {
"Mawsworn Shackler",
"Torghast, Tower of the Damned",
},
[217517] = {
"Nightfall Hopestealer",
"Nightfall Sanctum",
"enUS",
},
[32886] = {
"Dark Rune Acolyte",
"Ulduar",
},
[217518] = {
"Nightfall Inquisitor",
"Nightfall Sanctum",
"enUS",
},
[146871] = {
"Matriarch Nas'naya",
"Jorundall (Islands 7)",
},
[17725] = {
"Underbog Lurker",
"Coilfang: The Underbog",
"enUS",
},
[217519] = {
"Nightfall Shadeguard",
"Nightfall Sanctum",
"enUS",
},
[153015] = {
"Bound Soul",
"Torghast, Tower of the Damned",
},
[212400] = {
"Void Touched Elemental",
"The Stonevault",
"enUS",
},
[160183] = {
"Void Fanatic",
"Ny'alotha, the Waking City",
},
[148921] = {
"Kaldorei Glaive Thrower",
"Warfronts Darkshore - Horde",
},
[158136] = {
"Inquisitor Darkspeak",
"Horrific Vision of Stormwind",
},
[71397] = {
"Zar'thik Amber Priest",
"Siege of Orgrimmar",
},
[72421] = {
"Kor'kron Overseer",
"Siege of Orgrimmar",
},
[145850] = {
"Gilnean Defuser",
"Warfronts Darkshore - Horde",
},
[146874] = {
"Windcaller Mariah",
"Whispering Reef (Islands 10)",
},
[156089] = {
"Aqir Venomweaver",
"Horrific Vision of Orgrimmar",
},
[145851] = {
"Kaldorei Hippogryph Rider",
"Warfronts Darkshore - Horde",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[59764] = {
"Healing Tide Totem",
"Crucible of Storms",
},
[71398] = {
"Zar'thik Swarmer",
"Siege of Orgrimmar",
},
[22845] = {
"Ashtongue Mystic",
"Black Temple",
"enUS",
},
[212405] = {
"Aspiring Forgehand",
"The Stonevault",
"enUS",
},
[158140] = {
"Frenzied Rat",
"Horrific Vision of Stormwind",
},
[153022] = {
"Snang",
"Horrific Vision of Orgrimmar",
},
[69352] = {
"Vampiric Cave Bat",
"Throne of Thunder",
},
[111331] = {
"Lurking Horror",
"The Emerald Nightmare",
},
[17726] = {
"Wrathfin Myrmidon",
"Coilfang: The Underbog",
"enUS",
},
[104676] = {
"Waning Time Particle",
"The Nighthold",
},
[52598] = {
"Gurubashi Soul-Eater",
"Zul'Gurub",
},
[162238] = {
"Darkwhisper Cultist",
"Blackwing Descent Scenario",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
},
[97510] = {
"Soulbound Destructor",
"Broken Shore Scenario",
},
[171455] = {
"Stonewall Gargon",
"Sanguine Depths",
},
[213434] = {
"Sporbit",
"Fungal Folly",
"enUS",
},
[107237] = {
"Icy Enchantment",
"The Nighthold",
},
[161217] = {
"Aqir Skitterer",
"Ny'alotha, the Waking City",
},
[146883] = {
"Houndmaster Angvold",
"The Rotting Mire (Islands 9)",
},
[157122] = {
"Patrician Cromwell",
"Torghast, Tower of the Damned",
},
[158146] = {
"Fallen Riftwalker",
"Horrific Vision of Stormwind",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[161218] = {
"Aqir Crusher",
"Ny'alotha, the Waking City",
},
[146884] = {
"Warlord Hjelskard",
"The Rotting Mire (Islands 9)",
},
[22846] = {
"Ashtongue Stormcaller",
"Black Temple",
"enUS",
},
[144837] = {
"Darkshore Stag",
"Warfronts Darkshore - Horde",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[56439] = {
"Sha of Doubt",
"Temple of the Jade Serpent",
},
[72427] = {
"Orgrimmar Peon",
"Siege of Orgrimmar",
},
[146886] = {
"Hrolskald the Fetid",
"Jorundall (Islands 7)",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[144839] = {
"Whitetail Doe",
"Warfronts Darkshore - Horde",
},
[126181] = {
"Ramut the Black",
"Havenswood (Islands 2)",
},
[17727] = {
"Wrathfin Sentry",
"Coilfang: The Underbog",
"enUS",
},
[52088] = {
"Gurubashi Cauldron-Mixer",
"Zul'Gurub",
},
[153031] = {
"Elite Battlemage",
"Siege of Orgrimmar - Coup Scenario",
},
[122086] = {
"Slitherblade Ironscale",
"Whispering Reef (Islands 10)",
},
[171461] = {
"Blighted Servitor",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[134602] = {
"Shrouded Fang",
"Temple of Sethraliss",
},
[145865] = {
"Gilnean Musketeer",
"Warfronts Darkshore - Horde",
},
[146889] = {
"Fleshrot Deathwalker",
"Jorundall (Islands 7)",
},
[71405] = {
"Set'thik Wind Wielder",
"Siege of Orgrimmar",
},
[152009] = {
"Malfunctioning Scrapbot",
"Operation: Mechagon",
},
[144842] = {
"Tide Crawler",
"Warfronts Darkshore - Horde",
},
[72941] = {
"Dragonmaw Grunt",
"Siege of Orgrimmar",
},
[146890] = {
"Fleshrot Runeweaver",
"The Rotting Mire (Islands 9)",
},
[29630] = {
"Fanged Pit Viper",
"Gundrak",
},
[52089] = {
"Gurubashi Worker",
"Zul'Gurub",
},
[52345] = {
"Pride of Bethekk",
"Zul'Gurub",
},
[72942] = {
"Dragonmaw Flagbearer",
"Siege of Orgrimmar",
},
[44922] = {
"Oathsworn Axemaster",
"Lost City of the Tol'vir",
},
[148940] = {
"Kaldorei Chimaera",
"Warfronts Darkshore - Horde",
},
[22847] = {
"Ashtongue Primalist",
"Black Temple",
"enUS",
},
[168394] = {
"Slimy Morsel",
"Plaguefall",
},
[219588] = {
"Yes Man",
"Cinderbrew Meadery",
"enUS",
},
[146893] = {
"Fleshrot Mystic",
"Jorundall (Islands 7)",
},
[217541] = {
"Nightfall Initiate",
"Nightfall Sanctum",
"enUS",
},
[122089] = {
"Slitherblade Oracle",
"Whispering Reef (Islands 10)",
},
[146894] = {
"Fleshrot Cabalist",
"Jorundall (Islands 7)",
},
[158157] = {
"Overlord Mathias Shaw",
"Horrific Vision of Stormwind",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[161229] = {
"Aqir Venomweaver",
"Ny'alotha, the Waking City",
},
[126185] = {
"Zian-Ti Shadowcaster",
"The Dread Chain (Islands 4)",
},
[146895] = {
"Fleshrot Vandal",
"Jorundall (Islands 7)",
},
[158158] = {
"Forge-Guard Hurrul",
"Horrific Vision of Stormwind",
},
[71408] = {
"Kun-Da",
"Siege of Orgrimmar",
},
[36476] = {
"Ick",
"Pit of Saron",
},
[168398] = {
"Slimy Morsel",
"Plaguefall",
},
[144849] = {
"Darkscale Scout",
"Warfronts Darkshore - Horde",
},
[162255] = {
"Onyxian Warder",
"Onyxia's Lair",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[111852] = {
"Rothos",
"The Emerald Nightmare",
},
[71409] = {
"Commander Zak'tar",
"Siege of Orgrimmar",
},
[71921] = {
"Darkfang",
"Siege of Orgrimmar",
},
[144850] = {
"Darkscale Siren",
"Warfronts Darkshore - Horde",
},
[72945] = {
"Dragonmaw Bonecrusher",
"Siege of Orgrimmar",
},
[157137] = {
"Terror Tendril",
"Halls of Origination",
},
[134612] = {
"Grasping Tentacles",
"Shrine of the Storm",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[127723] = {
"Imperator Deconix",
"Antorus, the Burning Throne",
},
[72434] = {
"Treasury Guard",
"Siege of Orgrimmar",
},
[53115] = {
"Molten Lord",
"Firelands",
},
[147924] = {
"Geoshard",
"Skittering Hollow (Islands 5)",
},
[37501] = {
"Nerub'ar Champion",
"Icecrown Citadel",
},
[171474] = {
"Finger Food",
"Plaguefall",
},
[127724] = {
"Fanatical Pyromancer",
"Antorus, the Burning Throne",
},
[71923] = {
"Bloodclaw",
"Siege of Orgrimmar",
},
[12129] = {
"Onyxian Warder",
"Onyxia's Lair",
},
[72947] = {
"Kor'kron Demolisher",
"Siege of Orgrimmar",
},
[65402] = {
"Gurthan Swiftblade",
"Mogu'shan Palace",
},
[134616] = {
"Krolusk Pup",
"Temple of Sethraliss",
},
[170452] = {
"Essence Orb",
"Torghast, Tower of the Damned",
},
[155094] = {
"Mechagon Trooper",
"Operation: Mechagon",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
},
[140760] = {
"Earthliving Giant",
"Whispering Reef (Islands 10)",
},
[133593] = {
"Expert Technician",
"The MOTHERLODE!!",
},
[159190] = {
"Synod",
"Torghast, Tower of the Damned",
},
[52348] = {
"Berserking Boulder Roller",
"Zul'Gurub",
},
[136665] = {
"Ashvane Spotter",
"Tol Dagor",
},
[36478] = {
"Soulguard Watchman",
"The Forge of Souls",
},
[37502] = {
"Nerub'ar Webweaver",
"Icecrown Citadel",
},
[126190] = {
"Zian-Ti Brutalizer",
"The Dread Chain (Islands 4)",
},
[220624] = {
"Suspicious Niffen",
"Tak-Rethan Abyss",
"enUS",
},
[174550] = {
"Myskia",
"Revendreth Scenario",
},
[158169] = {
"Devout Disciple",
"Halls of Origination",
},
[161241] = {
"Voidweaver Mal'thir",
"Temple of Sethraliss",
},
[77557] = {
"Admiral Gar'an",
"Blackrock Foundry",
},
[98035] = {
"Dreadstalker",
"Crucible of Storms",
},
[147932] = {
"Agitated Azershard",
"Havenswood (Islands 2)",
},
[158171] = {
"Faceless Destroyer",
"Halls of Origination",
},
[161243] = {
"Samh'rek, Beckoner of Chaos",
"Temple of Sethraliss",
},
[147933] = {
"Geoactive Azershard",
"Jorundall (Islands 7)",
},
[111858] = {
"Guardian Rurson",
"The Emerald Nightmare",
},
[161244] = {
"Blood of the Corruptor",
"Temple of Sethraliss",
},
[146910] = {
"Fleshrot Plaguetalon",
"Jorundall (Islands 7)",
},
[146911] = {
"Fleshrot Blighthound",
"Jorundall (Islands 7)",
},
[34944] = {
"Keep Cannon",
"Isle of Conquest",
},
[43391] = {
"Millhouse Manastorm",
"The Stonecore",
},
[17730] = {
"Murkblood Healer",
"Coilfang: The Underbog",
"enUS",
},
[52606] = {
"Gurubashi Warmonger",
"Zul'Gurub",
},
[147936] = {
"Azergem Shardback",
"Whispering Reef (Islands 10)",
},
[53630] = {
"Unstable Pyrelord",
"Firelands",
},
[111860] = {
"Bo'lan the Marked",
"The Emerald Nightmare",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[147938] = {
"Azergem Crystalback",
"The Dread Chain (Islands 4)",
},
[148962] = {
"Ravenous Stalker",
"Battle of Dazar'alor",
},
[101110] = {
"Nether Ray",
"Crucible of Storms",
},
[59518] = {
"Bloated Brew Alemental",
"Stormstout Brewery",
},
[133605] = {
"Escaped Convict",
"Tol Dagor",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[153059] = {
"Aethanel",
"The Eternal Palace",
},
[154083] = {
"Trained Wolf",
"Siege of Orgrimmar - Coup Scenario",
},
[53119] = {
"Flamewaker Forward Guard",
"Firelands",
},
[156131] = {
"Zanj'ir Myrmidon",
"The Eternal Palace",
},
[53631] = {
"Cinderweb Spiderling",
"Firelands",
},
[54143] = {
"Molten Flamefather",
"Firelands",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[161251] = {
"Cultist Sycophant",
"Ny'alotha, the Waking City",
},
[85241] = {
"Night-Twisted Brute",
"Highmaul",
},
[111350] = {
"Skittering Shadows",
"The Emerald Nightmare",
},
[216541] = {
"Threadmaestro Fothis",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[118518] = {
"Priestess Lunaspyre",
"Tomb of Sargeras",
},
[157158] = {
"Cultist Slavedriver",
"Horrific Vision of Stormwind",
},
[71420] = {
"Hungry Kunchong",
"Siege of Orgrimmar",
},
[53120] = {
"Flamewaker Pathfinder",
"Firelands",
},
[61567] = {
"Vizier Jin'bak",
"Siege of Niuzao Temple",
},
[140777] = {
"Gemshard Colossus",
"The Dread Chain (Islands 4)",
},
[216544] = {
"Sureki String Leader",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[153064] = {
"Overzealous Hulk",
"The Eternal Palace",
},
[94970] = {
"Skyfire Gryphon Rider",
"The Maw of Nashal",
},
[56448] = {
"Wise Mari",
"Temple of the Jade Serpent",
},
[153065] = {
"Voidbound Ravager",
"Horrific Vision of Orgrimmar",
},
[145898] = {
"Anointed Disciple",
"Battle of Dazar'alor",
},
[217570] = {
"Speaker Halven",
"Nightfall Sanctum",
"enUS",
},
[3673] = {
"Lord Serpentis",
"Wailing Caverns",
},
[69374] = {
"War-God Jalak",
"Throne of Thunder",
},
[59520] = {
"Fizzy Brew Alemental",
"Stormstout Brewery",
},
[144876] = {
"Apetagonizer 3000",
"Battle of Dazar'alor",
},
[61056] = {
"Primal Earth Elemental",
"Crucible of Storms",
},
[53121] = {
"Flamewaker Cauterizer",
"Firelands",
},
[147948] = {
"Coagulated Azerite",
"The Dread Chain (Islands 4)",
},
[23235] = {
"Bonechewer Blade Fury",
"Black Temple",
"enUS",
},
[170474] = {
"Brood Assassin",
"Plaguefall",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[3977] = {
"High Inquisitor Whitemane",
"Scarlet Monastery",
},
[111354] = {
"Taintheart Befouler",
"The Emerald Nightmare",
},
[40579] = {
"Deep Murloc Hunter",
"Throne of the Tides",
},
[221669] = {
"Blight Swarmer",
"Nerub-ar Palace",
"enUS",
},
[214502] = {
"The Bloodbound Horror",
"Nerub-ar Palace",
"enUS",
},
[136688] = {
"Fanatical Driller",
"The MOTHERLODE!!",
},
[145903] = {
"Darkforged Crusader",
"Battle of Dazar'alor",
},
[171500] = {
"Shuffling Corpse",
"The Necrotic Wake",
"enUS",
},
[156142] = {
"Seeker of Souls",
"Torghast, Tower of the Damned",
},
[165357] = {
"Pestilence Slime",
"Plaguefall",
},
[60033] = {
"Frenzied Spirit",
"Scarlet Monastery",
},
[137713] = {
"Big Money Crab",
"The MOTHERLODE!!",
},
[156143] = {
"Voidcrazed Hulk",
"Horrific Vision of Orgrimmar",
},
[214504] = {
"Rasha'nan",
"Nerub-ar Palace",
"enUS",
},
[167406] = {
"Sire Denathrius",
"Castle Nathria",
},
[118523] = {
"Huntress Kasparian",
"Tomb of Sargeras",
},
[129786] = {
"Brineshell Makrura",
"Whispering Reef (Islands 10)",
},
[130298] = {
"Water Elemental",
"Verdant Wilds (Islands 8)",
},
[156145] = {
"Burrowing Appendage",
"Horrific Vision of Orgrimmar",
},
[214506] = {
"Broodtwister Ovi'nax",
"Nerub-ar Palace",
"enUS",
},
[216554] = {
"Sureki String Conductor",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
},
[138740] = {
"Musashitake",
"The Underrot",
},
[59522] = {
"Sudsy Brew Alemental",
"Stormstout Brewery",
},
[59778] = {
"Krik'thik Striker",
"Gate of the Setting Sun",
},
[216555] = {
"Heelripper",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[169457] = {
"Bargast",
"Castle Nathria",
},
[130299] = {
"Droplet",
"Havenswood (Islands 2)",
},
[44932] = {
"Oathsworn Pathfinder",
"Lost City of the Tol'vir",
},
[164338] = {
"Mawsworn Guard",
"Ardenweald Covenant Chapter 2 Scenario",
},
[53635] = {
"Cinderweb Drone",
"Firelands",
},
[159219] = {
"Umbral Seer",
"Ny'alotha, the Waking City",
},
[169458] = {
"Hecutis",
"Castle Nathria",
},
[63106] = {
"Sik'thik Swarmer",
"Siege of Niuzao Temple",
},
[110846] = {
"Cove Raven",
"The Maw of Nashal",
},
[151029] = {
"Thornspeaker Tavery",
"Snowblossom Village (Islands 3)",
},
[72451] = {
"Kor'kron Dark Shaman",
"Siege of Orgrimmar",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[33670] = {
"Aerial Command Unit",
"Ulduar",
},
[126205] = {
"Profit-O-Matic",
"The Dread Chain (Islands 4)",
},
[17477] = {
"Hellfire Imp",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[140792] = {
"Breakbeak Bonepicker",
"The Rotting Mire (Islands 9)",
},
[72452] = {
"Kor'kron Dire Wolf",
"Siege of Orgrimmar",
},
[72964] = {
"Goro'dan",
"Siege of Orgrimmar",
},
[36998] = {
"Skybreaker Protector",
"Icecrown Citadel",
},
[216560] = {
"Al'haggro",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[170486] = {
"Atal'ai Devoted",
"De Other Side",
},
[164343] = {
"Mawsworn Debilitator",
"Ardenweald Covenant Chapter 2 Scenario",
},
[159224] = {
"Gryth'ax the Executioner",
"Ny'alotha, the Waking City",
},
[113920] = {
"Flail of Il'gynoth",
"The Emerald Nightmare",
},
[123135] = {
"Ratzighan",
"Isle of Conquest",
},
[140795] = {
"Dunecircler the Bleak",
"Verdant Wilds (Islands 8)",
},
[160249] = {
"Spike Tentacle",
"Ny'alotha, the Waking City",
},
[34183] = {
"Arachnopod Destroyer",
"Ulduar",
},
[170488] = {
"Son of Hakkar",
"De Other Side",
},
[69382] = {
"Malignant Ooze",
"Throne of Thunder",
},
[164345] = {
"Scavenging Soul Eater",
"Ardenweald Covenant Chapter 2 Scenario",
},
[30276] = {
"Ahn'kahar Web Winder",
"Ahn'kahet: The Old Kingdom",
},
[72966] = {
"Resonating Amber",
"Siege of Orgrimmar",
},
[146940] = {
"Primordial Mindbender",
"Crucible of Storms",
},
[22853] = {
"Illidari Defiler",
"Black Temple",
"enUS",
},
[23237] = {
"Bonechewer Blood Prophet",
"Black Temple",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[69383] = {
"Quivering Blob",
"Throne of Thunder",
},
[147965] = {
"Volatile Azerite",
"The Dread Chain (Islands 4)",
},
[140798] = {
"Cragcaw",
"Whispering Reef (Islands 10)",
},
[16163] = {
"Death Knight Cavalier",
"Naxxramas",
},
[72455] = {
"Overseer Komak",
"Siege of Orgrimmar",
},
[164348] = {
"Wandering Shade",
"Ardenweald Covenant Chapter 2 Scenario",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[92933] = {
"7th Legion Dragoon",
"The Maw of Nashal",
},
[147967] = {
"7th Legion Marine",
"Battle of Dazar'alor",
},
[17990] = {
"Underbog Mushroom",
"Coilfang: The Underbog",
"enUS",
},
[147968] = {
"Agitated Azerite",
"Verdant Wilds (Islands 8)",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
},
[146945] = {
"Swarming Voidspawn",
"Crucible of Storms",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[103685] = {
"Tichondrius",
"The Nighthold",
},
[71433] = {
"Spark of Life",
"Siege of Orgrimmar",
},
[40584] = {
"Naz'jar Invader",
"Throne of the Tides",
},
[41096] = {
"Naz'jar Spiritmender",
"Throne of the Tides",
},
[10404] = {
"Pustulating Horror",
"Icecrown Citadel",
},
[153090] = {
"Lady Venomtongue",
"The Eternal Palace",
},
[162305] = {
"Aqir Heartpiercer",
"Ny'alotha, the Waking City",
},
[29637] = {
"Crafty Snake",
"Gundrak",
},
[127235] = {
"Garothi Demolisher",
"Antorus, the Burning Throne",
},
[21702] = {
"Ethereum Life-Binder",
"Tempest Keep: The Arcatraz",
},
[174592] = {
"Territorial Wader",
"The Necrotic Wake",
},
[30277] = {
"Ahn'kahar Slasher",
"Ahn'kahet: The Old Kingdom",
},
[153091] = {
"Serena Scarscale",
"The Eternal Palace",
},
[162306] = {
"Aqir Drone",
"Ny'alotha, the Waking City",
},
[53127] = {
"Fire Scorpion",
"Firelands",
},
[53383] = {
"Nexus Warden",
"Nexus Legendary",
},
[53639] = {
"Flamewaker Cauterizer",
"Firelands",
},
[101639] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
},
[163331] = {
"Stone Legion Nightblade",
"Revendreth Scenario",
},
[69899] = {
"Farraki Sand Conjurer",
"Throne of Thunder",
},
[65414] = {
"Ethereal Sha",
"Shado-Pan Monastery",
},
[32906] = {
"Freya",
"Ulduar",
},
[82698] = {
"Night-Twisted Devout",
"Highmaul",
},
[169476] = {
"Highway Serf",
"Halls of Atonement",
},
[118022] = {
"Infernal Chaosbringer",
"Tomb of Sargeras",
},
[93961] = {
"Worgen Tracker",
"The Maw of Nashal",
},
[17735] = {
"Wrathfin Warrior",
"Coilfang: The Underbog",
"enUS",
},
[161286] = {
"Dark Ritualist",
"Ny'alotha, the Waking City",
},
[162310] = {
"Hunter",
"Vision of Ysera Scenario",
},
[53128] = {
"Giant Fire Scorpion",
"Firelands",
},
[53640] = {
"Flamewaker Sentinel",
"Firelands",
},
[54920] = {
"Infinite Suppressor",
"End Time",
},
[93962] = {
"Worgen Stalker",
"The Maw of Nashal",
},
[153097] = {
"Voidbound Shaman",
"Horrific Vision of Orgrimmar",
},
[40586] = {
"Lady Naz'jar",
"Throne of the Tides",
},
[216578] = {
"Swarm-Maven Donmiss",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[162313] = {
"Mage",
"Vision of Ysera Scenario",
},
[69390] = {
"Zandalari Storm-Caller",
"Throne of Thunder",
},
[43658] = {
"Frenzied Crocolisk",
"Lost City of the Tol'vir",
},
[216579] = {
"Swarmspike",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[30278] = {
"Ahn'kahar Spell Flinger",
"Ahn'kahet: The Old Kingdom",
},
[145932] = {
"Celestra Brightmoon",
"Havenswood (Islands 2)",
},
[37003] = {
"Skybreaker Vindicator",
"Icecrown Citadel",
},
[22855] = {
"Illidari Nightlord",
"Black Temple",
"enUS",
},
[23239] = {
"Bonechewer Combatant",
"Black Temple",
"enUS",
},
[126216] = {
"Zian-Ti Destroyer",
"The Dread Chain (Islands 4)",
},
[164363] = {
"Undying Stonefiend",
"Halls of Atonement",
},
[111370] = {
"Creature in the Shadows",
"The Emerald Nightmare",
},
[166411] = {
"Forsworn Usurper",
"Spires of Ascension",
},
[16164] = {
"Shade of Naxxramas",
"Naxxramas",
},
[56713] = {
"Master Snowdrift",
"Shado-Pan Monastery",
},
[145934] = {
"Ivan the Mad",
"Havenswood (Islands 2)",
},
[32908] = {
"Captured Mercenary Captain",
"Ulduar",
},
[216582] = {
"Kx",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[161293] = {
"Neglected Guild Bank",
"Horrific Vision of Stormwind",
},
[162317] = {
"Gorechop",
"Theater of Pain",
},
[216583] = {
"Chittering Fearmonger",
"Earthcrawl Mines",
"enUS",
},
[52362] = {
"Tiki Lord Zim'wae",
"Zul'Gurub",
},
[154127] = {
"Fire Spirit",
"Torghast, Tower of the Damned",
},
[123146] = {
"Torn Spirit",
"Havenswood (Islands 2)",
},
[53642] = {
"Cinderweb Spinner",
"Firelands",
},
[151056] = {
"Varanq'ul the Mighty",
"Crucible of Storms",
},
[19016] = {
"Hellfire Familiar",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[154128] = {
"Blazing Elemental",
"Torghast, Tower of the Damned",
},
[69905] = {
"Gurubashi Berserker",
"Throne of Thunder",
},
[135699] = {
"Ashvane Jailer",
"Tol Dagor",
},
[129802] = {
"Earthrager",
"The MOTHERLODE!!",
},
[162320] = {
"Shaman",
"Vision of Ysera Scenario",
},
[151058] = {
"Bubbling Blood",
"Crucible of Storms",
},
[217610] = {
"Deviant Skardyn",
"Hall of Awakening",
"enUS",
},
[69906] = {
"Zandalari High Priest",
"Throne of Thunder",
},
[151059] = {
"Eternal Guardian",
"Crucible of Storms",
},
[30279] = {
"Deep Crawler",
"Ahn'kahet: The Old Kingdom",
},
[154131] = {
"Molten Fury",
"Torghast, Tower of the Damned",
},
[54923] = {
"Infinite Warden",
"End Time",
},
[155156] = {
"Jaina Proudmoore",
"The Eternal Palace",
},
[103695] = {
"Corruption Horror",
"The Emerald Nightmare",
},
[139799] = {
"Ironhull Apprentice",
"Shrine of the Storm",
},
[34190] = {
"Hardened Iron Golem",
"Ulduar",
},
[162325] = {
"Warrior",
"Vision of Ysera Scenario",
},
[155158] = {
"First Arcanist Thalyssra",
"The Eternal Palace",
},
[102672] = {
"Nythendra",
"The Emerald Nightmare",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[60043] = {
"Jade Guardian",
"Mogu'shan Vaults",
},
[43917] = {
"Rock Borer",
"The Stonecore",
},
[52364] = {
"Ritual Tiki Mask",
"Zul'Gurub",
},
[222981] = {
"Fatal Nightmare",
"Nerub-ar Palace",
"enUS",
},
[162326] = {
"Priest",
"Vision of Ysera Scenario",
},
[223674] = {
"Caustic Skitterer",
"Nerub-ar Palace",
"enUS",
},
[218370] = {
"Queen Ansurek",
"Nerub-ar Palace",
"enUS",
},
[140825] = {
"Thistlebrush Trickster",
"Whispering Reef (Islands 10)",
},
[16028] = {
"Patchwerk",
"Naxxramas",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[135706] = {
"Bilge Rat Looter",
"Tol Dagor",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[162327] = {
"Rogue",
"Vision of Ysera Scenario",
},
[217491] = {
"Skeinspinner Takazj",
"Nerub-ar Palace",
"enUS",
},
[69909] = {
"Amani'shi Flame Chanter",
"Throne of Thunder",
},
[129996] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[126847] = {
"Captain Raoul",
"Freehold",
},
[18312] = {
"Ethereal Spellbinder",
"Auchindoun: Mana-Tombs",
"enUS",
},
[152089] = {
"Thrall",
"Horrific Vision of Orgrimmar",
},
[22953] = {
"Wrathbone Flayer",
"Black Temple",
"enUS",
},
[162328] = {
"Warlock",
"Vision of Ysera Scenario",
},
[155161] = {
"Shandris Feathermoon",
"The Eternal Palace",
},
[223492] = {
"Flatcram Grandame",
"Tak-Rethan Abyss",
"enUS",
},
[140827] = {
"Giggling Thistlebrush",
"Whispering Reef (Islands 10)",
},
[60381] = {
"Zandalari Infiltrator",
"Mogu'shan Vaults",
},
[138002] = {
"Scrimshaw Gutter",
"Siege of Boralus",
"enUS",
},
[133990] = {
"Scrimshaw Gutter",
"Siege of Boralus",
"enUS",
},
[34191] = {
"Trash",
"Ulduar",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
},
[155162] = {
"Lor'themar Theron",
"The Eternal Palace",
},
[29768] = {
"Unyielding Constrictor",
"Gundrak",
},
[140828] = {
"Morningdew",
"Whispering Reef (Islands 10)",
},
[43662] = {
"Unbound Earth Rager",
"The Stonecore",
},
[164351] = {
"Fading Shade",
"Ardenweald Covenant Chapter 2 Scenario",
},
[23421] = {
"Ashtongue Channeler",
"Black Temple",
"enUS",
},
[24722] = {
"Fel Crystal",
"Magisters' Terrace",
"enUS",
},
[162330] = {
"Demon Hunter",
"Vision of Ysera Scenario",
},
[17653] = {
"Shadowmoon Channeler",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[139805] = {
"Mechanical Guardhound",
"Verdant Wilds (Islands 8)",
},
[214548] = {
"Slippery Syphoner",
"Tak-Rethan Abyss",
"enUS",
},
[53901] = {
"Unstable Magma",
"Firelands",
},
[134686] = {
"Mature Krolusk",
"Temple of Sethraliss",
},
[126092] = {
"Slitherblade Gladiator",
"Whispering Reef (Islands 10)",
},
[169498] = {
"Plague Bomb",
"Plaguefall",
},
[162331] = {
"Corrupted Neuron",
"Ny'alotha, the Waking City",
},
[25354] = {
"Mutate Fleshlasher",
"Tempest Keep: The Botanica",
"enUS",
},
[69911] = {
"Zandalari Warlord",
"Throne of Thunder",
},
[120477] = {
"Deep Stalker",
"Tomb of Sargeras",
},
[133663] = {
"Fanatical Headhunter",
"The Underrot",
},
[19507] = {
"Sunseeker Gene-Splicer",
"Tempest Keep: The Botanica",
"enUS",
},
[16165] = {
"Necro Knight",
"Naxxramas",
},
[136735] = {
"Ashvane Marine",
"Tol Dagor",
},
[72983] = {
"Corrupted Skullsplitter",
"Siege of Orgrimmar",
},
[140631] = {
"South Sea Ray",
"Whispering Reef (Islands 10)",
},
[139807] = {
"Venture Surveyor",
"Verdant Wilds (Islands 8)",
},
[214550] = {
"Deepwater Snapper",
"Tak-Rethan Abyss",
"enUS",
},
[18430] = {
"Ethereal Apprentice",
"Auchindoun: Mana-Tombs",
"enUS",
},
[218520] = {
"Nightcaller Velys",
"11.0 - Priory Scenario",
"enUS",
},
[17975] = {
"High Botanist Freywinn",
"Tempest Keep: The Botanica",
"enUS",
},
[34192] = {
"Boomer XP-500",
"Ulduar",
},
[14401] = {
"Master Elemental Shaper Krixix",
"Blackwing Lair",
},
[223562] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[139808] = {
"Venture Oaf",
"Verdant Wilds (Islands 8)",
},
[214551] = {
"Wandering Gutter",
"Tak-Rethan Abyss",
"enUS",
},
[222042] = {
"Shrillwing",
"Nerub-ar Palace",
"enUS",
},
[221986] = {
"Blood Horror",
"Nerub-ar Palace",
"enUS",
},
[17994] = {
"Bloodwarder Falconer",
"Tempest Keep: The Botanica",
"enUS",
},
[153119] = {
"Lesser Void Elemental",
"Horrific Vision of Orgrimmar",
},
[220551] = {
"Sureki Ironweaver",
"Nerub-ar Palace",
"enUS",
},
[53134] = {
"Ancient Core Hound",
"Firelands",
},
[139001] = {
"Wildlands Ursa",
"Verdant Wilds (Islands 8)",
},
[214379] = {
"Living Shadow",
"11.0 - Priory Scenario",
"enUS",
},
[17993] = {
"Bloodwarder Protector",
"Tempest Keep: The Botanica",
"enUS",
},
[18309] = {
"Ethereal Scavenger",
"Auchindoun: Mana-Tombs",
"enUS",
},
[24745] = {
"Pure Energy",
"Magisters' Terrace",
"enUS",
},
[92950] = {
"Skyfire Marine",
"The Maw of Nashal",
},
[214368] = {
"The Broken Queen",
"11.0 - Priory Scenario",
"enUS",
},
[3640] = {
"Evolving Ectoplasm",
"Wailing Caverns",
},
[139810] = {
"Venture Middle Manager",
"The Dread Chain (Islands 4)",
},
[140834] = {
"Laughing Blaze",
"Havenswood (Islands 2)",
},
[213743] = {
"Enraged Skardyn",
"Hall of Awakening",
"enUS",
},
[134691] = {
"Static-charged Dervish",
"Temple of Sethraliss",
},
[135715] = {
"Ferocious Nightsaber",
"The Dread Chain (Islands 4)",
},
[161312] = {
"Crushing Tendril",
"Ny'alotha, the Waking City",
},
[126845] = {
"Captain Jolly",
"Freehold",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[139811] = {
"Venture Sub-Lead",
"Un'gol Ruins (Islands 1)",
},
[165408] = {
"Halkias",
"Halls of Atonement",
},
[60040] = {
"Commander Durand",
"Scarlet Monastery",
},
[162319] = {
"Paladin",
"Vision of Ysera Scenario",
},
[135716] = {
"Nightsaber Hunter",
"The Dread Chain (Islands 4)",
},
[34193] = {
"Clockwork Sapper",
"Ulduar",
},
[19633] = {
"Bloodwarder Mender",
"Tempest Keep: The Botanica",
"enUS",
},
[166644] = {
"Artificer Xy'mox",
"Castle Nathria",
},
[139812] = {
"Venture Producer",
"Verdant Wilds (Islands 8)",
},
[140836] = {
"Brightfire",
"Havenswood (Islands 2)",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[159266] = {
"Portal Master",
"Horrific Vision of Stormwind",
},
[220193] = {
"Sureki Venomblade",
"City of Threads",
"enUS",
},
[18421] = {
"Sunseeker Researcher",
"Tempest Keep: The Botanica",
"enUS",
},
[72986] = {
"Shanna Sparkfizz",
"Siege of Orgrimmar",
},
[18587] = {
"Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[208245] = {
"Skittering Swarmer",
"Earthcrawl Mines",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[226617] = {
"Snake",
"Fungal Folly",
"enUS",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
"enUS",
},
[135718] = {
"Nightsaber Cub",
"The Dread Chain (Islands 4)",
},
[19508] = {
"Sunseeker Herbalist",
"Tempest Keep: The Botanica",
"enUS",
},
[219676] = {
"Nerl'athekk the Skulking",
"Skittering Breach",
"enUS",
},
[23498] = {
"Parasitic Shadowfiend",
"Black Temple",
"enUS",
},
[139814] = {
"Merger Specialist Huzzle",
"The Dread Chain (Islands 4)",
},
[140838] = {
"Mischievous Flood",
"Havenswood (Islands 2)",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[222145] = {
"Voracious Stagshell",
"Nerub-ar Palace",
"enUS",
},
[61239] = {
"Glintrok Oracle",
"Mogu'shan Palace",
},
[56719] = {
"Sha of Violence",
"Shado-Pan Monastery",
},
[19511] = {
"Nethervine Inciter",
"Tempest Keep: The Botanica",
"enUS",
},
[69507] = {
"Zeb'tula Beastcaller",
"Mogu Island Progression Events",
},
[16459] = {
"Wanton Hostess",
"Karazhan",
},
[140839] = {
"Water Spirit",
"The Rotting Mire (Islands 9)",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[18105] = {
"Ghaz'an",
"Coilfang: The Underbog",
"enUS",
},
[222214] = {
"Frenzied Leaper",
"Nerub-ar Palace",
"enUS",
},
[127230] = {
"Garothi Annihilator",
"Antorus, the Burning Throne",
},
[60047] = {
"Amethyst Guardian",
"Mogu'shan Vaults",
},
[69916] = {
"Gurubashi Berserker",
"Throne of Thunder",
},
[173604] = {
"Sinister Antiquarian",
"Castle Nathria",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[175652] = {
"Lord of Woe",
"Torghast, Tower of the Damned",
},
[229918] = {
"Caustic Skyrazor",
"Nerub-ar Palace",
"enUS",
},
[140841] = {
"Snickering Ripple",
"Jorundall (Islands 7)",
},
[130325] = {
"Deepsea Viseclaw",
"Whispering Reef (Islands 10)",
},
[171557] = {
"Shade of Bargast",
"Castle Nathria",
},
[139817] = {
"Chief Engineer Zazzy",
"Verdant Wilds (Islands 8)",
},
[53648] = {
"Inferno Hawk",
"Firelands",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[36805] = {
"Deathspeaker Servant",
"Icecrown Citadel",
},
[228538] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[61448] = {
"Sik'thik Soldier",
"Siege of Niuzao Temple",
},
[17728] = {
"Murkblood Tribesman",
"Coilfang: The Underbog",
"enUS",
},
[60709] = {
"Qiang the Merciless",
"Mogu'shan Vaults",
},
[139818] = {
"Security Officer Durk",
"Verdant Wilds (Islands 8)",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[127233] = {
"Flameweaver",
"Antorus, the Burning Throne",
},
[156158] = {
"Adjutant Felipos",
"Torghast, Tower of the Damned",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[122135] = {
"Shatug",
"Antorus, the Burning Throne",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[32915] = {
"Elder Brightleaf",
"Ulduar",
},
[140843] = {
"Air Spirit",
"The Dread Chain (Islands 4)",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[40166] = {
"Molten Giant",
"Grim Batol",
"enUS",
},
[3674] = {
"Skum",
"Wailing Caverns",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[17729] = {
"Murkblood Spearman",
"Coilfang: The Underbog",
"enUS",
},
[102682] = {
"Lethon",
"The Emerald Nightmare",
},
[216561] = {
"Gahn'dante",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[220643] = {
"Deepwater Makura",
"Tak-Rethan Abyss",
"enUS",
},
[71454] = {
"Malkorok",
"Siege of Orgrimmar",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[37007] = {
"Deathbound Ward",
"Icecrown Citadel",
},
[36499] = {
"Soulguard Reaper",
"The Forge of Souls",
},
[220707] = {
"Staglette",
"11.0 - Priory Scenario",
"enUS",
},
[37011] = {
"The Damned",
"Icecrown Citadel",
},
[173609] = {
"Nathrian Conservator",
"Castle Nathria",
},
[156641] = {
"Enthralled Weaponsmith",
"Horrific Vision of Stormwind",
},
[159275] = {
"Portal Keeper",
"Horrific Vision of Stormwind",
},
[69375] = {
"Hidden Fog",
"Throne of Thunder",
},
[144941] = {
"Akunda's Aspect",
"Battle of Dazar'alor",
},
[94960] = {
"Hymdall",
"Halls of Valor",
},
[128650] = {
"Chopper Redhook",
"Siege of Boralus",
"enUS",
},
[102683] = {
"Emeriss",
"The Emerald Nightmare",
},
[140846] = {
"Impish Breeze",
"The Dread Chain (Islands 4)",
},
[158168] = {
"Dark Disciple",
"Halls of Origination",
},
[220507] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[144942] = {
"Spark Bot",
"Battle of Dazar'alor",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[147957] = {
"Azerchrysalis",
"Skittering Hollow (Islands 5)",
},
[32916] = {
"Snaplasher",
"Ulduar",
},
[148893] = {
"Tormented Soul",
"Siege of Boralus",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
},
[214381] = {
"Writhing Shade",
"11.0 - Priory Scenario",
"enUS",
},
[168960] = {
"Fulfir the Scarred",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[34196] = {
"Rune Etched Sentry",
"Ulduar",
},
[171522] = {
"Foul Slayer",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[220710] = {
"Leviathan Manipulator",
"The Sinkhole",
"enUS",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[222368] = {
"Exalted Priest",
"Nerub-ar Palace",
"enUS",
},
[222459] = {
"Congealing Mass",
"Nerub-ar Palace",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[144944] = {
"Thirsting Bloodsucker",
"Verdant Wilds (Islands 8)",
},
[214920] = {
"Tasting Room Attendant",
"Cinderbrew Meadery",
"enUS",
},
[227874] = {
"Web Spreader",
"Skittering Breach",
"enUS",
},
[37012] = {
"Ancient Skeletal Soldier",
"Icecrown Citadel",
},
[173613] = {
"Nathrian Registrar",
"Castle Nathria",
},
[215592] = {
"Siegehold Fortifier",
"The Spiral Weave",
"enUS",
},
[229399] = {
"Blood Drainer",
"Nerub-ar Palace",
"enUS",
},
[140154] = {
"Rotclaw Patriarch",
"The Dread Chain (Islands 4)",
},
[138992] = {
"Muckfin Puddlejumper",
"Whispering Reef (Islands 10)",
},
[221667] = {
"Lost Watcher",
"Nerub-ar Palace",
"enUS",
},
[164362] = {
"Slimy Morsel",
"Plaguefall",
},
[216584] = {
"Nerubian Captain",
"Earthcrawl Mines",
"enUS",
},
[73185] = {
"Enraged Mushan Beast",
"Siege of Orgrimmar",
},
[226100] = {
"Kaheti Skirmisher",
"Nerub-ar Palace",
"enUS",
},
[173484] = {
"Conjured Manifestation",
"Castle Nathria",
},
[155634] = {
"Bound Storm",
"The Eternal Palace",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[145970] = {
"Razorshell Turtle",
"Operation: Mechagon",
},
[113130] = {
"Burning Sentry",
"Broken Shore Scenario",
},
[57080] = {
"Corrupted Scroll",
"Temple of the Jade Serpent",
},
[24777] = {
"Sunblade Sentinel",
"Magisters' Terrace",
"enUS",
},
[105203] = {
"Felguard Invader",
"Broken Shore Scenario",
},
[69388] = {
"Zandalari Spear-Shaper",
"Throne of Thunder",
},
[127231] = {
"Garothi Decimator",
"Antorus, the Burning Throne",
},
[34197] = {
"Chamber Overseer",
"Ulduar",
},
[157614] = {
"Tentacle of Drest'agath",
"Ny'alotha, the Waking City",
},
[173178] = {
"Stone Legion Goliath",
"Castle Nathria",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[59794] = {
"Krik'thik Disruptor",
"Gate of the Setting Sun",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[21964] = {
"Fathom-Guard Caribdis",
"Coilfang: Serpentshrine Cavern",
},
[30283] = {
"Plague Walker",
"Ahn'kahet: The Old Kingdom",
},
[144948] = {
"Leatherwing Hunter",
"Verdant Wilds (Islands 8)",
},
[136181] = {
"Volcano",
"Verdant Wilds (Islands 8)",
},
[139700] = {
"Brineshell Sea Shaman",
"Verdant Wilds (Islands 8)",
},
[15974] = {
"Dread Creeper",
"Naxxramas",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[210153] = {
"Ol' Waxbeard",
"Darkflame Cleft",
"enUS",
},
[138989] = {
"Saltfin",
"Whispering Reef (Islands 10)",
},
[144949] = {
"Canopy Stalker",
"Verdant Wilds (Islands 8)",
},
[29832] = {
"Drakkari Golem",
"Gundrak",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[168681] = {
"Forsworn Helion",
"Spires of Ascension",
},
[134893] = {
"Ironweb Spider",
"Havenswood (Islands 2)",
},
[87841] = {
"Grom'kar Firemender",
"Blackrock Foundry",
},
[127485] = {
"Bilge Rat Looter",
"Tol Dagor",
},
[153141] = {
"Endless Hunger Totem",
"Horrific Vision of Orgrimmar",
},
[69658] = {
"Zeb'tula Raptor",
"Mogu Island Progression Events",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[156213] = {
"Coldheart Guardian",
"Torghast, Tower of the Damned",
},
[140855] = {
"Trickle",
"Havenswood (Islands 2)",
},
[33430] = {
"Guardian Lasher",
"Ulduar",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[135736] = {
"Gore",
"Havenswood (Islands 2)",
},
[210479] = {
"Carnivorous Lasher",
"Fungal Folly",
"enUS",
},
[145975] = {
"Stonehide Buck",
"Havenswood (Islands 2)",
},
[73949] = {
"Commander Na'kaz",
"Siege of Orgrimmar",
},
[160181] = {
"Royal Arcanist",
"Revendreth Scenario",
},
[157238] = {
"Prophet Skitra",
"Ny'alotha, the Waking City",
},
[60051] = {
"Cobalt Guardian",
"Mogu'shan Vaults",
},
[162719] = {
"Void Ascendant",
"Ny'alotha, the Waking City",
},
[161334] = {
"Gnashing Terror",
"Ny'alotha, the Waking City",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[145976] = {
"Stonehide Bull",
"Havenswood (Islands 2)",
},
[53140] = {
"Son of Flame",
"Firelands",
},
[164406] = {
"Shriekwing",
"Castle Nathria",
},
[214576] = {
"Iron-Runed Protector",
"Hall of Awakening",
"enUS",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[37782] = {
"Flesh-eating Insect",
"Icecrown Citadel",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[161335] = {
"Void Horror",
"Ny'alotha, the Waking City",
},
[145977] = {
"Mammoth Stonehide",
"Havenswood (Islands 2)",
},
[52340] = {
"Tiki Lord Mu'Loa",
"Zul'Gurub",
},
[164407] = {
"Sludgefist",
"Castle Nathria",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[215601] = {
"Siege Dominator",
"The Spiral Weave",
"enUS",
},
[32878] = {
"Dark Rune Evoker",
"Ulduar",
},
[164355] = {
"Manifestation of Pride",
"Revendreth Scenario",
},
[72485] = {
"Goma",
"Siege of Orgrimmar",
},
[130334] = {
"Gritplate Gazer",
"The Dread Chain (Islands 4)",
},
[56717] = {
"Hoptallus",
"Stormstout Brewery",
},
[32919] = {
"Storm Lasher",
"Ulduar",
},
[37232] = {
"Nerub'ar Broodling",
"Icecrown Citadel",
},
[33431] = {
"Forest Swarmer",
"Ulduar",
},
[151098] = {
"Shadowy Appendage",
"Crucible of Storms",
},
[173466] = {
"Fara",
"Castle Nathria",
},
[34199] = {
"Lightning Charged Iron Dwarf",
"Ulduar",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[220199] = {
"Battle Scarab",
"City of Threads",
"enUS",
},
[119072] = {
"The Desolate Host",
"Tomb of Sargeras",
},
[163559] = {
"Royal Servant",
"Revendreth Scenario",
},
[62348] = {
"Sik'thik Soldier",
"Siege of Niuzao Temple",
},
[21965] = {
"Fathom-Guard Tidalvess",
"Coilfang: Serpentshrine Cavern",
},
[30284] = {
"Bonegrinder",
"Ahn'kahet: The Old Kingdom",
},
[144956] = {
"Razorbite",
"Skittering Hollow (Islands 5)",
},
[130335] = {
"Gritplate Crystaleye",
"The Dread Chain (Islands 4)",
},
[53141] = {
"Molten Surger",
"Firelands",
},
[156219] = {
"Coldheart Scout",
"Torghast, Tower of the Damned",
},
[123680] = {
"Dark Keeper Aedis",
"Antorus, the Burning Throne",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[138625] = {
"Amathet Enforcer",
"Havenswood (Islands 2)",
},
[36626] = {
"Festergut",
"Icecrown Citadel",
},
[36724] = {
"Servant of the Throne",
"Icecrown Citadel",
},
[101667] = {
"Shielded Anchor",
"Broken Shore Scenario",
},
[34198] = {
"Iron Mender",
"Ulduar",
},
[69927] = {
"Zandalari Prelate",
"Throne of Thunder",
},
[15975] = {
"Carrion Spinner",
"Naxxramas",
},
[148488] = {
"Unliving Augur",
"Battle of Dazar'alor",
},
[166919] = {
"Foul Slayer",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[16167] = {
"Bony Construct",
"Naxxramas",
},
[72954] = {
"Kor'thik Honor Guard",
"Siege of Orgrimmar",
},
[161273] = {
"Abyssal Spawn",
"Chamber of Heart - Scenario",
},
[14302] = {
"Chromatic Drakonid",
"Blackwing Lair",
},
[148443] = {
"Defense-A-Bot",
"Battle of Dazar'alor",
},
[69910] = {
"Drakkari Frost Warden",
"Throne of Thunder",
},
[33432] = {
"Leviathan Mk II",
"Ulduar",
},
[162303] = {
"Aqir Swarmkeeper",
"Ny'alotha, the Waking City",
},
[140292] = {
"Snowfur Alpha",
"Havenswood (Islands 2)",
},
[171521] = {
"Dread Evoker",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[154174] = {
"Horrific Summoner",
"The Eternal Palace",
},
[102679] = {
"Ysondre",
"The Emerald Nightmare",
},
[36880] = {
"Decaying Colossus",
"Icecrown Citadel",
},
[162298] = {
"Yulkatar the Cruel",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[127490] = {
"Knight Captain Valyri",
"Tol Dagor",
},
[167485] = {
"Starving Mawrat",
"Torghast, Tower of the Damned",
},
[156159] = {
"Coldheart Javelineer",
"Torghast, Tower of the Damned",
},
[146860] = {
"Mistscorn Marauder",
"Jorundall (Islands 7)",
},
[72981] = {
"Aggron",
"Siege of Orgrimmar",
},
[73452] = {
"Harbinger of Y'Shaarj",
"Siege of Orgrimmar",
},
[37016] = {
"Skybreaker Luminary",
"Icecrown Citadel",
},
[162312] = {
"Druid",
"Vision of Ysera Scenario",
},
[74009] = {
"Crawler Mine",
"Siege of Orgrimmar",
},
[18894] = {
"Felguard Brute",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[164342] = {
"Mawsworn Defender",
"Ardenweald Covenant Chapter 2 Scenario",
},
[159764] = {
"Jesh'ra",
"Ny'alotha, the Waking City",
},
[68905] = {
"Lu'lin",
"Throne of Thunder",
},
[138818] = {
"Bloodwake Warbringer",
"Jorundall (Islands 7)",
},
[111333] = {
"Taintheart Trickster",
"The Emerald Nightmare",
},
[162311] = {
"Death Knight",
"Vision of Ysera Scenario",
},
[16524] = {
"Shade of Aran",
"Karazhan",
},
[138982] = {
"Muckfin Murloc",
"Whispering Reef (Islands 10)",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[129826] = {
"Brineshell Snapclaw",
"Whispering Reef (Islands 10)",
},
[70429] = {
"Flesh'rok the Diseased",
"Throne of Thunder",
},
[138819] = {
"Bloodwake Marauder",
"Un'gol Ruins (Islands 1)",
},
[59915] = {
"Jasper Guardian",
"Mogu'shan Vaults",
},
[37132] = {
"Ymirjar Battle-Maiden",
"Icecrown Citadel",
},
[33433] = {
"Suit of Armor",
"Ulduar",
},
[216634] = {
"Swooping Spreader",
"Earthcrawl Mines",
"enUS",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[144963] = {
"Kimbul's Aspect",
"Battle of Dazar'alor",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[138820] = {
"Bloodwake Vrykul",
"Jorundall (Islands 7)",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[166921] = {
"Blighted Creeper",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[21966] = {
"Fathom-Guard Sharkkis",
"Coilfang: Serpentshrine Cavern",
},
[71466] = {
"Iron Juggernaut",
"Siege of Orgrimmar",
},
[52375] = {
"Florawing Needler",
"Zul'Gurub",
},
[72490] = {
"Overseer Mojka",
"Siege of Orgrimmar",
},
[148483] = {
"Ancestral Avenger",
"Battle of Dazar'alor",
},
[138821] = {
"Bloodwake Warmaiden",
"Un'gol Ruins (Islands 1)",
},
[37017] = {
"Skybreaker Assassin",
"Icecrown Citadel",
},
[173633] = {
"Nathrian Archivist",
"Castle Nathria",
},
[45065] = {
"Tol'vir Merchant",
"Lost City of the Tol'vir",
},
[62358] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
},
[53617] = {
"Molten Erupter",
"Firelands",
},
[36502] = {
"Devourer of Souls",
"The Forge of Souls",
},
[168966] = {
"Brightsparkle",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[138822] = {
"Bloodwake Harpooner",
"Jorundall (Islands 7)",
},
[61444] = {
"Ming the Cunning",
"Mogu'shan Palace",
},
[111398] = {
"Nightmare Amalgamation",
"The Emerald Nightmare",
},
[54161] = {
"Flame Archon",
"Firelands",
},
[56718] = {
"Hopper",
"Stormstout Brewery",
},
[71979] = {
"Kor'kron Warbringer",
"Siege of Orgrimmar",
},
[129828] = {
"Brineshell Clacker",
"The Dread Chain (Islands 4)",
},
[145303] = {
"Kaldorei Glaive Thrower",
"Warfronts Darkshore - Horde",
},
[138823] = {
"Bloodwake Wayfinder",
"Jorundall (Islands 7)",
},
[168003] = {
"Empowered Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[157253] = {
"Ka'zir",
"Ny'alotha, the Waking City",
},
[169696] = {
"Mire Soldier",
"Plaguefall",
},
[159301] = {
"General Kaal",
"Revendreth Scenario",
},
[32876] = {
"Dark Rune Champion",
"Ulduar",
},
[113088] = {
"Corrupted Feeler",
"The Emerald Nightmare",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[138824] = {
"Halfid Ironeye",
"Un'gol Ruins (Islands 1)",
},
[102696] = {
"Felslag Imp",
"Broken Shore Scenario",
},
[157254] = {
"Tek'ris",
"Ny'alotha, the Waking City",
},
[154524] = {
"K'thir Mindcarver",
"Horrific Vision of Orgrimmar",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[152135] = {
"Void-Twisted Spellweaver",
"Eastern Kingdoms - Vermillion Redoubt - HoA Scenario",
},
[72492] = {
"Shimra",
"Siege of Orgrimmar",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
},
[138825] = {
"Ingathora Blood-Drinker",
"Snowblossom Village (Islands 3)",
},
[138659] = {
"Risen Hound",
"Havenswood (Islands 2)",
},
[157255] = {
"Aqir Drone",
"Ny'alotha, the Waking City",
},
[158279] = {
"Haywire Clockwork Rocket Bot",
"Horrific Vision of Stormwind",
},
[159303] = {
"Monstrous Behemoth",
"Ny'alotha, the Waking City",
},
[111554] = {
"Felblaze Trickster",
"The Nighthold",
},
[68397] = {
"Lei Shen",
"Throne of Thunder",
},
[16530] = {
"Mana Warp",
"Karazhan",
},
[138826] = {
"Leikneir the Brave",
"Jorundall (Islands 7)",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[157256] = {
"Aqir Darter",
"Ny'alotha, the Waking City",
},
[162828] = {
"Corrosive Digester",
"Ny'alotha, the Waking City",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[56472] = {
"Fragrant Lotus",
"Shado-Pan Monastery",
},
[72493] = {
"Trak'gen",
"Siege of Orgrimmar",
},
[29836] = {
"Drakkari Battle Rider",
"Gundrak",
},
[135192] = {
"Honored Raptor",
"Kings' Rest",
},
[112162] = {
"Grisly Trapper",
"The Emerald Nightmare",
},
[146485] = {
"Nevara Nightshade",
"Warfronts Darkshore - Horde",
},
[139800] = {
"Galecaller Apprentice",
"Shrine of the Storm",
},
[159305] = {
"Maddened Conscript",
"Ny'alotha, the Waking City",
},
[220738] = {
"Leviathan Caller",
"The Sinkhole",
"enUS",
},
[144971] = {
"Druid of the Branch",
"Warfronts Darkshore - Horde",
},
[219714] = {
"Ice Block",
"The Underkeep",
"enUS",
},
[138828] = {
"Berhild the Fierce",
"Jorundall (Islands 7)",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
},
[59800] = {
"Krik'thik Rager",
"Gate of the Setting Sun",
},
[157231] = {
"Shad'har the Insatiable",
"Ny'alotha, the Waking City",
},
[52373] = {
"Florawing Needler",
"Zul'Gurub",
},
[52377] = {
"Florawing Needler",
"Zul'Gurub",
},
[144972] = {
"Kaldorei Huntress",
"Warfronts Darkshore - Horde",
},
[81197] = {
"Iron Raider",
"Blackrock Foundry",
},
[155211] = {
"Gormling Pest",
"Torghast, Tower of the Damned",
},
[115905] = {
"Fel Soul",
"The Nighthold",
},
[173641] = {
"Nathrian Gargon",
"Castle Nathria",
},
[37531] = {
"Frostwarden Handler",
"Icecrown Citadel",
},
[62360] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
},
[161812] = {
"Faceless Ruiner",
"Chamber of Heart - Scenario",
},
[144973] = {
"Kaldorei Sentinel",
"Warfronts Darkshore - Horde",
},
[72484] = {
"Zazo",
"Siege of Orgrimmar",
},
[56473] = {
"Flying Snow",
"Shado-Pan Monastery",
},
[164427] = {
"Reanimated Warrior",
"The Necrotic Wake",
"enUS",
},
[15976] = {
"Venom Stalker",
"Naxxramas",
},
[158284] = {
"Craggle Wobbletop",
"Horrific Vision of Stormwind",
},
[159308] = {
"Zealous Adherent",
"Ny'alotha, the Waking City",
},
[16168] = {
"Stoneskin Gargoyle",
"Naxxramas",
},
[218693] = {
"Eclipsing Grasp",
"11.0 - Priory Scenario",
"enUS",
},
[52076] = {
"Gurubashi Cauldron-Mixer",
"Zul'Gurub",
},
[220741] = {
"Slamming Tentacle",
"The Sinkhole",
"enUS",
},
[156237] = {
"Imperator Dara",
"Torghast, Tower of the Damned",
},
[52498] = {
"Beth'tilac",
"Firelands",
},
[158285] = {
"Tinkered Shieldbot",
"Horrific Vision of Stormwind",
},
[159309] = {
"Leeching Parasite",
"Ny'alotha, the Waking City",
},
[32918] = {
"Detonating Lasher",
"Ulduar",
},
[156130] = {
"Lesser Zoatroid",
"The Eternal Palace",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[220742] = {
"Guardian Tentacle",
"The Sinkhole",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[59801] = {
"Krik'thik Wind Shaper",
"Gate of the Setting Sun",
},
[158286] = {
"Reprogrammed Warbot",
"Horrific Vision of Stormwind",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[135761] = {
"Thundering Totem",
"Kings' Rest",
},
[72496] = {
"Overseer Thathung",
"Siege of Orgrimmar",
},
[140842] = {
"Ebb",
"The Dread Chain (Islands 4)",
},
[155215] = {
"Faeleaf Lasher",
"Torghast, Tower of the Damned",
},
[156239] = {
"Dark Ascended Corrus",
"Torghast, Tower of the Damned",
},
[146770] = {
"Druid of the Claw",
"Warfronts Darkshore - Horde",
},
[37532] = {
"Frostwing Whelp",
"Icecrown Citadel",
},
[208457] = {
"Skittering Darkness",
"Darkflame Cleft",
"enUS",
},
[217672] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[153060] = {
"Cyranus",
"The Eternal Palace",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[155216] = {
"Faeleaf Warden",
"Torghast, Tower of the Damned",
},
[213577] = {
"Spitfire Charger",
"The Waterworks",
"enUS",
},
[146769] = {
"Druid of the Claw",
"Warfronts Darkshore - Horde",
},
[36891] = {
"Iceborn Proto-Drake",
"Pit of Saron",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[135763] = {
"Voidling",
"Jorundall (Islands 7)",
},
[30285] = {
"Eye of Taldaram",
"Ahn'kahet: The Old Kingdom",
},
[144246] = {
"K.U.-J.0.",
"Operation: Mechagon",
},
[140678] = {
"Frostbeard Howler",
"Skittering Hollow (Islands 5)",
},
[156241] = {
"Monstrous Guardian",
"Torghast, Tower of the Damned",
},
[166936] = {
"Keeneye Bowman",
"Theater of Pain",
},
[37228] = {
"Frostwarden Warrior",
"Icecrown Citadel",
},
[17871] = {
"Underbog Shambler",
"Coilfang: The Underbog",
"enUS",
},
[135764] = {
"Explosive Totem",
"Kings' Rest",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
"enUS",
},
[53094] = {
"Patriarch Fire Turtle",
"Firelands",
},
[131669] = {
"Jagged Hound",
"Waycrest Manor",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[111405] = {
"Shadow Pounder",
"The Emerald Nightmare",
},
[36886] = {
"Geist Ambusher",
"Pit of Saron",
},
[71474] = {
"Embodied Despair",
"Siege of Orgrimmar",
},
[135765] = {
"Torrent Totem",
"Kings' Rest",
},
[72498] = {
"Theramore Citizen",
"Siege of Orgrimmar",
},
[219723] = {
"Royal Whisperer",
"Nerub-ar Palace",
"enUS",
},
[61338] = {
"Glintrok Skulker",
"Mogu'shan Palace",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[59494] = {
"Yeasty Brew Alemental",
"Stormstout Brewery",
},
[37533] = {
"Rimefang",
"Icecrown Citadel",
},
[153130] = {
"Greater Void Elemental",
"Horrific Vision of Orgrimmar",
},
[30287] = {
"Plundering Geist",
"Ahn'kahet: The Old Kingdom",
},
[16461] = {
"Concubine",
"Karazhan",
},
[219724] = {
"Court Attendant",
"Nerub-ar Palace",
"enUS",
},
[102191] = {
"Dreadhound",
"Azsuna",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[157268] = {
"Crawling Corruption",
"Horrific Vision of Orgrimmar",
},
[117269] = {
"Kil'jaeden",
"Tomb of Sargeras",
},
[71475] = {
"Rook Stonetoe",
"Siege of Orgrimmar",
},
[61334] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
},
[210510] = {
"Flimflam the Cowardly",
"Darkflame Cleft",
"enUS",
},
[219725] = {
"Chitin Knight",
"Nerub-ar Palace",
"enUS",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[53794] = {
"Smouldering Hatchling",
"Firelands",
},
[12457] = {
"Blackwing Spellbinder",
"Blackwing Lair",
},
[158040] = {
"Unbound Deathwalker",
"Mists of Tirna Scithe",
},
[160341] = {
"Sewer Beastling",
"Horrific Vision of Stormwind",
},
[153174] = {
"Watchers of Death",
"Torghast, Tower of the Damned",
},
[72483] = {
"Sarok",
"Siege of Orgrimmar",
},
[138840] = {
"Zara'thik Impaler",
"Jorundall (Islands 7)",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
},
[71476] = {
"Embodied Misery",
"Siege of Orgrimmar",
},
[223822] = {
"Queen's Guard Re'zah",
"Nerub-ar Palace",
"enUS",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[52380] = {
"Venomancer Mauri",
"Zul'Gurub",
},
[165594] = {
"Coldheart Ambusher",
"Torghast, Tower of the Damned",
},
[73012] = {
"Klaxxi Skirmisher",
"Siege of Orgrimmar",
},
[138841] = {
"Zara'thik Battlesinger",
"Jorundall (Islands 7)",
},
[37022] = {
"Blighted Abomination",
"Icecrown Citadel",
},
[167999] = {
"Echo of Sin",
"Castle Nathria",
},
[37534] = {
"Spinestalker",
"Icecrown Citadel",
},
[151128] = {
"Lord of Locks",
"Torghast, Tower of the Damned",
},
[37663] = {
"Darkfallen Noble",
"Icecrown Citadel",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[189472] = {
"Qalashi Lavabearer",
"Neltharus",
"enUS",
},
[138842] = {
"Ta'kil the Resonator",
"The Dread Chain (Islands 4)",
},
[151581] = {
"Horrific Vision",
"The Eternal Palace",
},
[103217] = {
"Crystalline Scorpid",
"The Nighthold",
},
[71542] = {
"Blood",
"Siege of Orgrimmar",
},
[159320] = {
"Amahtet",
"Ny'alotha, the Waking City",
},
[138838] = {
"Zara'thik Mantid",
"Jorundall (Islands 7)",
},
[56732] = {
"Liu Flameheart",
"Temple of the Jade Serpent",
},
[140376] = {
"Duneshell Scarab",
"Whispering Reef (Islands 10)",
},
[155225] = {
"Faeleaf Grovesinger",
"Torghast, Tower of the Damned",
},
[32927] = {
"Runemaster Molgeim",
"Ulduar",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[43286] = {
"Crystal Shard",
"The Stonecore",
},
[159321] = {
"Khateph",
"Ny'alotha, the Waking City",
},
[29264] = {
"Spirit Wolf",
"Deepwind Gorge",
},
[140769] = {
"Goldenvein",
"Jorundall (Islands 7)",
},
[140768] = {
"Guuru the Mountain-Breaker",
"Whispering Reef (Islands 10)",
},
[155226] = {
"Verdant Keeper",
"Torghast, Tower of the Damned",
},
[102706] = {
"Grinning Shadowstalker",
"Broken Shore Scenario",
},
[59804] = {
"Gripping Hatred",
"Shado-Pan Monastery",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[71478] = {
"Embodied Anguish",
"Siege of Orgrimmar",
},
[52381] = {
"Venomancer T'Kulu",
"Zul'Gurub",
},
[30416] = {
"Bound Fire Elemental",
"Ahn'kahet: The Old Kingdom",
},
[152282] = {
"Underhold Elite Guard",
"Siege of Orgrimmar - Coup Scenario",
},
[61340] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
},
[37023] = {
"Plague Scientist",
"Icecrown Citadel",
},
[157275] = {
"Darkwhisper Disciple",
"Blackwing Descent Scenario",
},
[59426] = {
"Bopper",
"Stormstout Brewery",
},
[117782] = {
"Eredar Bloodmage",
"Tomb of Sargeras",
},
[217684] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[21298] = {
"Coilfang Serpentguard",
"Coilfang: Serpentshrine Cavern",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[138846] = {
"Amberwinged Mindsinger",
"Jorundall (Islands 7)",
},
[69943] = {
"Spirit Beast",
"Deepwind Gorge",
},
[15977] = {
"Poisonous Skitterer",
"Naxxramas",
},
[138971] = {
"Zian-Ti Serpent",
"Havenswood (Islands 2)",
},
[71479] = {
"He Softfoot",
"Siege of Orgrimmar",
},
[20881] = {
"Unbound Devastator",
"Tempest Keep: The Arcatraz",
},
[130333] = {
"Gritplate Basilisk",
"The Dread Chain (Islands 4)",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
},
[138847] = {
"Battle-Mender Ka'vaz",
"Havenswood (Islands 2)",
},
[43934] = {
"Soul Fragment",
"Lost City of the Tol'vir",
},
[216658] = {
"Izo, the Grand Splicer",
"City of Threads",
"enUS",
},
[44896] = {
"Pygmy Brute",
"Lost City of the Tol'vir",
},
[224853] = {
"Mutated Hatchling",
"Grim Batol",
"enUS",
},
[162318] = {
"Monk",
"Vision of Ysera Scenario",
},
[163857] = {
"Plaguebound Devoted",
"Plaguefall",
},
[164862] = {
"Weald Shimmermoth",
"De Other Side",
},
[71477] = {
"Embodied Gloom",
"Siege of Orgrimmar",
},
[69944] = {
"Sand Elemental",
"Throne of Thunder",
},
[165469] = {
"Nathrian Enforcer",
"Castle Nathria",
},
[111303] = {
"Nightborne Sage",
"The Nighthold",
},
[71480] = {
"Sun Tenderheart",
"Siege of Orgrimmar",
},
[60708] = {
"Meng the Demented",
"Mogu'shan Vaults",
},
[61339] = {
"Glintrok Oracle",
"Mogu'shan Palace",
},
[113971] = {
"Maiden of Virtue",
"Return to Karazhan",
},
[61341] = {
"Mounted Mogu",
"Mogu'shan Vaults",
},
[53088] = {
"Temple Rat",
"Zul'Gurub",
},
[165470] = {
"Nathrian Executor",
"Castle Nathria",
},
[53795] = {
"Egg Pile",
"Firelands",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[24688] = {
"Wretched Skulker",
"Magisters' Terrace",
"enUS",
},
[144993] = {
"Crazed Thistlebear",
"Warfronts Darkshore - Horde",
},
[135989] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[228951] = {
"Nerubian Stalker",
"The Spiral Weave",
"enUS",
},
[164447] = {
"Skuld",
"Ardenweald Covenant Chapter 2 Scenario",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[207450] = {
"Fungal Stabber",
"Fungal Folly",
"enUS",
},
[71481] = {
"Embodied Sorrow",
"Siege of Orgrimmar",
},
[71993] = {
"Desperation Spawn",
"Siege of Orgrimmar",
},
[34034] = {
"Swarming Guardian",
"Ulduar",
},
[29742] = {
"Snake Wrap",
"Gundrak",
},
[228952] = {
"Nerubian Skulker",
"Skittering Breach",
"enUS",
},
[140069] = {
"Rustpelt Wolf",
"Verdant Wilds (Islands 8)",
},
[165472] = {
"Nathrian Siphoner",
"Castle Nathria",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[172128] = {
"Hero",
"Vision of Ysera Scenario",
},
[152162] = {
"Void-Twisted Skystriker",
"Eastern Kingdoms - Vermillion Redoubt - HoA Scenario",
},
[138968] = {
"Zian-Ti Ironmaw",
"The Dread Chain (Islands 4)",
},
[144690] = {
"Mestrah",
"Battle of Dazar'alor",
},
[228953] = {
"Skittering Intruder",
"Skittering Breach",
"enUS",
},
[69946] = {
"Tree",
"Isle of Conquest",
},
[111413] = {
"Dark Devourers",
"The Emerald Nightmare",
},
[68904] = {
"Suen",
"Throne of Thunder",
},
[71482] = {
"Embodied Desperation",
"Siege of Orgrimmar",
},
[219739] = {
"Infested Spawn",
"Nerub-ar Palace",
"enUS",
},
[144996] = {
"Visage from Beyond",
"Crucible of Storms",
},
[44704] = {
"Minion of Siamat",
"Lost City of the Tol'vir",
},
[228954] = {
"Nerubian Marauder",
"Earthcrawl Mines",
"enUS",
},
[37025] = {
"Stinky",
"Icecrown Citadel",
},
[165474] = {
"Nathrian Assassin",
"Castle Nathria",
},
[207453] = {
"Fungal Rotspreader",
"Fungal Folly",
"enUS",
},
[138647] = {
"Hjana Fogbringer",
"Verdant Wilds (Islands 8)",
},
[71865] = {
"Garrosh Hellscream",
"Siege of Orgrimmar",
},
[82733] = {
"Night-Twisted Shadowsworn",
"Highmaul",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[155236] = {
"Ironroot Strider",
"Torghast, Tower of the Damned",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
},
[140902] = {
"Vog'rish, the Ascended",
"The MOTHERLODE!!",
},
[207454] = {
"Fungal Gutter",
"Fungal Folly",
"enUS",
},
[80048] = {
"Vul'gor",
"Highmaul",
},
[32904] = {
"Dark Rune Commoner",
"Ulduar",
},
[210478] = {
"Infected Beast",
"Fungal Folly",
"enUS",
},
[131407] = {
"Venture Goon",
"The Dread Chain (Islands 4)",
},
[97202] = {
"Olmyr the Enlightened",
"Halls of Valor",
},
[32930] = {
"Kologarn",
"Ulduar",
},
[33186] = {
"Razorscale",
"Ulduar",
},
[12458] = {
"Blackwing Taskmaster",
"Blackwing Lair",
},
[5055] = {
"Deviate Lasher",
"Wailing Caverns",
},
[127732] = {
"Clobex",
"Antorus, the Burning Throne",
},
[58783] = {
"Scarlet Initiate",
"Scarlet Monastery",
},
[90525] = {
"Eredar Chaos Guard",
"Broken Shore Scenario",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
},
[59551] = {
"Bopper",
"Stormstout Brewery",
},
[132713] = {
"Mogul Razdunk",
"The MOTHERLODE!!",
},
[207456] = {
"Fungal Speartender",
"Fungal Folly",
"enUS",
},
[102702] = {
"Wrathguard Dreadblade",
"Broken Shore Scenario",
},
[137487] = {
"Skeletal Hunting Raptor",
"Kings' Rest",
},
[136809] = {
"Stonejaw the Rock-Eater",
"Skittering Hollow (Islands 5)",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[37026] = {
"Skybreaker Sorcerer",
"Icecrown Citadel",
},
[123702] = {
"Feltouched Skitterer",
"Antorus, the Burning Throne",
},
[223839] = {
"Queen's Guard Ge'zah",
"Nerub-ar Palace",
"enUS",
},
[151144] = {
"Hati",
"Crucible of Storms",
},
[54432] = {
"Murozond",
"End Time",
},
[54688] = {
"Time-Twisted Nightsaber",
"End Time",
},
[134941] = {
"Bristlethorn Spider",
"Havenswood (Islands 2)",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
},
[222923] = {
"Repurposed Loaderbot",
"The Stonevault",
"enUS",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[70205] = {
"Weisheng",
"Throne of Thunder",
},
[135248] = {
"Briona the Bloodthirsty",
"Havenswood (Islands 2)",
},
[136811] = {
"Pebblestone Flinger",
"Skittering Hollow (Islands 5)",
},
[34269] = {
"XR-949 Salvagebot",
"Ulduar",
},
[135231] = {
"Spectral Brute",
"Kings' Rest",
},
[123191] = {
"Fel Hound",
"Antorus, the Burning Throne",
},
[149098] = {
"Maiev Shadowsong",
"Warfronts Darkshore - Horde",
},
[207459] = {
"Fungal Rotcaster",
"Fungal Folly",
"enUS",
},
[33699] = {
"Storm Tempered Keeper",
"Ulduar",
},
[224970] = {
"Caustic Bomber",
"Nerub-ar Palace",
"enUS",
},
[153194] = {
"Briny Bubble",
"The Eternal Palace",
},
[219746] = {
"Silken Tomb",
"Nerub-ar Palace",
"enUS",
},
[16142] = {
"Bile Sludge",
"Naxxramas",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[165481] = {
"Court Assassin",
"Castle Nathria",
},
[207460] = {
"Fungarian Flinger",
"Fungal Folly",
"enUS",
},
[169055] = {
"Marrow Scraper",
"Mists of Tirna Scithe",
},
[60576] = {
"Stone Quilen",
"Mogu'shan Vaults",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[156146] = {
"Voidbound Shieldbearer",
"Horrific Vision of Orgrimmar",
},
[122773] = {
"Decimator",
"Antorus, the Burning Throne",
},
[37027] = {
"Skybreaker Hierophant",
"Icecrown Citadel",
},
[137940] = {
"Safety Shark",
"The MOTHERLODE!!",
},
[158315] = {
"Eye of Chaos",
"Horrific Vision of Stormwind",
},
[134766] = {
"Wavespitter",
"Un'gol Ruins (Islands 1)",
},
[58810] = {
"Fragment of Hatred",
"Shado-Pan Monastery",
},
[153196] = {
"Scrapbone Grunter",
"Operation: Mechagon",
},
[155098] = {
"Rexxar",
"Horrific Vision of Orgrimmar",
},
[126776] = {
"Slobbering Fiend",
"Antorus, the Burning Throne",
},
[103224] = {
"Volatile Scorpid",
"The Nighthold",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[61216] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
},
[16170] = {
"Coldmist Stalker",
"Karazhan",
},
[97084] = {
"King Tor",
"Halls of Valor",
},
[29306] = {
"Gal'darah",
"Gundrak",
},
[45269] = {
"Servant of Siamat",
"Lost City of the Tol'vir",
},
[16468] = {
"Spectral Patron",
"Karazhan",
},
[166019] = {
"Shimmermoth",
"Halls of Atonement",
},
[147935] = {
"Azergem Crawler",
"Whispering Reef (Islands 10)",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
},
[24687] = {
"Sunblade Physician",
"Magisters' Terrace",
"enUS",
},
[146832] = {
"Necromancer Disciple",
"Whispering Reef (Islands 10)",
},
[37955] = {
"Blood-Queen Lana'thel",
"Icecrown Citadel",
},
[37021] = {
"Skybreaker Vicar",
"Icecrown Citadel",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[213883] = {
"Dripear the Waxy",
"New Candle, New Hope",
"enUS",
},
[138843] = {
"Wingleader Srak'ik",
"Jorundall (Islands 7)",
},
[167533] = {
"Advent Nevermore",
"Theater of Pain",
},
[112955] = {
"Shadescale Wyrm",
"The Nighthold",
},
[157583] = {
"Forge Keeper",
"Torghast, Tower of the Damned",
},
[36516] = {
"Soulguard Animator",
"The Forge of Souls",
},
[61345] = {
"Mogu Archer",
"Mogu'shan Vaults",
},
[162059] = {
"Kin-Tara",
"Spires of Ascension",
},
[120721] = {
"Lunar Archer",
"Tomb of Sargeras",
},
[132885] = {
"Air Elemental",
"The Dread Chain (Islands 4)",
},
[167534] = {
"Rek the Hardened",
"Theater of Pain",
},
[143985] = {
"Absorb-o-Tron",
"Crucible of Storms",
},
[134768] = {
"Sandskitter the Relentless",
"Whispering Reef (Islands 10)",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[72353] = {
"Dragonmaw Flameslinger",
"Siege of Orgrimmar",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[215657] = {
"Ulgrax the Devourer",
"Nerub-ar Palace",
"enUS",
},
[141938] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[69712] = {
"Ji-Kun",
"Throne of Thunder",
},
[112956] = {
"Shimmering Manaspine",
"The Nighthold",
},
[28578] = {
"Hardened Steel Reaver",
"Halls of Lightning",
},
[134739] = {
"Purification Construct",
"Kings' Rest",
},
[164464] = {
"Xira the Underhanded",
"Theater of Pain",
},
[32933] = {
"Left Arm",
"Ulduar",
},
[214625] = {
"Kobyss Necromancer",
"Tak-Rethan Abyss",
"enUS",
},
[141939] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[167536] = {
"Harugia the Bloodthirsty",
"Theater of Pain",
},
[61389] = {
"Kargesh Highguard",
"Mogu'shan Palace",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[162417] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
},
[155250] = {
"Decayspeaker",
"Torghast, Tower of the Damned",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[30414] = {
"Forgotten One",
"Ahn'kahet: The Old Kingdom",
},
[207468] = {
"Gnarled Reviver",
"Fungal Folly",
"enUS",
},
[36658] = {
"Scourgelord Tyrannus",
"Pit of Saron",
},
[157812] = {
"Billibub Cogspinner",
"Horrific Vision of Stormwind",
},
[30419] = {
"Bound Water Elemental",
"Ahn'kahet: The Old Kingdom",
},
[132877] = {
"Dankscale",
"Whispering Reef (Islands 10)",
},
[73538] = {
"Kor'kron War Wolf",
"Siege of Orgrimmar",
},
[45007] = {
"Enslaved Bandit",
"Lost City of the Tol'vir",
},
[174208] = {
"Court Executor",
"Castle Nathria",
},
[123290] = {
"Sparkleshell Clacker",
"Whispering Reef (Islands 10)",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
},
[54435] = {
"Kìsuke",
"End Time",
},
[139400] = {
"Mirelurk Rivercaller",
"The Dread Chain (Islands 4)",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[229995] = {
"Sureki Arbalest",
"Nerub-ar Palace",
"enUS",
},
[120777] = {
"Guardian Sentry",
"Tomb of Sargeras",
},
[20910] = {
"Twilight Drakonaar",
"Tempest Keep: The Arcatraz",
},
[163619] = {
"Zolramus Bonecarver",
"The Necrotic Wake",
"enUS",
},
[24683] = {
"Sunblade Mage Guard",
"Magisters' Terrace",
"enUS",
},
[40357] = {
"Invoked Shadowflame Spirit",
"Grim Batol",
"enUS",
},
[163978] = {
"Darkwhisper Cultist",
"Blackwing Descent Scenario",
},
[73539] = {
"Kor'kron Den Mother",
"Siege of Orgrimmar",
},
[32934] = {
"Right Arm",
"Ulduar",
},
[130192] = {
"Hulking Demolisher",
"Antorus, the Burning Throne",
},
[12459] = {
"Blackwing Warlock",
"Blackwing Lair",
},
[106545] = {
"Empowered Eye of Gul'dan",
"The Nighthold",
},
[70219] = {
"Putrid Waste",
"Throne of Thunder",
},
[16492] = {
"Syphoner",
"Karazhan",
},
[175238] = {
"Arch-Tyrant Zerios",
"Torghast, Tower of the Damned",
},
[146553] = {
"Kul Tiran Strongarm",
"Battle of Dazar'alor",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[56631] = {
"Hopling",
"Stormstout Brewery",
},
[158411] = {
"Unstable Servant",
"Horrific Vision of Stormwind",
},
[70249] = {
"Focused Eye",
"Throne of Thunder",
},
[86607] = {
"Iron Flame Technician",
"Highmaul",
},
[120720] = {
"Lunar Guard",
"Tomb of Sargeras",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[61347] = {
"Kingsguard",
"Mogu'shan Vaults",
},
[111856] = {
"Guardian Gorroc",
"The Emerald Nightmare",
},
[130027] = {
"Ashvane Marine",
"Tol Dagor",
},
[158327] = {
"Crackling Shard",
"Ny'alotha, the Waking City",
},
[91970] = {
"Felguard Invader",
"Broken Shore Scenario",
},
[160375] = {
"Feral Ritualist",
"Sanguine Depths",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[93506] = {
"Skyfire Gryphon Rider",
"The Maw of Nashal",
},
[173464] = {
"Deplina",
"Castle Nathria",
},
[72354] = {
"Dragonmaw Bonecrusher",
"Siege of Orgrimmar",
},
[150137] = {
"Faceless Subduer",
"Uldir Scenario",
},
[158328] = {
"Il'gynoth",
"Ny'alotha, the Waking City",
},
[72791] = {
"Lingering Corruption",
"Siege of Orgrimmar",
},
[134939] = {
"Bristlethorn Maneater",
"Verdant Wilds (Islands 8)",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[109804] = {
"Plasma Sphere",
"The Nighthold",
},
[73541] = {
"Kor'kron Wolf Pup",
"Siege of Orgrimmar",
},
[168337] = {
"Moldovaak",
"Castle Nathria",
},
[144840] = {
"Mottled Fawn",
"Warfronts Darkshore - Horde",
},
[114312] = {
"Moroes",
"Return to Karazhan",
},
[138837] = {
"Zara'thik Ambershaper",
"Jorundall (Islands 7)",
},
[146326] = {
"Headhunter Gal'wana",
"Battle of Dazar'alor",
},
[146892] = {
"Fleshrot Marauder",
"Jorundall (Islands 7)",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[17521] = {
"The Big Bad Wolf",
"Karazhan",
},
[44924] = {
"Oathsworn Myrmidon",
"Lost City of the Tol'vir",
},
[43430] = {
"Stonecore Berserker",
"The Stonecore",
},
[150139] = {
"K'thxx the Void Hunter",
"Uldir Scenario",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[36666] = {
"Spectral Warden",
"The Forge of Souls",
},
[136829] = {
"Witherbranch Axe Thrower",
"Jorundall (Islands 7)",
},
[49267] = {
"Crystal Shard",
"The Stonecore",
},
[61348] = {
"Lorewalker Cho",
"Mogu'shan Vaults",
},
[58108] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
},
[150397] = {
"King Mechagon",
"Operation: Mechagon",
},
[22869] = {
"Illidari Boneslicer",
"Black Temple",
"enUS",
},
[22997] = {
"Flame of Azzinoth",
"Black Temple",
"enUS",
},
[139868] = {
"Voru'kar Nerubian",
"Skittering Hollow (Islands 5)",
},
[147614] = {
"Dark Iron Primalist",
"Battle of Dazar'alor",
},
[86609] = {
"Iron Warmaster",
"Highmaul",
},
[113106] = {
"Sickly Cougar",
"The Emerald Nightmare",
},
[139021] = {
"Bloodtracker",
"Verdant Wilds (Islands 8)",
},
[164550] = {
"Slithering Ooze",
"Plaguefall",
},
[56895] = {
"Weak Spot",
"Gate of the Setting Sun",
},
[70209] = {
"Untrained Quilen",
"Throne of Thunder",
},
[16171] = {
"Coldmist Widow",
"Karazhan",
},
[136831] = {
"Witherbranch Witch Doctor",
"Jorundall (Islands 7)",
},
[24554] = {
"Eramas Brightblaze",
"Magister's Terrace",
},
[139008] = {
"Primal Mauler",
"Verdant Wilds (Islands 8)",
},
[164476] = {
"Tortured Amalgamation",
"Ardenweald Covenant Chapter 2 Scenario",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
},
[166524] = {
"Deathwalker",
"Theater of Pain",
},
[157102] = {
"Imperial Consular",
"Torghast, Tower of the Damned",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[140431] = {
"Craghoof Goat",
"Verdant Wilds (Islands 8)",
},
[145927] = {
"Starcaller Ellana",
"Whispering Reef (Islands 10)",
},
[152324] = {
"Aldwin Laughlin",
"Horrific Vision of Stormwind",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[34234] = {
"Runeforged Sentry",
"Ulduar",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[155251] = {
"Elder Longbranch",
"Torghast, Tower of the Damned",
},
[192787] = {
"Qalashi Spinecrusher",
"Neltharus",
"enUS",
},
[168713] = {
"Dread Caller Skulfir",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[140038] = {
"Abyssal Eel",
"Shrine of the Storm",
},
[70246] = {
"Spirit Flayer",
"Throne of Thunder",
},
[53414] = {
"Magic Hunter",
"Nexus Legendary",
},
[146367] = {
"Char'golm",
"Battle of Dazar'alor",
},
[207481] = {
"Spinshroom",
"Fungal Folly",
"enUS",
},
[134786] = {
"Spineclaw Sandsnapper",
"Havenswood (Islands 2)",
},
[168574] = {
"Pestilent Harvester",
"Plaguefall",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
},
[154240] = {
"Azshara's Devoted",
"The Eternal Palace",
},
[73806] = {
"Kor'kron Machinist",
"Siege of Orgrimmar",
},
[70224] = {
"Rotting Scavenger",
"Throne of Thunder",
},
[127810] = {
"Slobbering Fiend",
"Antorus, the Burning Throne",
},
[207482] = {
"Invasive Sporecap",
"Fungal Folly",
"enUS",
},
[134787] = {
"Spineclaw Crab",
"Havenswood (Islands 2)",
},
[106087] = {
"Elerethe Renferal",
"The Emerald Nightmare",
},
[161408] = {
"Malicious Growth",
"Temple of Sethraliss",
},
[162432] = {
"Awakened Terror",
"Ny'alotha, the Waking City",
},
[130644] = {
"Daggertooth",
"Whispering Reef (Islands 10)",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[132740] = {
"Venomscale Hydra",
"Havenswood (Islands 2)",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[134788] = {
"Spineclaw Rockshell",
"Whispering Reef (Islands 10)",
},
[140432] = {
"Craghoof Leaper",
"Havenswood (Islands 2)",
},
[150136] = {
"Faceless Render",
"Uldir Scenario",
},
[21246] = {
"Serpentshrine Sporebat",
"Coilfang: Serpentshrine Cavern",
},
[163457] = {
"Forsworn Vanguard",
"Spires of Ascension",
},
[70245] = {
"Training Dummy",
"Throne of Thunder",
},
[132741] = {
"Flamescale Hydra",
"Whispering Reef (Islands 10)",
},
[129471] = {
"Deepsea Sandcrawler",
"Havenswood (Islands 2)",
},
[104262] = {
"Burning Ember",
"The Nighthold",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[169601] = {
"Stone Legion Commando",
"Castle Nathria",
},
[30549] = {
"Baron Rivendare",
"Naxxramas",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[34924] = {
"High Commander Halford Wyrmbane",
"Isle of Conquest",
},
[132742] = {
"Flamescale Strider",
"Skittering Hollow (Islands 5)",
},
[138629] = {
"Vicar Djosa",
"Havenswood (Islands 2)",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[70247] = {
"Venomous Head",
"Throne of Thunder",
},
[94822] = {
"Abigail the Huntress",
"The Maw of Nashal",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[71772] = {
"Kor'kron Assassin",
"Siege of Orgrimmar",
},
[130621] = {
"Squallshaper Bryson",
"Havenswood (Islands 2)",
},
[73184] = {
"Starved Yeti",
"Siege of Orgrimmar",
},
[32666] = {
"Training Dummy",
"Siege of Orgrimmar",
},
[168579] = {
"Fen Hatchling",
"Plaguefall",
},
[16471] = {
"Skeletal Usher",
"Karazhan",
},
[116550] = {
"Spectral Patron",
"Return to Karazhan",
},
[138887] = {
"Bloodwake Mystic",
"Jorundall (Islands 7)",
},
[32938] = {
"Flash Freeze",
"Ulduar",
},
[132744] = {
"Frostscale Hydra",
"The Dread Chain (Islands 4)",
},
[12460] = {
"Death Talon Wyrmguard",
"Blackwing Lair",
},
[108359] = {
"Volatile Scorpid",
"The Nighthold",
},
[168580] = {
"Plagueborer",
"Plaguefall",
},
[20900] = {
"Unchained Doombringer",
"Tempest Keep: The Arcatraz",
},
[73415] = {
"Ichor of Y'Shaarj",
"Siege of Orgrimmar",
},
[164339] = {
"Mawsworn Bowman",
"Ardenweald Covenant Chapter 2 Scenario",
},
[90506] = {
"Felfire Imp",
"Broken Shore Scenario",
},
[132745] = {
"Frostscale Wanderer",
"The Dread Chain (Islands 4)",
},
[52392] = {
"Gurubashi Master Chef",
"Zul'Gurub",
},
[152199] = {
"Magister Hathorel",
"Siege of Orgrimmar - Coup Scenario",
},
[135817] = {
"Zephyr",
"The Dread Chain (Islands 4)",
},
[136841] = {
"Thu'zun the Vile",
"Jorundall (Islands 7)",
},
[36522] = {
"Soul Horror",
"The Forge of Souls",
},
[155271] = {
"Abyssal Spearhunter",
"The Eternal Palace",
},
[33136] = {
"Guardian of Yogg-Saron",
"Ulduar",
},
[132746] = {
"Frostscale Broodmother",
"Whispering Reef (Islands 10)",
},
[158343] = {
"Organ of Corruption",
"Ny'alotha, the Waking City",
},
[108360] = {
"Acidmaw Scorpid",
"The Nighthold",
},
[135818] = {
"Gust Soldier",
"The Dread Chain (Islands 4)",
},
[145033] = {
"Arctic Hunter",
"The Dread Chain (Islands 4)",
},
[54952] = {
"Brittle Ghoul",
"End Time",
},
[155272] = {
"Blackwater Oracle",
"The Eternal Palace",
},
[85711] = {
"Aquatic Technician",
"Blackrock Foundry",
},
[119724] = {
"Tidal Surger",
"Whispering Reef (Islands 10)",
},
[13996] = {
"Blackwing Technician",
"Blackwing Lair",
},
[134795] = {
"Veiled Hermit",
"Whispering Reef (Islands 10)",
},
[135819] = {
"Living Tornado",
"The Dread Chain (Islands 4)",
},
[161416] = {
"Aqir Shadowcrafter",
"Ny'alotha, the Waking City",
},
[71770] = {
"Kor'kron Ironblade",
"Siege of Orgrimmar",
},
[155273] = {
"Garval the Vanquisher",
"The Eternal Palace",
},
[217268] = {
"Weeping Shade",
"Nightfall Sanctum",
"enUS",
},
[145035] = {
"Swifttail Courser",
"Skittering Hollow (Islands 5)",
},
[150154] = {
"Saurolisk Bonenipper",
"Operation: Mechagon",
},
[134796] = {
"King Spineclaw",
"Whispering Reef (Islands 10)",
},
[152202] = {
"Rowa Bloodstrike",
"Siege of Orgrimmar - Coup Scenario",
},
[136844] = {
"Sandscalp Warrior",
"Skittering Hollow (Islands 5)",
},
[16489] = {
"Chaotic Sentience",
"Karazhan",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[71529] = {
"Thok the Bloodthirsty",
"Siege of Orgrimmar",
},
[146872] = {
"Kachota the Exiled",
"Jorundall (Islands 7)",
},
[130655] = {
"Bobby Howlis",
"Tol Dagor",
},
[134797] = {
"Ocean Recluse",
"Whispering Reef (Islands 10)",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[136845] = {
"Sandscalp Axe Thrower",
"Skittering Hollow (Islands 5)",
},
[103896] = {
"Felfire Imp",
"Broken Shore Scenario",
},
[155275] = {
"Tideshaper Korvess",
"The Eternal Palace",
},
[131726] = {
"Gunnolf the Ferocious",
"Whispering Reef (Islands 10)",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[22871] = {
"Teron Gorefiend",
"Black Temple",
"enUS",
},
[134798] = {
"Abyss Crawler",
"Un'gol Ruins (Islands 1)",
},
[62632] = {
"Sik'thik Engineer",
"Siege of Niuzao Temple",
},
[136846] = {
"Sandscalp Blood Drinker",
"Whispering Reef (Islands 10)",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[155276] = {
"Bursting Cragfish",
"The Eternal Palace",
},
[131727] = {
"Fenrae the Cunning",
"Whispering Reef (Islands 10)",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
},
[223876] = {
"Impaling Spike",
"Nerub-ar Palace",
"enUS",
},
[134799] = {
"Fathomclaw",
"The Rotting Mire (Islands 9)",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
},
[136847] = {
"Sandscalp Shadow Hunter",
"Whispering Reef (Islands 10)",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
"enUS",
},
[138569] = {
"Harbinger Vor'zzyx",
"Havenswood (Islands 2)",
},
[131728] = {
"Raul the Tenacious",
"Whispering Reef (Islands 10)",
},
[132802] = {
"Craghorn Yeti",
"The Dread Chain (Islands 4)",
},
[123478] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
},
[139006] = {
"Wildlands Furbolg",
"Verdant Wilds (Islands 8)",
},
[30625] = {
"Vurox",
"Ahn'kahet: The Old Kingdom",
},
[145039] = {
"Snowstalker",
"Skittering Hollow (Islands 5)",
},
[173708] = {
"Anchoring Rune",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[155278] = {
"Shimmerskin Pufferfish",
"The Eternal Palace",
},
[131729] = {
"Lyco",
"Whispering Reef (Islands 10)",
},
[17624] = {
"Laughing Skull Warden",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[150159] = {
"King Gobbamak",
"Operation: Mechagon",
},
[71504] = {
"Siegecrafter Blackfuse",
"Siege of Orgrimmar",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[56915] = {
"Sun",
"Temple of the Jade Serpent",
},
[44715] = {
"Vicious Mindlasher",
"Throne of the Tides",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[16491] = {
"Mana Feeder",
"Karazhan",
},
[113053] = {
"Mother Sepestra",
"Broken Shore Scenario",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
},
[167566] = {
"Bleakwing Assassin",
"Castle Nathria",
},
[62633] = {
"Sik'thik Builder",
"Siege of Niuzao Temple",
},
[16216] = {
"Unholy Swords",
"Naxxramas",
},
[135470] = {
"Aka'ali the Conqueror",
"Kings' Rest",
},
[165030] = {
"Lady Inerva Darkvein",
"Castle Nathria Scenario",
},
[30286] = {
"Frostbringer",
"Ahn'kahet: The Old Kingdom",
},
[132755] = {
"Breakbeak Scavenger",
"Verdant Wilds (Islands 8)",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[120651] = {
"Explosives",
"Waycrest Manor",
},
[168591] = {
"Ravenous Dreadbat",
"Sanguine Depths",
},
[140455] = {
"Bramblefur Calf",
"Havenswood (Islands 2)",
},
[170927] = {
"Erupting Ooze",
"Plaguefall",
},
[106317] = {
"Storm Totem",
"Crucible of Storms",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[123477] = {
"Antoran Doomguard",
"Antorus, the Burning Throne",
},
[33453] = {
"Dark Rune Watcher",
"Ulduar",
},
[146882] = {
"Gargantuan Blighthound",
"Jorundall (Islands 7)",
},
[153755] = {
"Naeno Megacrash",
"Operation: Mechagon",
},
[152498] = {
"Dark Ranger",
"Siege of Orgrimmar - Coup Scenario",
},
[129232] = {
"Mogul Razdunk",
"The MOTHERLODE!!",
},
[139694] = {
"Mordshell",
"The Dread Chain (Islands 4)",
},
[20901] = {
"Sargeron Archer",
"Tempest Keep: The Arcatraz",
},
[165521] = {
"Lady Inerva Darkvein",
"Castle Nathria",
},
[103758] = {
"Star Augur Etraeus",
"The Nighthold",
},
[29822] = {
"Drakkari Fire Weaver",
"Gundrak",
},
[112973] = {
"Duskwatch Weaver",
"The Nighthold",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[152390] = {
"Unruly Experiment",
"Siege of Orgrimmar - Coup Scenario",
},
[110616] = {
"Dark Worshipper",
"Broken Shore Scenario",
},
[45001] = {
"Enslaved Bandit",
"Lost City of the Tol'vir",
},
[214668] = {
"Venture Co. Patron",
"Cinderbrew Meadery",
"enUS",
},
[32874] = {
"Iron Ring Guard",
"Ulduar",
},
[134806] = {
"Bloodsnapper",
"Verdant Wilds (Islands 8)",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[54699] = {
"Time-Twisted Nightsaber",
"End Time",
},
[28583] = {
"Blistering Steamrager",
"Halls of Lightning",
},
[69459] = {
"Bound Water Elemental",
"Throne of Thunder",
},
[138654] = {
"Vestar of the Tattered Sail",
"Havenswood (Islands 2)",
},
[173714] = {
"Mistveil Nightblossom",
"Mists of Tirna Scithe",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[134807] = {
"Ancient Spineshell",
"Whispering Reef (Islands 10)",
},
[160404] = {
"Angry Bear Rug Spirit",
"Horrific Vision of Stormwind",
},
[144747] = {
"Pa'ku's Aspect",
"Battle of Dazar'alor",
},
[16473] = {
"Spectral Performer",
"Karazhan",
},
[106319] = {
"Ember Totem",
"Crucible of Storms",
},
[24664] = {
"Kael'thas Sunstrider",
"Magisters' Terrace",
"enUS",
},
[157333] = {
"Darkwhisper Cultist",
"Blackwing Descent Scenario",
},
[12461] = {
"Death Talon Overseer",
"Blackwing Lair",
},
[139011] = {
"Feral Protector",
"Verdant Wilds (Islands 8)",
},
[33966] = {
"Crusher Tentacle",
"Ulduar",
},
[137485] = {
"Bloodsworn Agent",
"Kings' Rest",
},
[96611] = {
"Angerhoof Bull",
"Halls of Valor",
},
[22954] = {
"Illidari Fearbringer",
"Black Temple",
"enUS",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[59819] = {
"Artillery",
"Gate of the Setting Sun",
},
[5756] = {
"Deviate Venomwing",
"Wailing Caverns",
},
[132797] = {
"Pinegraze Calf",
"Snowblossom Village (Islands 3)",
},
[45096] = {
"Tamed Tol'vir Prowler",
"Lost City of the Tol'vir",
},
[105591] = {
"Nightmare Horror",
"The Emerald Nightmare",
},
[69351] = {
"Greater Cave Bat",
"Throne of Thunder",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[37038] = {
"Vengeful Fleshreaper",
"Icecrown Citadel",
},
[149144] = {
"Jaina's Tide Elemental",
"Battle of Dazar'alor",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[111071] = {
"Pulsauron",
"The Nighthold",
},
[135834] = {
"Vile Cloud",
"The Rotting Mire (Islands 9)",
},
[54700] = {
"Time-Twisted Nightsaber",
"End Time",
},
[217299] = {
"Ostiary Wystan",
"Hall of Awakening",
"enUS",
},
[33719] = {
"Emerald Consort",
"Ulduar",
},
[20859] = {
"Arcatraz Warder",
"Tempest Keep: The Arcatraz",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
},
[140987] = {
"Fleshmelter the Insatiable",
"Un'gol Ruins (Islands 1)",
},
[54512] = {
"Time-Twisted Sentinel",
"End Time",
},
[71395] = {
"Modified Anima Golem",
"Siege of Orgrimmar",
},
[124352] = {
"Kunzen Stalker",
"Un'gol Ruins (Islands 1)",
},
[106321] = {
"Tailwind Totem",
"Crucible of Storms",
},
[173446] = {
"Hargitas",
"Castle Nathria",
},
[157337] = {
"Spawn of Shad'har",
"Blackwing Descent Scenario",
},
[64068] = {
"Mogu'shan Engine Keeper",
"Mogu'shan Vaults",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[37571] = {
"Darkfallen Advisor",
"Icecrown Citadel",
},
[140986] = {
"Acidic Burrower",
"The Dread Chain (Islands 4)",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[43438] = {
"Corborus",
"The Stonecore",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
},
[29826] = {
"Drakkari Medicine Man",
"Gundrak",
},
[135837] = {
"Cyclonic Lieutenant",
"Jorundall (Islands 7)",
},
[176026] = {
"Dancing Fools",
"Castle Nathria",
},
[94576] = {
"Skyfire Gryphon",
"The Maw of Nashal",
},
[22848] = {
"Storm Fury",
"Black Temple",
"enUS",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[36830] = {
"Wrathbone Laborer",
"Pit of Saron",
},
[22873] = {
"Coilskar General",
"Black Temple",
"enUS",
},
[122718] = {
"Felblade Shocktrooper",
"Antorus, the Burning Throne",
},
[217748] = {
"Nexus-Princess Ky'veza",
"Nerub-ar Palace",
"enUS",
},
[153244] = {
"Oblivion Elemental",
"Horrific Vision of Orgrimmar",
},
[54701] = {
"Time-Twisted Huntress",
"End Time",
},
[102227] = {
"Dread Harpooner",
"Azsuna",
},
[59820] = {
"Pandaren Cannoneer",
"Gate of the Setting Sun",
},
[157340] = {
"Skeletal Remains",
"Torghast, Tower of the Damned",
},
[129373] = {
"Dockhound Packmaster",
"Siege of Boralus",
},
[162051] = {
"Frenzied Ghoul",
"Sanguine Depths",
},
[135839] = {
"Swampgas",
"Jorundall (Islands 7)",
},
[105299] = {
"Recursive Elemental",
"The Nighthold",
},
[136863] = {
"Great Mota",
"Skittering Hollow (Islands 5)",
},
[130896] = {
"Blackout Barrel",
"Freehold",
},
[221845] = {
"Xur'khun the Defiled",
"Nerub-ar Palace",
"enUS",
},
[140984] = {
"Frostbore Worm",
"Skittering Hollow (Islands 5)",
},
[146834] = {
"Necromancer Master",
"Whispering Reef (Islands 10)",
},
[42188] = {
"Ozruk",
"The Stonecore",
},
[136864] = {
"Uguu the Feared",
"Whispering Reef (Islands 10)",
},
[161437] = {
"Explosive Scarab",
"Temple of Sethraliss",
},
[51962] = {
"ImPetIGo",
"Isle of Conquest",
},
[17370] = {
"Laughing Skull Enforcer",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[136100] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[17626] = {
"Laughing Skull Legionnaire",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[151028] = {
"Thornstalker Nydora",
"Snowblossom Village (Islands 3)",
},
[138466] = {
"Obsidian Whelp",
"Verdant Wilds (Islands 8)",
},
[140983] = {
"Frostbore Burster",
"Skittering Hollow (Islands 5)",
},
[32873] = {
"Ancient Rune Giant",
"Ulduar",
},
[87520] = {
"Animated Slag",
"Blackrock Foundry",
},
[18394] = {
"Ethereal Wraith",
"Auchindoun: Mana-Tombs",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[73226] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
},
[158367] = {
"Basher Tentacle",
"Ny'alotha, the Waking City",
},
[175401] = {
"Warden of Souls",
"Torghast, Tower of the Damned",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[32845] = {
"Hodir",
"Ulduar",
},
[78001] = {
"Cloudburst Totem",
"Shrine of the Storm",
},
[69465] = {
"Jin'rokh the Breaker",
"Throne of Thunder",
},
[123532] = {
"Dark Keeper",
"Antorus, the Burning Throne",
},
[61139] = {
"Shan-xi Watershaper",
"Mogu'shan Vaults",
},
[102239] = {
"Lord Brinebeard",
"Azsuna",
},
[155917] = {
"Azsh'ari Stormcaller",
"The Eternal Palace",
},
[160416] = {
"Angry Ale Barrel Spirit",
"Horrific Vision of Stormwind",
},
[145058] = {
"Shadefeather Raven",
"Verdant Wilds (Islands 8)",
},
[56637] = {
"Ook-Ook",
"Stormstout Brewery",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[45378] = {
"Augh",
"Lost City of the Tol'vir",
},
[42810] = {
"Crystalspawn Giant",
"The Stonecore",
},
[42428] = {
"Devout Follower",
"The Stonecore",
},
[143011] = {
"Sandy Perch",
"Whispering Reef (Islands 10)",
},
[17534] = {
"Julianne",
"Karazhan",
},
[145059] = {
"Cunning Nightwing",
"Havenswood (Islands 2)",
},
[44980] = {
"Neferset Theurgist",
"Lost City of the Tol'vir",
},
[114628] = {
"Skeletal Waiter",
"Return to Karazhan",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[52577] = {
"Left Foot",
"Firelands",
},
[33350] = {
"Mimiron",
"Ulduar",
},
[103225] = {
"Acidmaw Scorpid",
"The Nighthold",
},
[214684] = {
"Invading Scrapper",
"Tak-Rethan Abyss",
"enUS",
},
[145060] = {
"Monstrous Shadefeather",
"Whispering Reef (Islands 10)",
},
[158371] = {
"Zardeth of the Black Claw",
"Horrific Vision of Stormwind",
},
[53167] = {
"Unbound Pyrelord",
"Firelands",
},
[53423] = {
"Twilight Spellbinder",
"Nexus Legendary",
},
[173729] = {
"Manifestation of Pride",
"Sanguine Depths",
},
[22874] = {
"Coilskar Harpooner",
"Black Temple",
"enUS",
},
[134822] = {
"Gritplate Matriarch",
"Havenswood (Islands 2)",
},
[135846] = {
"Sand-Crusted Striker",
"Temple of Sethraliss",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[54517] = {
"Time-Twisted Shadowtalon",
"End Time",
},
[61247] = {
"Glintrok Greenhorn",
"Mogu'shan Palace",
},
[21212] = {
"Lady Vashj",
"Coilfang: Serpentshrine Cavern",
},
[148243] = {
"Fallen Disciple",
"Battle of Dazar'alor",
},
[148894] = {
"Lost Soul",
"Siege of Boralus",
},
[71515] = {
"General Nazgrim",
"Siege of Orgrimmar",
},
[160420] = {
"Angry Book Spirit",
"Horrific Vision of Stormwind",
},
[139460] = {
"Stonebound Earthweaver",
"The Dread Chain (Islands 4)",
},
[168326] = {
"Shattered Visage",
"De Other Side",
},
[132868] = {
"Congealed Azerite",
"Havenswood (Islands 2)",
},
[53732] = {
"Unbound Smoldering Elemental",
"Firelands",
},
[157349] = {
"Void Boar",
"Horrific Vision of Orgrimmar",
},
[158373] = {
"Roberto Pupellyverbos",
"Horrific Vision of Stormwind",
},
[137474] = {
"King Timalji",
"Kings' Rest",
},
[144300] = {
"Mechagon Citizen",
"Operation: Mechagon",
},
[123533] = {
"Tarneth",
"Antorus, the Burning Throne",
},
[21224] = {
"Tidewalker Depth-Seer",
"Coilfang: Serpentshrine Cavern",
},
[17371] = {
"Shadowmoon Warlock",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[164517] = {
"Tred'ova",
"Mists of Tirna Scithe",
"enUS",
},
[140968] = {
"Garnetback Striker",
"Whispering Reef (Islands 10)",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[129372] = {
"Blacktar Bomber",
"Siege of Boralus",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[105304] = {
"Dominator Tentacle",
"The Emerald Nightmare",
},
[69473] = {
"Ra-den",
"Throne of Thunder",
},
[44977] = {
"Neferset Torturer",
"Lost City of the Tol'vir",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[52438] = {
"Mortaxx",
"Zul'Gurub",
},
[158375] = {
"Corruptor Tentacle",
"Ny'alotha, the Waking City",
},
[37972] = {
"Prince Keleseth",
"Icecrown Citadel",
},
[21231] = {
"Greyheart Shield-Bearer",
"Coilfang: Serpentshrine Cavern",
},
[145065] = {
"Fledgling Nightwing",
"Verdant Wilds (Islands 8)",
},
[157452] = {
"Nightmare Antigen",
"Ny'alotha, the Waking City",
},
[137473] = {
"Guard Captain Atu",
"Kings' Rest",
},
[139946] = {
"Heart Guardian",
"Temple of Sethraliss",
},
[140970] = {
"Cragburster",
"Whispering Reef (Islands 10)",
},
[158376] = {
"Psychus",
"Ny'alotha, the Waking City",
},
[161124] = {
"Urg'roth, Breaker of Heroes",
"Temple of Sethraliss",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[139005] = {
"Wildlands Tracker",
"Verdant Wilds (Islands 8)",
},
[59598] = {
"Lesser Sha",
"Temple of the Jade Serpent",
},
[63808] = {
"Faintly Glowing Gem",
"Mogu'shan Palace",
},
[52402] = {
"Venomtooth",
"Zul'Gurub",
},
[222881] = {
"Royal Weaver",
"Nerub-ar Palace",
"enUS",
},
[172312] = {
"Spinemaw Gorger",
"Mists of Tirna Scithe",
"enUS",
},
[134828] = {
"Aqualing",
"Shrine of the Storm",
},
[130024] = {
"Soggy Shiprat",
"Freehold",
},
[145067] = {
"Shadefeather Hatchling",
"Verdant Wilds (Islands 8)",
},
[21339] = {
"Coilfang Hate-Screamer",
"Coilfang: Serpentshrine Cavern",
},
[44404] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[145053] = {
"Eldritch Abomination",
"Crucible of Storms",
},
[157354] = {
"Vexiona",
"Ny'alotha, the Waking City",
},
[5762] = {
"Deviate Moccasin",
"Wailing Caverns",
},
[28580] = {
"Hardened Steel Skycaller",
"Halls of Lightning",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[20905] = {
"Blazing Trickster",
"Tempest Keep: The Arcatraz",
},
[126767] = {
"Clubfist Beastlord",
"Antorus, the Burning Throne",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[140973] = {
"Bore Tunneler",
"Verdant Wilds (Islands 8)",
},
[22875] = {
"Coilskar Sea-Caller",
"Black Temple",
"enUS",
},
[33716] = {
"Ruby Consort",
"Ulduar",
},
[152236] = {
"Lady Ashvane",
"The Eternal Palace",
},
[114794] = {
"Skeletal Hound",
"Return to Karazhan",
},
[33715] = {
"Charged Sphere",
"Ulduar",
},
[33203] = {
"Ancient Conservator",
"Ulduar",
},
[219810] = {
"Nerubian Ritualist",
"Skittering Breach",
"enUS",
},
[140974] = {
"Eldercraw",
"Verdant Wilds (Islands 8)",
},
[120153] = {
"Eonic Defender",
"Tomb of Sargeras",
},
[112474] = {
"Corrupted Totem",
"The Emerald Nightmare",
},
[36564] = {
"Soulguard Bonecaster",
"The Forge of Souls",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[3670] = {
"Lord Pythas",
"Wailing Caverns",
},
[157356] = {
"Extractor Thelsara",
"Blackwing Descent Scenario",
},
[41139] = {
"Naz'jar Spiritmender",
"Throne of the Tides",
},
[140975] = {
"Youngercraw",
"The Rotting Mire (Islands 9)",
},
[150190] = {
"HK-8 Aerial Oppression Unit",
"Operation: Mechagon",
},
[159405] = {
"Aqir Scarab",
"Ny'alotha, the Waking City",
},
[33121] = {
"Iron Construct",
"Ulduar",
},
[28579] = {
"Hardened Steel Berserker",
"Halls of Lightning",
},
[33818] = {
"Twilight Adherent",
"Ulduar",
},
[163501] = {
"Forsworn Skirmisher",
"Spires of Ascension",
},
[53223] = {
"Flamewaker Beast Handler",
"Firelands",
},
[140976] = {
"Bore Worm",
"The Dread Chain (Islands 4)",
},
[61245] = {
"Capacitor Totem",
"Shrine of the Storm",
},
[28582] = {
"Stormforged Mender",
"Halls of Lightning",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
"enUS",
},
[164267] = {
"Margrave Stradama",
"Plaguefall",
},
[144796] = {
"High Tinker Mekkatorque",
"Battle of Dazar'alor",
},
[36788] = {
"Deathwhisper Necrolyte",
"Pit of Saron",
},
[221863] = {
"Summoned Acolyte",
"Nerub-ar Palace",
"enUS",
},
[103769] = {
"Xavius",
"The Emerald Nightmare",
},
[72787] = {
"Blade of the Hundred Steps",
"Siege of Orgrimmar",
},
[36841] = {
"Fallen Warrior",
"Pit of Saron",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[52962] = {
"Zandalari Archon",
"Zul'Gurub",
},
[71392] = {
"Shadow Ritualist Phylactery",
"Siege of Orgrimmar",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[145064] = {
"Blaze",
"Verdant Wilds (Islands 8)",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[39960] = {
"Deep Murloc Drudge",
"Throne of the Tides",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[5048] = {
"Deviate Adder",
"Wailing Caverns",
},
[69427] = {
"Dark Animus",
"Throne of Thunder",
},
[33202] = {
"Ancient Water Spirit",
"Ulduar",
},
[145928] = {
"Skavis Nightstalker",
"Verdant Wilds (Islands 8)",
},
[134949] = {
"Slateskitter",
"Verdant Wilds (Islands 8)",
},
[140094] = {
"Mudsnout Thornback",
"Un'gol Ruins (Islands 1)",
},
[33717] = {
"Azure Consort",
"Ulduar",
},
[59605] = {
"Sodden Hozen Brawler",
"Stormstout Brewery",
},
[136884] = {
"Bristlethorn Battleguard",
"Un'gol Ruins (Islands 1)",
},
[20897] = {
"Ethereum Wave-Caster",
"Tempest Keep: The Arcatraz",
},
[69474] = {
"Kresh the Ripper",
"Mogu Island Progression Events",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[54191] = {
"Risen Ghoul",
"End Time",
},
[150195] = {
"Gnome-Eating Slime",
"Operation: Mechagon",
},
[44976] = {
"Neferset Plaguebringer",
"Lost City of the Tol'vir",
},
[129371] = {
"Riptide Shredder",
"Siege of Boralus",
"enUS",
},
[136885] = {
"Bristlemane Bramble-Weaver",
"Un'gol Ruins (Islands 1)",
},
[69834] = {
"Lightning Guardian",
"Throne of Thunder",
},
[163506] = {
"Forsworn Stealthclaw",
"Spires of Ascension",
},
[160291] = {
"Ashwalker Assassin",
"Ny'alotha, the Waking City",
},
[140981] = {
"Gnashing Horror",
"Skittering Hollow (Islands 5)",
},
[22876] = {
"Coilskar Soothsayer",
"Black Temple",
"enUS",
},
[37813] = {
"Deathbringer Saurfang",
"Icecrown Citadel",
},
[139692] = {
"Brineshell Elder",
"The Dread Chain (Islands 4)",
},
[105301] = {
"Expedient Elemental",
"The Nighthold",
},
[127725] = {
"Felblade Shocktrooper",
"Antorus, the Burning Throne",
},
[69475] = {
"Arcanital Tula'chek",
"Mogu Island Progression Events",
},
[171432] = {
"Suppressor Hersi",
"Torghast, Tower of the Damned",
},
[152508] = {
"Dusky Tremorbeast",
"Torghast, Tower of the Damned",
},
[114262] = {
"Attumen the Huntsman",
"Return to Karazhan",
},
[72365] = {
"Dragonmaw Cannoneer",
"Siege of Orgrimmar",
},
[96608] = {
"Ebonclaw Worg",
"Halls of Valor",
},
[76945] = {
"Ironcrusher",
"Blackrock Foundry",
},
[146102] = {
"Living Bomb",
"Battle of Dazar'alor",
},
[114526] = {
"Ghostly Understudy",
"Return to Karazhan",
},
[145123] = {
"Myara Nightsong",
"Warfronts Darkshore - Horde",
},
[157365] = {
"Crackling Stalker",
"Ny'alotha, the Waking City",
},
[12463] = {
"Death Talon Flamescale",
"Blackwing Lair",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[36678] = {
"Professor Putricide",
"Icecrown Citadel",
},
[58803] = {
"Residual Hatred",
"Shado-Pan Monastery",
},
[146103] = {
"Living Bomb",
"Battle of Dazar'alor",
},
[23030] = {
"Dragonmaw Sky Stalker",
"Black Temple",
"enUS",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[157366] = {
"Void Hunter",
"Ny'alotha, the Waking City",
},
[120158] = {
"Volatile Corruption",
"Tomb of Sargeras",
},
[104288] = {
"Trilliax",
"The Nighthold",
},
[96609] = {
"Gildedfur Stag",
"Halls of Valor",
},
[136889] = {
"Razorcaller Tuk",
"Un'gol Ruins (Islands 1)",
},
[146104] = {
"Living Bomb",
"Battle of Dazar'alor",
},
[44981] = {
"Oathsworn Skinner",
"Lost City of the Tol'vir",
},
[113307] = {
"Chronowraith",
"The Nighthold",
},
[140985] = {
"Acidic Worm",
"The Dread Chain (Islands 4)",
},
[174773] = {
"Spiteful Shade",
"Mists of Tirna Scithe",
},
[155900] = {
"Zsal'iss",
"The Eternal Palace",
},
[72352] = {
"Dragonmaw Ebon Stalker",
"Siege of Orgrimmar",
},
[52322] = {
"Witch Doctor Qu'in",
"Zul'Gurub",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[111210] = {
"Searing Infernal",
"The Nighthold",
},
[173469] = {
"Kullan",
"Castle Nathria",
},
[157368] = {
"Velinaria",
"Blackwing Descent Scenario",
},
[150959] = {
"Mawsworn Interceptor",
"Torghast, Tower of the Damned",
},
[159416] = {
"Spiked Tentacle",
"Ny'alotha, the Waking City",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[64947] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
},
[147098] = {
"Spirit of Xuen",
"Battle of Dazar'alor",
},
[36808] = {
"Deathspeaker Zealot",
"Icecrown Citadel",
},
[33354] = {
"Corrupted Servitor",
"Ulduar",
},
[165560] = {
"Gormling Larva",
"Mists of Tirna Scithe",
"enUS",
},
[144244] = {
"The Platinum Pummeler",
"Operation: Mechagon",
},
[159417] = {
"Demented Knife-Twister",
"Ny'alotha, the Waking City",
},
[36840] = {
"Ymirjar Wrathbringer",
"Pit of Saron",
},
[21213] = {
"Morogrim Tidewalker",
"Coilfang: Serpentshrine Cavern",
},
[148120] = {
"Kul Tiran Marine",
"Battle of Dazar'alor",
},
[111054] = {
"Nightorb",
"The Nighthold",
},
[30418] = {
"Bound Air Elemental",
"Ahn'kahet: The Old Kingdom",
},
[140988] = {
"Steelshred",
"The Dread Chain (Islands 4)",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[40765] = {
"Commander Ulthok",
"Throne of the Tides",
},
[52405] = {
"Mor'Lek the Dismantler",
"Zul'Gurub",
},
[138499] = {
"Twilight Dragonkin",
"Jorundall (Islands 7)",
},
[160405] = {
"Angry Treant Chair Spirit",
"Horrific Vision of Stormwind",
},
[44982] = {
"Neferset Darkcaster",
"Lost City of the Tol'vir",
},
[213684] = {
"Void Chunk",
"The Rookery",
"enUS",
},
[140989] = {
"Bonescale Worm",
"Snowblossom Village (Islands 3)",
},
[22877] = {
"Coilskar Wrangler",
"Black Temple",
"enUS",
},
[167610] = {
"Stonefiend Anklebiter",
"Halls of Atonement",
},
[16539] = {
"Homunculus",
"Karazhan",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[3475] = {
"Лещенко",
"The Dread Chain (Islands 4)",
},
[28584] = {
"Unbound Firestorm",
"Halls of Lightning",
},
[53486] = {
"Twilight Invader",
"Nexus Legendary",
},
[140990] = {
"Bonescale Spitter",
"Snowblossom Village (Islands 3)",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[167611] = {
"Stoneborn Eviscerator",
"Halls of Atonement",
},
[152253] = {
"The Tarragrue",
"Torghast, Tower of the Damned",
},
[72191] = {
"Overlord Runthak",
"Siege of Orgrimmar",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[71771] = {
"Kor'kron Arcweaver",
"Siege of Orgrimmar",
},
[67977] = {
"Tortos",
"Throne of Thunder",
},
[16545] = {
"Ethereal Spellfilcher",
"Karazhan",
},
[24744] = {
"Vexallus",
"Magisters' Terrace",
"enUS",
},
[33720] = {
"Obsidian Consort",
"Ulduar",
},
[44926] = {
"Oathsworn Wanderer",
"Lost City of the Tol'vir",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
},
[163058] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[115844] = {
"Goroth",
"Tomb of Sargeras",
},
[3669] = {
"Lord Cobrahn",
"Wailing Caverns",
},
[140992] = {
"Corpseburster",
"Snowblossom Village (Islands 3)",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[137989] = {
"Embalming Fluid",
"Kings' Rest",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[147621] = {
"Dark Iron Vanguard",
"Battle of Dazar'alor",
},
[162647] = {
"Willing Sacrifice",
"Ny'alotha, the Waking City",
},
[95832] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
},
[121975] = {
"Aggramar",
"Antorus, the Burning Throne",
},
[140993] = {
"Darktunnel Ambusher",
"Whispering Reef (Islands 10)",
},
[16472] = {
"Phantom Stagehand",
"Karazhan",
},
[37004] = {
"Skybreaker Dreadblade",
"Icecrown Citadel",
},
[24656] = {
"Fizzle",
"Magister's Terrace",
},
[69455] = {
"Zandalari Water-Binder",
"Throne of Thunder",
},
[128649] = {
"Sergeant Bainbridge",
"Siege of Boralus",
},
[43214] = {
"Slabhide",
"The Stonecore",
},
[148618] = {
"Archdruid Andrenius",
"Warfronts Darkshore - Horde",
},
[156794] = {
"SI:7 Light-Hunter",
"Horrific Vision of Stormwind",
},
[59722] = {
"Pile of Corpses",
"Scarlet Monastery",
},
[167615] = {
"Depraved Darkblade",
"Halls of Atonement",
},
[213828] = {
"Candleclaw Pyromancer",
"New Candle, New Hope",
"enUS",
},
[108361] = {
"Crystalline Scorpid",
"The Nighthold",
},
[129758] = {
"Irontide Grenadier",
"Freehold",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[59771] = {
"Zombified Corpse",
"Scarlet Monastery",
},
[144248] = {
"Head Machinist Sparkflux",
"Operation: Mechagon",
},
[134794] = {
"Darklurker",
"Whispering Reef (Islands 10)",
},
[159425] = {
"Occult Shadowmender",
"Ny'alotha, the Waking City",
},
[156820] = {
"Dod",
"Horrific Vision of Stormwind",
},
[21214] = {
"Fathom-Lord Karathress",
"Coilfang: Serpentshrine Cavern",
},
[47720] = {
"Camel",
"Lost City of the Tol'vir",
},
[229769] = {
"Medbot",
"Awakening The Machine",
"enUS",
},
[16415] = {
"Skeletal Waiter",
"Karazhan",
},
[140996] = {
"Deepbore",
"Whispering Reef (Islands 10)",
},
[106311] = {
"Venomous Spiderling",
"The Emerald Nightmare",
},
[52151] = {
"Bloodlord Mandokir",
"Zul'Gurub",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
},
[140564] = {
"Brimstone Lavamaw",
"Verdant Wilds (Islands 8)",
},
[146116] = {
"Needleback Forager",
"Verdant Wilds (Islands 8)",
},
[162729] = {
"Patchwerk Soldier",
"The Necrotic Wake",
"enUS",
},
[123236] = {
"Scuttlestep Crab",
"Freehold",
},
[16145] = {
"Death Knight Captain",
"Naxxramas",
},
[22878] = {
"Aqueous Lord",
"Black Temple",
"enUS",
},
[31146] = {
"Raider's Training Dummy",
"The Underrot",
},
[134789] = {
"Monstrous Spineclaw",
"Whispering Reef (Islands 10)",
},
[84841] = {
"Iron Dockworker",
"Blackrock Foundry",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[61485] = {
"General Pa'valak",
"Siege of Niuzao Temple",
},
[59464] = {
"Hopper",
"Stormstout Brewery",
},
[132807] = {
"Zian-Ti Quilen",
"Havenswood (Islands 2)",
},
[160182] = {
"Void Initiate",
"Ny'alotha, the Waking City",
},
[145026] = {
"Swifttail Scavenger",
"Skittering Hollow (Islands 5)",
},
[114261] = {
"Toe Knee",
"Return to Karazhan",
},
[153285] = {
"Training Dummy",
"The Underrot",
},
[146118] = {
"Territorial Needleback",
"Havenswood (Islands 2)",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[53545] = {
"Molten Spewer",
"Firelands",
},
[140456] = {
"Bramblefur Musken",
"Havenswood (Islands 2)",
},
[12464] = {
"Death Talon Seether",
"Blackwing Lair",
},
[33722] = {
"Storm Tempered Keeper",
"Ulduar",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[58807] = {
"Vestige of Hatred",
"Shado-Pan Monastery",
},
[146119] = {
"Needleback Brute",
"The Dread Chain (Islands 4)",
},
[102248] = {
"Ravenous Hunter",
"Azsuna",
},
[131785] = {
"Buzzing Drone",
"Tol Dagor",
},
[52524] = {
"Cinderweb Spinner",
"Firelands",
},
[111975] = {
"Shadowfeather",
"The Emerald Nightmare",
},
[153942] = {
"Annihilator Lak'hal",
"Horrific Vision of Orgrimmar",
},
[16470] = {
"Ghostly Philanthropist",
"Karazhan",
},
[164450] = {
"Dealer Xy'exa",
"De Other Side",
},
[228030] = {
"Sir Finley Mrrgglton",
"The Waterworks",
"enUS",
},
[140430] = {
"Craghoof Bounder",
"Havenswood (Islands 2)",
},
[61623] = {
"Sap Globule",
"Siege of Niuzao Temple",
},
[66413] = {
"Yeasty Brew Alemental",
"Stormstout Brewery",
},
[29982] = {
"Drakkari Raider",
"Gundrak",
},
[129601] = {
"Cutwater Harpooner",
"Freehold",
},
[113043] = {
"Abyss Watcher",
"The Nighthold",
},
[128652] = {
"Viq'Goth",
"Siege of Boralus",
"enUS",
},
[42789] = {
"Stonecore Magmalord",
"The Stonecore",
},
[70230] = {
"Zandalari Blade Initiate",
"Throne of Thunder",
},
[140434] = {
"Craghoof Rockhorn",
"Havenswood (Islands 2)",
},
[94191] = {
"Burning Terrorhound",
"Broken Shore Scenario",
},
[64183] = {
"Enormous Stone Quilen",
"Mogu'shan Vaults",
},
[104688] = {
"Voidling",
"The Nighthold",
},
[152699] = {
"Voidbound Berserker",
"Horrific Vision of Orgrimmar",
},
[113512] = {
"Putrid Sludge",
"The Nighthold",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[139393] = {
"Mirelurk Clutchguard",
"The Rotting Mire (Islands 9)",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[111933] = {
"Venomous Spiderling",
"The Emerald Nightmare",
},
[21215] = {
"Leotheras the Blind",
"Coilfang: Serpentshrine Cavern",
},
[148569] = {
"Breakwater Elemental",
"Battle of Dazar'alor",
},
[72350] = {
"Dragonmaw Elite Grunt",
"Siege of Orgrimmar",
},
[164553] = {
"Misty Ally",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[69702] = {
"Ritualist Xeron",
"Throne of Thunder",
},
[12557] = {
"Grethok the Controller",
"Blackwing Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[52409] = {
"Ragnaros",
"Firelands",
},
[105322] = {
"Deathglare Tentacle",
"The Emerald Nightmare",
},
[162692] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[97081] = {
"King Bjorn",
"Halls of Valor",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[22879] = {
"Shadowmoon Reaver",
"Black Temple",
"enUS",
},
[36948] = {
"Muradin Bronzebeard",
"Icecrown Citadel",
},
[151041] = {
"Etruvis the Vassal",
"Crucible of Storms",
},
[140377] = {
"Duneshell Harvester",
"Whispering Reef (Islands 10)",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[16407] = {
"Spectral Servant",
"Karazhan",
},
[164555] = {
"Millificent Manastorm",
"De Other Side",
},
[23775] = {
"Head of the Horseman",
"Scarlet Monastery",
},
[90686] = {
"Felstalker Dreadhound",
"Broken Shore Scenario",
},
[20911] = {
"Blackwing Drakonaar",
"Tempest Keep: The Arcatraz",
},
[121193] = {
"Shadowsoul",
"Tomb of Sargeras",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[162508] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
},
[140356] = {
"Brightscale Hatchling",
"Jorundall (Islands 7)",
},
[164556] = {
"Millhouse Manastorm",
"De Other Side",
},
[126764] = {
"Bladesworn Ravager",
"Antorus, the Burning Throne",
},
[150222] = {
"Gunker",
"Operation: Mechagon",
},
[168393] = {
"Plaguebelcher",
"Plaguefall",
},
[77477] = {
"Marak the Blooded",
"Blackrock Foundry",
},
[156242] = {
"Animated Prowler",
"Torghast, Tower of the Damned",
},
[97087] = {
"Valarjar Champion",
"Halls of Valor",
},
[102252] = {
"Dread Lookout",
"Azsuna",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[132913] = {
"Island Ettin",
"Havenswood (Islands 2)",
},
[152538] = {
"Dark Ranger Zanra",
"Siege of Orgrimmar - Coup Scenario",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[217799] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[85748] = {
"Iron Mauler",
"Blackrock Foundry",
},
[126093] = {
"Slitherblade Saurok",
"The Rotting Mire (Islands 9)",
},
[134769] = {
"Jagged Claw",
"Whispering Reef (Islands 10)",
},
[164558] = {
"Hakkar the Soulflayer",
"De Other Side",
},
[168005] = {
"Empowered Deadsoul Shambler",
"Torghast, Tower of the Damned",
},
[138845] = {
"Commander Jo'vak",
"Whispering Reef (Islands 10)",
},
[138642] = {
"Kvaldir Reaver",
"Havenswood (Islands 2)",
},
[140353] = {
"Brightscale Coilfang",
"Jorundall (Islands 7)",
},
[163915] = {
"Hatchling Nest",
"Plaguefall",
},
[38184] = {
"Corrupted Ymirjar",
"Icecrown Citadel",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[221896] = {
"Web General Ab'enar",
"Earthcrawl Mines",
"enUS",
},
[132819] = {
"Rustpelt Pup",
"Verdant Wilds (Islands 8)",
},
[111980] = {
"Nightmother",
"The Emerald Nightmare",
},
[126095] = {
"Vyliss",
"The Rotting Mire (Islands 9)",
},
[24690] = {
"Wretched Husk",
"Magisters' Terrace",
"enUS",
},
[56762] = {
"Yu'lon",
"Temple of the Jade Serpent",
},
[96677] = {
"Steeljaw Grizzly",
"Halls of Valor",
},
[37665] = {
"Darkfallen Lieutenant",
"Icecrown Citadel",
},
[105721] = {
"Nightmare Ichor",
"The Emerald Nightmare",
},
[132820] = {
"Mudsnout Piglet",
"Verdant Wilds (Islands 8)",
},
[166608] = {
"Mueh'zala",
"De Other Side",
},
[121004] = {
"Razorjaw Myrmidon",
"Tomb of Sargeras",
},
[135892] = {
"Unleashed Inferno",
"Verdant Wilds (Islands 8)",
},
[21216] = {
"Hydross the Unstable",
"Coilfang: Serpentshrine Cavern",
},
[146131] = {
"Bartok the Burrower",
"Snowblossom Village (Islands 3)",
},
[73530] = {
"Dragonmaw Grunt",
"Siege of Orgrimmar",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[135759] = {
"Earthwall Totem",
"Kings' Rest",
},
[52155] = {
"High Priest Venoxis",
"Zul'Gurub",
},
[135893] = {
"Burning Emberguard",
"Verdant Wilds (Islands 8)",
},
[122783] = {
"Blazing Imp",
"Antorus, the Burning Throne",
},
[52077] = {
"Gurubashi Berserker",
"Zul'Gurub",
},
[114541] = {
"Spectral Patron",
"Return to Karazhan",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[53691] = {
"Shannox",
"Firelands",
},
[22880] = {
"Shadowmoon Champion",
"Black Temple",
"enUS",
},
[144970] = {
"Kaldorei Archer",
"Warfronts Darkshore - Horde",
},
[135894] = {
"Fire Elemental",
"Verdant Wilds (Islands 8)",
},
[78116] = {
"Water Elemental",
"Shrine of the Storm",
},
[72958] = {
"Dragonmaw Tidal Shaman",
"Siege of Orgrimmar",
},
[17491] = {
"Laughing Skull Rogue",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[5913] = {
"Tremor Totem",
"Battle of Dazar'alor",
},
[61699] = {
"Sik'thik Amberwing",
"Siege of Niuzao Temple",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[12017] = {
"Broodlord Lashlayer",
"Blackwing Lair",
},
[135895] = {
"Blazing Spark",
"Verdant Wilds (Islands 8)",
},
[56763] = {
"Regenerating Sha",
"Shado-Pan Monastery",
},
[228044] = {
"Reno Jackson",
"The Waterworks",
"enUS",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[16481] = {
"Ghastly Haunt",
"Karazhan",
},
[33214] = {
"Mechanolift 304-A",
"Ulduar",
},
[12465] = {
"Death Talon Wyrmkin",
"Blackwing Lair",
},
[102185] = {
"First Mate DeGauza",
"Azsuna",
},
[58555] = {
"Scarlet Fanatic",
"Scarlet Monastery",
},
[52379] = {
"Venomtip Needler",
"Zul'Gurub",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[17377] = {
"Keli'dan the Breaker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[139348] = {
"Baga the Frostshield",
"The Rotting Mire (Islands 9)",
},
[59835] = {
"Krik'thik Swarmer",
"Gate of the Setting Sun",
},
[140619] = {
"Coastal Fathomjaw",
"Havenswood (Islands 2)",
},
[155219] = {
"Gormling Spitter",
"Torghast, Tower of the Damned",
},
[158056] = {
"Rat",
"Horrific Vision of Stormwind",
},
[112676] = {
"Nobleborn Warpcaster",
"The Nighthold",
},
[69515] = {
"Zandalari Barricade",
"Mogu Island Progression Events",
},
[138969] = {
"Zian-Ti Spirit",
"The Dread Chain (Islands 4)",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[53187] = {
"Flamewaker Animator",
"Firelands",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[73775] = {
"War Master Kragg",
"Siege of Orgrimmar",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
},
[219856] = {
"Researcher Ven'kex",
"The Underkeep",
"enUS",
},
[138970] = {
"Vengeful Spirit",
"The Dread Chain (Islands 4)",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[102194] = {
"Dread Crewman",
"Azsuna",
},
[87411] = {
"Workshop Guardian",
"Blackrock Foundry",
},
[38125] = {
"Ymirjar Deathbringer",
"Icecrown Citadel",
},
[128060] = {
"Priestess of Delirium",
"Antorus, the Burning Throne",
},
[56764] = {
"Consuming Sha",
"Shado-Pan Monastery",
},
[122532] = {
"Ember of Taeshalach",
"Antorus, the Burning Throne",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[151068] = {
"Tentacled Voidpriest",
"Crucible of Storms",
},
[32926] = {
"Flash Freeze",
"Ulduar",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[33983] = {
"Constrictor Tentacle",
"Ulduar",
},
[58812] = {
"Hateful Essence",
"Shado-Pan Monastery",
},
[140262] = {
"Runehoof Doe",
"Skittering Hollow (Islands 5)",
},
[138972] = {
"Zian-Ti Cloudbreaker",
"The Dread Chain (Islands 4)",
},
[33820] = {
"Twilight Pyromancer",
"Ulduar",
},
[102192] = {
"Dread Sharpshooter",
"Azsuna",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[30176] = {
"Ahn'kahar Guardian",
"Ahn'kahet: The Old Kingdom",
},
[52413] = {
"Zulian Gnasher",
"Zul'Gurub",
},
[52376] = {
"Florawing Needler",
"Zul'Gurub",
},
[146140] = {
"Quilldozer",
"Havenswood (Islands 2)",
},
[156000] = {
"Lyani Shadestalker",
"Siege of Orgrimmar - Coup Scenario",
},
[139806] = {
"Venture Demolitions Expert",
"Verdant Wilds (Islands 8)",
},
[123760] = {
"Fel-Infused Destructor",
"Antorus, the Burning Throne",
},
[22881] = {
"Aqueous Surger",
"Black Temple",
},
[134617] = {
"Krolusk Hatchling",
"Temple of Sethraliss",
},
[16029] = {
"Sludge Belcher",
"Naxxramas",
},
[102701] = {
"Mo'arg Painbringer",
"Broken Shore Scenario",
},
[56731] = {
"Habanero Brew",
"Stormstout Brewery",
},
[126832] = {
"Skycap'n Kragg",
"Freehold",
},
[140620] = {
"South Sea Stinger",
"Verdant Wilds (Islands 8)",
},
[153165] = {
"Custodian Thonar",
"Torghast, Tower of the Damned",
},
[32865] = {
"Thorim",
"Ulduar",
},
[71543] = {
"Immerseus",
"Siege of Orgrimmar",
},
[135903] = {
"Manifestation of the Deep",
"Shrine of the Storm",
},
[56765] = {
"Destroying Sha",
"Shado-Pan Monastery",
},
[81270] = {
"Gorian Guardsman",
"Highmaul",
},
[73152] = {
"Storeroom Guard",
"Siege of Orgrimmar",
},
[16482] = {
"Trapped Soul",
"Karazhan",
},
[33216] = {
"Mechagnome Pilot",
"Ulduar",
},
[119742] = {
"Felguard Invader",
"Tomb of Sargeras",
},
[222222] = {
"Swarmspike",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[120851] = {
"Hippogryph Lord Varah",
"Tomb of Sargeras",
},
[11583] = {
"Nefarian",
"Blackwing Lair",
},
[159312] = {
"Living Blood",
"Ny'alotha, the Waking City",
},
[77687] = {
"Grom'kar Man-at-Arms",
"Blackrock Foundry",
},
[32867] = {
"Steelbreaker",
"Ulduar",
},
[165597] = {
"Patchwerk Soldier",
"The Necrotic Wake",
"enUS",
},
[11262] = {
"Onyxian Whelp",
"Onyxia's Lair",
},
[61337] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
},
[52414] = {
"Tor-Tun",
"Zul'Gurub",
},
[161502] = {
"Ravenous Fleshfiend",
"Temple of Sethraliss",
},
[70445] = {
"Stormbringer Draz'kil",
"Throne of Thunder",
},
[130318] = {
"Slitherblade Prophet",
"The Rotting Mire (Islands 9)",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
},
[53694] = {
"Riplimb",
"Firelands",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[32913] = {
"Elder Ironbranch",
"Ulduar",
},
[156642] = {
"Enthralled Laborer",
"Horrific Vision of Stormwind",
},
[111355] = {
"Taintheart Tormenter",
"The Emerald Nightmare",
},
[29774] = {
"Spitting Cobra",
"Gundrak",
},
[138978] = {
"Gargantuan Muckfin",
"Whispering Reef (Islands 10)",
},
[147495] = {
"Rastari Enforcer",
"Battle of Dazar'alor",
},
[132835] = {
"Dreadfang Snake",
"Jorundall (Islands 7)",
},
[39616] = {
"Naz'jar Invader",
"Throne of the Tides",
},
[26125] = {
"Earthrumbler",
"Crucible of Storms",
},
[113012] = {
"Felsworn Chaos-Mage",
"The Nighthold",
},
[56766] = {
"Volatile Energy",
"Shado-Pan Monastery",
},
[109075] = {
"Parasitic Lasher",
"The Nighthold",
},
[138979] = {
"Muckfin Tidecaller",
"Whispering Reef (Islands 10)",
},
[148194] = {
"Icy Barrier",
"Battle of Dazar'alor",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[118460] = {
"Engine of Souls",
"Tomb of Sargeras",
},
[130319] = {
"Slitherblade Phalanx",
"The Rotting Mire (Islands 9)",
},
[33985] = {
"Corruptor Tentacle",
"Ulduar",
},
[21218] = {
"Vashj'ir Honor Guard",
"Coilfang: Serpentshrine Cavern",
},
[21346] = {
"Sightless Eye",
"Tempest Keep: The Arcatraz",
},
[138980] = {
"Muckfin Raider",
"Whispering Reef (Islands 10)",
},
[154129] = {
"Burning Emberguard",
"Torghast, Tower of the Damned",
},
[32875] = {
"Iron Honor Guard",
"Ulduar",
},
[54511] = {
"Time-Twisted Geist",
"End Time",
},
[126969] = {
"Trothak",
"Freehold",
},
[113013] = {
"Felsworn Shadowblade",
"The Nighthold",
},
[56589] = {
"Striker Ga'dok",
"Gate of the Setting Sun",
},
[36842] = {
"Wrathbone Coldwraith",
"Pit of Saron",
},
[138981] = {
"Muckfin Oracle",
"Whispering Reef (Islands 10)",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
"enUS",
},
[53695] = {
"Rageface",
"Firelands",
},
[22882] = {
"Shadowmoon Deathshaper",
"Black Temple",
"enUS",
},
[173568] = {
"Anima Crazed Worker",
"Castle Nathria",
},
[122104] = {
"Portal Keeper Hasabel",
"Antorus, the Burning Throne",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
},
[23394] = {
"Promenade Sentinel",
"Black Temple",
"enUS",
},
[102263] = {
"Skorpyron",
"The Nighthold",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[78714] = {
"Kargath Bladefist",
"Highmaul",
},
[151978] = {
"Waterstrider",
"Snowblossom Village (Islands 3)",
},
[64446] = {
"Training Dummy",
"Scarlet Monastery",
},
[56511] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
},
[112678] = {
"Shal'dorei Naturalist",
"The Nighthold",
},
[72943] = {
"Dragonmaw Proto-Drake",
"Siege of Orgrimmar",
},
[138983] = {
"Muckfin Tidehunter",
"Whispering Reef (Islands 10)",
},
[24674] = {
"Phoenix",
"Magisters' Terrace",
"enUS",
},
[22849] = {
"Ashtongue Feral Spirit",
"Black Temple",
"enUS",
},
[158437] = {
"Fallen Taskmaster",
"Horrific Vision of Stormwind",
},
[67093] = {
"Sik'thik Battle-Mender",
"Siege of Niuzao Temple",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[68476] = {
"Horridon",
"Throne of Thunder",
},
[213894] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[171520] = {
"Blighted Creeper",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[130307] = {
"Unstable Typhoon",
"Whispering Reef (Islands 10)",
},
[120182] = {
"Tormented Priestess",
"Tomb of Sargeras",
},
[113128] = {
"Withered Skulker",
"The Nighthold",
},
[156161] = {
"Inquisitor Gnshal",
"Horrific Vision of Orgrimmar",
},
[161510] = {
"Mindrend Tentacle",
"Temple of Sethraliss",
},
[162534] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[36497] = {
"Bronjahm",
"The Forge of Souls",
},
[36494] = {
"Forgemaster Garfrost",
"Pit of Saron",
},
[14601] = {
"Ebonroc",
"Blackwing Lair",
},
[29834] = {
"Drakkari Frenzy",
"Gundrak",
},
[84859] = {
"Iron Cleaver",
"Blackrock Foundry",
},
[168457] = {
"Stonewall Gargon",
"Sanguine Depths",
},
[138986] = {
"Borgl the Seeker",
"Whispering Reef (Islands 10)",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
},
[173798] = {
"Rat of Unusual Size",
"Castle Nathria",
},
[150249] = {
"Pistonhead Scrapper",
"Operation: Mechagon",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[132051] = {
"Blood Tick",
"The Underrot",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[86612] = {
"Spore Shooter",
"Highmaul",
},
[138987] = {
"Muckfin High Oracle",
"Whispering Reef (Islands 10)",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[34184] = {
"Clockwork Mechanic",
"Ulduar",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[165430] = {
"Malignant Spawn",
"Plaguefall",
},
[67966] = {
"Whirl Turtle",
"Throne of Thunder",
},
[84860] = {
"Iron Earthbinder",
"Blackrock Foundry",
},
[219874] = {
"High Speaker's Construct",
"Hall of Awakening",
"enUS",
},
[138988] = {
"Mrgl-Eye",
"Whispering Reef (Islands 10)",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
},
[173800] = {
"Sewer Rat",
"Castle Nathria",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[30178] = {
"Ahn'kahar Swarmer",
"Ahn'kahet: The Old Kingdom",
},
[52417] = {
"Shredtooth Frenzy",
"Zul'Gurub",
},
[61445] = {
"Haiyan the Unstoppable",
"Mogu'shan Palace",
},
[154347] = {
"Void-Twisted Corruptor",
"Eastern Kingdoms - Vermillion Redoubt - HoA Scenario",
},
[53185] = {
"Flamewaker Overseer",
"Firelands",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[157419] = {
"Void-Twisted Whelp",
"Blackwing Descent Scenario",
},
[22883] = {
"Aqueous Spawn",
"Black Temple",
"enUS",
},
[216205] = {
"Ravenous Spawn",
"Nerub-ar Palace",
"enUS",
},
[151027] = {
"Thornguard Burton",
"Snowblossom Village (Islands 3)",
},
[146835] = {
"Ghoul",
"Whispering Reef (Islands 10)",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[23523] = {
"Ashtongue Elementalist",
"Black Temple",
"enUS",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
},
[173802] = {
"Carved Assistant",
"Castle Nathria",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
},
[120697] = {
"Worshiper of Elune",
"Tomb of Sargeras",
},
[168683] = {
"Gorak Zhar",
"9.0 Ardenweald Covenant Finale Drust Scenario",
},
[131445] = {
"Block Warden",
"Tol Dagor",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[138991] = {
"Grrl",
"Whispering Reef (Islands 10)",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
},
[156650] = {
"Dark Manifestation",
"Ny'alotha, the Waking City",
},
[150254] = {
"Scraphound",
"Operation: Mechagon",
},
[222235] = {
"Bloodthirsty Swarmer",
"Nerub-ar Palace",
"enUS",
},
[33988] = {
"Immortal Guardian",
"Ulduar",
},
[220485] = {
"Peculiar Nerubian",
"The Spiral Weave",
"enUS",
},
[42691] = {
"Stonecore Rift Conjurer",
"The Stonecore",
},
[17380] = {
"Broggok",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
},
[132849] = {
"Grizzlefur Cub",
"Un'gol Ruins (Islands 1)",
},
[69821] = {
"Thunder Lord",
"Throne of Thunder",
},
[222455] = {
"Black Blood Harvester",
"Nerub-ar Palace",
"enUS",
},
[52418] = {
"Lost Offspring of Gahz'ranka",
"Zul'Gurub",
},
[228537] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[137969] = {
"Interment Construct",
"Kings' Rest",
},
[18404] = {
"Bloodwarder Steward",
"Tempest Keep: The Botanica",
"enUS",
},
[140264] = {
"Runehoof Calf",
"Skittering Hollow (Islands 5)",
},
[227775] = {
"Captured Waxtail",
"Nerub-ar Palace",
"enUS",
},
[220509] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[134898] = {
"Venomfang Recluse",
"Verdant Wilds (Islands 8)",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[218527] = {
"Shadesworn Crusher",
"11.0 - Priory Scenario",
"enUS",
},
[53188] = {
"Flamewaker Subjugator",
"Firelands",
},
[24685] = {
"Sunblade Magister",
"Magisters' Terrace",
"enUS",
},
[129928] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[44261] = {
"Sharptalon Eagle",
"Lost City of the Tol'vir",
},
[134899] = {
"Venomfang Lurker",
"Verdant Wilds (Islands 8)",
},
[40319] = {
"Drahga Shadowburner",
"Grim Batol",
"enUS",
},
[219996] = {
"Faceless Devotee",
"Skittering Breach",
"enUS",
},
[171448] = {
"Dreadful Huntmaster",
"Sanguine Depths",
},
[94809] = {
"Knight-Captain Brimley",
"The Maw of Nashal",
},
[227514] = {
"Velo",
"Earthcrawl Mines",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[129989] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[134900] = {
"Venomfang Spider",
"Verdant Wilds (Islands 8)",
},
[138998] = {
"Thick-Hide",
"Verdant Wilds (Islands 8)",
},
[21220] = {
"Coilfang Priestess",
"Coilfang: Serpentshrine Cavern",
},
[42692] = {
"Stonecore Bruiser",
"The Stonecore",
},
[138996] = {
"Earth-Speaker Juwa",
"Verdant Wilds (Islands 8)",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[120188] = {
"Wailing Soul",
"Tomb of Sargeras",
},
[30179] = {
"Twilight Apostle",
"Ahn'kahet: The Old Kingdom",
},
[135925] = {
"Pyroblaze",
"Havenswood (Islands 2)",
},
[17770] = {
"Hungarfen",
"Coilfang: The Underbog",
"enUS",
},
[24559] = {
"Warlord Salaris",
"Magisters' Terrace",
"enUS",
},
[138997] = {
"Grawlash the Frenzied",
"Verdant Wilds (Islands 8)",
},
[61634] = {
"Commander Vo'jak",
"Siege of Niuzao Temple",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[22884] = {
"Leviathan",
"Black Temple",
"enUS",
},
[72768] = {
"Kor'kron War Wolf",
"Siege of Orgrimmar",
},
[135926] = {
"Smolderheart",
"The Rotting Mire (Islands 9)",
},
[222572] = {
"Infesting Latcher",
"Nerub-ar Palace",
"enUS",
},
[32914] = {
"Elder Stonebark",
"Ulduar",
},
[23524] = {
"Ashtongue Spiritbinder",
"Black Temple",
"enUS",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[225817] = {
"Caustic Skyrazor",
"Nerub-ar Palace",
"enUS",
},
[158452] = {
"Mindtwist Tendril",
"Horrific Vision of Stormwind",
},
[37901] = {
"Vampiric Fiend",
"Icecrown Citadel",
},
[96640] = {
"Valarjar Marksman",
"Halls of Valor",
},
[18422] = {
"Sunseeker Botanist",
"Tempest Keep: The Botanica",
"enUS",
},
[73091] = {
"Blackfuse Sellsword",
"Siege of Orgrimmar",
},
[138999] = {
"Elder Ordol",
"Verdant Wilds (Islands 8)",
},
[16485] = {
"Arcane Watchman",
"Karazhan",
},
[222274] = {
"Sureki Darkblade",
"Nerub-ar Palace",
"enUS",
},
[12467] = {
"Death Talon Captain",
"Blackwing Lair",
},
[214503] = {
"Sikran",
"Nerub-ar Palace",
"enUS",
},
[19598] = {
"Mutate Fleshlasher",
"Tempest Keep: The Botanica",
"enUS",
},
[17980] = {
"Laj",
"Tempest Keep: The Botanica",
"enUS",
},
[126333] = {
"Felseeker Ritualist",
"Antorus, the Burning Throne",
},
[17381] = {
"The Maker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[156406] = {
"Voidbound Honor Guard",
"Horrific Vision of Orgrimmar",
},
[19608] = {
"Frayer Wildling",
"Tempest Keep: The Botanica",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[134905] = {
"Shadeweb Huntress",
"Havenswood (Islands 2)",
},
[135929] = {
"Baron Blazehollow",
"The Rotting Mire (Islands 9)",
},
[139804] = {
"Venture Inspector",
"The Dread Chain (Islands 4)",
},
[18341] = {
"Pandemonius",
"Auchindoun: Mana-Tombs",
"enUS",
},
[18405] = {
"Tempest-Forge Peacekeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[19306] = {
"Mana Leech",
"Auchindoun: Mana-Tombs",
"enUS",
},
[18331] = {
"Ethereal Darkcaster",
"Auchindoun: Mana-Tombs",
"enUS",
},
[18314] = {
"Nexus Stalker",
"Auchindoun: Mana-Tombs",
"enUS",
},
[147205] = {
"Warden Amical",
"Tol Dagor Scenario",
},
[135930] = {
"Lavarok",
"Verdant Wilds (Islands 8)",
},
[18344] = {
"Nexus-Prince Shaffar",
"Auchindoun: Mana-Tombs",
"enUS",
},
[23147] = {
"Shadowmoon Grunt",
"Black Temple",
"enUS",
},
[139002] = {
"Wildlands Totemic",
"Verdant Wilds (Islands 8)",
},
[19557] = {
"Greater Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[73191] = {
"Aqueous Defender",
"Siege of Orgrimmar",
},
[120191] = {
"Eternal Soulguard",
"Tomb of Sargeras",
},
[17429] = {
"Fel Orc Neophyte",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[135931] = {
"Ashstone",
"Skittering Hollow (Islands 5)",
},
[218865] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[103899] = {
"Shadowflame Imp",
"Broken Shore Scenario",
},
[139003] = {
"Wildlands Warrior",
"Verdant Wilds (Islands 8)",
},
[23216] = {
"Ashtongue Defender",
"Black Temple",
"enUS",
},
[128551] = {
"Irontide Mastiff",
"Freehold",
},
[23083] = {
"Shadowmoon Riding Hound",
"Black Temple",
"enUS",
},
[120009] = {
"Naisha",
"Tomb of Sargeras",
},
[23049] = {
"Shadowmoon Weapon Master",
"Black Temple",
"enUS",
},
[21221] = {
"Coilfang Beast-Tamer",
"Coilfang: Serpentshrine Cavern",
},
[86611] = {
"Mind Fungus",
"Highmaul",
},
[139004] = {
"Wildlands Shaman",
"Verdant Wilds (Islands 8)",
},
[23236] = {
"Bonechewer Shield Disciple",
"Black Temple",
"enUS",
},
[22948] = {
"Gurtogg Bloodboil",
"Black Temple",
"enUS",
},
[23418] = {
"Essence of Suffering",
"Black Temple",
"enUS",
},
[23469] = {
"Enslaved Soul",
"Black Temple",
"enUS",
},
[229296] = {
"Orb of Ascendance",
"Mists of Tirna Scithe",
"enUS",
},
[18315] = {
"Ethereal Theurgist",
"Auchindoun: Mana-Tombs",
"enUS",
},
[223995] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[171463] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
},
["aura_frame1_anchor"] = {
["y"] = 16,
["side"] = 9,
},
["indicator_scale"] = 0.99999994039536,
["cast_statusbar_fadein_time"] = 0.019999999552965,
["border_color"] = {
nil,
nil,
nil,
1,
},
["indicator_extra_raidmark"] = false,
["target_shady_enabled"] = false,
["focus_indicator_enabled"] = false,
["castbar_target_show"] = true,
["extra_icon_timer_font"] = "Gilroy Bold",
["aura_timer_text_font"] = "Gilroy Bold",
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.949999988079071,
["minor_width_scale"] = 0.8999999761581421,
["not_affecting_combat_alpha"] = 0,
["castbar_target_font"] = "Gilroy Bold",
["aura_show_important"] = false,
["extra_icon_stack_font"] = "Gilroy Bold",
["aura2_grow_direction"] = 1,
["aura_height"] = 15,
["aura_tracker"] = {
["debuff_banned"] = {
["284258"] = true,
},
["buff_tracked"] = {
["209859"] = true,
},
["buff_banned"] = {
["206150"] = true,
["333553"] = true,
["61574"] = true,
["61573"] = true,
},
},
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["target_highlight_alpha"] = 1,
["aura2_x_offset"] = -2,
["target_indicator"] = "Pins",
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 56,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1609606751,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Color Automation [Plater]",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 45,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end    \n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
["PlaterCore"] = 1,
["Time"] = 1549937733,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Options"] = {
},
["Name"] = "Don't Have Aura [Plater]",
["Icon"] = 136207,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 180,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Tecno-Azralon",
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Options"] = {
},
["Name"] = "Extra Border [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1558091544,
["Icon"] = 133689,
["LastHookEdited"] = "Constructor",
},
{
["Enabled"] = false,
["Revision"] = 56,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Script for Stormwall Blockade encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.Colors.TemptingSiren) then\n            Plater.SetNameplateColor (unitFrame, envTable.Colors.TemptingSiren)\n        end\n        \n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.NameplateHeight.TemptingSiren) then\n            \n            Plater.SetNameplateSize (unitFrame, nil, envTable.NameplateHeight.TemptingSiren)\n            \n        end\n        \n    end    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors.TemptingSiren = \"orange\"\n    \n    --npcID\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.TemptingSiren = 146436\n    \n    --nameplate height for each unit\n    envTable.NameplateHeight = {}\n    envTable.NameplateHeight.TemptingSiren = 18\n    \n    \n    \nend\n\n\n",
},
["Options"] = {
},
["Name"] = "Stormwall Encounter [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2280,
["Enabled"] = true,
},
["spec"] = {
},
},
["Time"] = 1558030400,
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_stormwall_blockade",
["LastHookEdited"] = "Constructor",
},
{
["Enabled"] = false,
["Revision"] = 73,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["PlaterCore"] = 1,
["Time"] = 1541606242,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Options"] = {
},
["Name"] = "Hide Neutral Units [Plater]",
["Icon"] = 1990989,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 474,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Script for the Jaina encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Unexploded Ordinance\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.UnexplodedOrdinance) then\n        \n        --make the life percent be bigger than the regular size\n        --so it's better to see the health percent of the barrel\n        local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n        Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize + envTable.UnexplodedOrdinanceTextSizeIncrease)\n    end\n    \n    if (envTable.IncreaseSize [unitFrame.namePlateNpcId]) then\n        local currentHeight = unitFrame.healthBar:GetHeight()\n        Plater.SetNameplateSize (unitFrame, nil, currentHeight + envTable.IncreaseSize [unitFrame.namePlateNpcId])\n    end\n    \nend\n\n\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame, nil, envTable.UnexplodedOrdinanceCastBarHeight)\n        Plater:SetFontSize (unitFrame.castBar.percentText, envTable.UnexplodedOrdinanceTimerSize)\n    end\n    if(envTable.HowlingWindsCast and envTable._SpellID == envTable.HowlingWindsSpellID) then\n        unitFrame.healthBar.unitName:SetPoint(\"BOTTOM\", unitFrame.healthBar, \"TOP\", 0 , 18)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the health percent text size\n    local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n    Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Override the color\n    if (envTable.Colors [unitFrame.namePlateNpcId]) then\n        Plater.SetNameplateColor (unitFrame, envTable.Colors [unitFrame.namePlateNpcId])\n    end    \n    \n    --Show the name of the unit in the Ice Block nameplate\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.IceBlock) then\n        --find which player this block are holding\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i\n            if (UnitExists (unit)) then\n                for debuffId = 1, 40 do\n                    local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (unit, debuffId)\n                    \n                    --cancel the loop if there's no more debuffs on the player\n                    if (not name) then \n                        break \n                    end                    \n                    \n                    --check if who casted this debuff is the unit shown on this nameplate\n                    if (UnitIsUnit (caster or \"\", unitId)) then\n                        local unitName = UnitName (unit)\n                        \n                        --color the text by the class\n                        unitName = Plater.SetTextColorByClass (unit, unitName)\n                        \n                        --add the role icon\n                        if (Details) then\n                            local role = UnitGroupRolesAssigned (unit)\n                            unitName = Details:AddRoleIcon (unitName, role, 12)\n                        end\n                        \n                        unitFrame.unitName:SetText (unitName)\n                        unitFrame.castBar.Text:SetText (unitName)\n                        break\n                    end\n                    \n                end\n            else\n                break\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors [148631] = \"orange\" --Unexploded Ordinance\n    envTable.Colors [148522] = \"white\" --Ice Block\n    \n    --increase the nameplate height for these units\n    envTable.IncreaseSize = {}\n    envTable.IncreaseSize [148522] = 4 --Ice Block (increase in 4 pixels)\n    \n    --increase the size of the life percent for the nameplate of the barrel\n    envTable.UnexplodedOrdinanceTextSizeIncrease = 3\n    \n    --increase the castbar size for the unexploded ordinance explosion cast\n    envTable.UnexplodedOrdinanceCast = true\n    envTable.UnexplodedOrdinanceSpellID = 288221 --12058 --(debug)\n    envTable.UnexplodedOrdinanceCastBarHeight = 18\n    envTable.UnexplodedOrdinanceTimerSize = 18\n    \n    --move Jaina's name out from under her castbar durring winds\n    envTable.HowlingWindsCast = false\n    envTable.HowlingWindsSpellID = 288199 --12058-- (debug)\n    envTable.HowlingWindsNameYOffset = 10\n    \n    --npcIDs\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.UnexplodedOrdinance = 148631\n    envTable.NpcIDs.IceBlock = 148522\nend\n\n--tests 126023 --harbor saurid - dazar'alor harbor\n--tests 3127 venomtail scorpid - durotar\n--tests 12058 dustwind storm witch - durotar\n--Load Condition: EncounterID 2281\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame)\n        Plater:SetFontSize (unitFrame.castBar.percentText, Plater.db.profile.plate_config.enemynpc.spellpercent_text_size)\n    end\n    if(envTable.HowlingWindsCast and envTable._SpellID == envTable.HowlingWindsSpellID) then\n        unitFrame.healthBar.unitName:SetPoint(\"TOP\", unitFrame.healthBar, \"BOTTOM\", 0 , -36)\n    end\nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1582894443,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["HooksTemp"] = {
},
["Name"] = "Jaina Encounter [Plater]",
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_jaina",
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 89,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ahwa-Azralon",
["Options"] = {
},
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Execute Range [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "Constructor",
["Time"] = 1582894699,
["Icon"] = 135358,
["PlaterCore"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Name"] = "Attacking Specific Unit [Plater]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Reorder Nameplate [Plater]",
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 38,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Tint nameplates of Reaping Soul units (Mythic Dungeon Affix) depending on its target and role of the player",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --can detect the reaping souls aggro?\n    if (envTable.detectAggro and Plater.IsInCombat()) then\n        \n        --is this npc a reaping soul?\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            \n            --check if the mob is attacking the player\n            if (UnitIsUnit (unitFrame.targetUnitID, \"player\")) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateAggroColor)\n                \n            else\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateNoAggroColor)\n            end\n            \n        end\n        \n    end\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when the nameplate is added and the npcID matches, cache the color for the nameplate\n    if (envTable.detectAggro) then\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            local profile = Plater.db.profile\n            local role = Plater:GetPlayerRole()\n            \n            if (role == \"TANK\") then\n                envTable.NameplateAggroColor = profile.tank.colors.aggro\n                envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            else\n                envTable.NameplateAggroColor = profile.dps.colors.aggro\n                envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            end\n            \n        end\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --npcs affected by this script\n    \n    envTable.npcIDs = {\n        [148716] = true, --risen soul\n        [148893] = true, --tormented soul\n        [148894] = true, --lost soul\n        \n        [127278] = true, --skittering feeder (tests and debug, also need to disable the load conditions)\n    }\n    \n    --detect aggro, if true it will see which group member the soul is attacking and override the color\n    envTable.detectAggro = true\n    \n    \nend\n\n\n",
},
["Options"] = {
},
["Name"] = "M+ Bwonsamdi Reaping",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
["Enabled"] = true,
["117"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1558030389,
["Icon"] = 2446016,
["LastHookEdited"] = "Constructor",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Name"] = "Combo Points [Plater]",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["Enabled"] = false,
["Revision"] = 182,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Options"] = {
},
["Name"] = "Players Targeting a Target [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1548278227,
["Icon"] = 1966587,
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 101,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)--rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["PlaterCore"] = 1,
["Time"] = 1558097070,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Options"] = {
},
["Name"] = "Current Target Color [Plater]",
["Icon"] = 878211,
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 356,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 173,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = .5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        --castBar:SetPoint(unitFrame.healthBar, \"TOP\", 0, -10)\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \n    --create thee border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end\n    \nend\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1609688813,
["Icon"] = 133004,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 106,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Aldarana-Kazzak",
["Desc"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.BuffFrame:SetPoint(\"CENTER\",buffNoComat,0);\n    unitFrame.BuffFrame2:SetPoint(\"CENTER\",buff2NoComat,0);\nend",
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.BuffFrame:SetPoint(\"CENTER\",buffNoComat,0);\n    unitFrame.BuffFrame2:SetPoint(\"CENTER\",buff2NoComat,0);\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.BuffFrame:SetPoint(\"CENTER\",buffComat,0);\n    unitFrame.BuffFrame2:SetPoint(\"CENTER\",buff2Comat,0);\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --X offsets for aura frames\n    buffNoCombat = 0;\n    buffCombat = 0;\n    \n    buff2NoCombat = 0;\n    buff2Combat = 0;\nend",
},
["Time"] = 1558030403,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Options"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura Positioning",
["LastHookEdited"] = "Constructor",
},
{
["Enabled"] = true,
["Revision"] = 106,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "?????-Illidan",
["OptionsValues"] = {
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, 11)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Time"] = 1609688761,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Buff Special Mod",
["Icon"] = 136139,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 163,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = true\n    --anchor icon on what side\n    envTable.IconAnchor = \"right\" --accep 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 1\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = false\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", -1, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, envTable.IconSizeOffset-.5)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 1, -1)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\nend",
},
["Prio"] = 99,
["Time"] = 1609613366,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Icon Anchor",
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 36,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Aldarana-Kazzak",
["Desc"] = "Because for some reason there's no setting for this.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    levelTextColor(unitFrame)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.levelColor = {255,245,105} --rgb\n    \n    function levelTextColor(unitFrame)\n        local r,g,b = unpack(envTable.levelColor)\n        unitFrame.healthBar.actorLevel:SetTextColor(r/255, g/255, b/255)\n    end\nend",
},
["Prio"] = 99,
["Time"] = 1609688813,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Name"] = "Level Text Color",
["LastHookEdited"] = "",
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 143,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ahwa-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Adds extra effects to execute range and allow to setup two execute ranges for classes with execute when the unit has almost full healh. See the constructor script for options.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = true\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --second execute range (UseCustomExecutePercent must be enabled)\n    envTable.SecondRangeStart = 0.999\n    envTable.SecondRangeEnd = 0.8\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"purple\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame, divisorPercent)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * divisorPercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        local percent = healthBar.CurrentHealth / healthBar.CurrentHealthMax\n        \n        if (percent <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.ExecutePercent)\n            envTable.InExecuteRange = true\n            \n        elseif (percent < envTable.SecondRangeStart and percent >= envTable.SecondRangeEnd) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.SecondRangeEnd)\n            envTable.InExecuteRange = true\n            \n        else\n            if (envTable.InExecuteRange) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                Plater.RefreshNameplateColor (unitFrame)\n                Plater.SetBorderColor (unitFrame)\n                envTable.InExecuteRange = false\n            end\n        end\n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame, 0)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1609607008,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Advanced Execute Range",
["Icon"] = 135358,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast Bar Icon Settings [P]",
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Icon Settings:",
["Name"] = "Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showIcon",
["Value"] = true,
["Name"] = "Show Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Key"] = "iconOnLeftSide",
["Value"] = true,
["Name"] = "Icon on Left Side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Key"] = "iconSizeOffset",
["Value"] = 0,
["Name"] = "Icon Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Key"] = "iconPadding",
["Value"] = 0,
["Name"] = "Icon Padding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option5",
["Value"] = "Can't Interrupt Texture:",
["Name"] = "Interrupt Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTexture",
["Value"] = true,
["Name"] = "Show Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Key"] = "iconTexturePath",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Name"] = "Texture Path",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Key"] = "desaturatedTexture",
["Value"] = true,
["Name"] = "Texture Desaturated",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Key"] = "textureWidth",
["Value"] = 10,
["Name"] = "Texture Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Key"] = "textureHeightMod",
["Value"] = 0,
["Name"] = "Texture Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Key"] = "texturePosition",
["Value"] = 0,
["Name"] = "Texture Position",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1609688812,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 45,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 98,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateColor (unitFrame, envTable)\nend",
["Initialization"] = "function (modTable)\n    \n    modTable.colorHealthBar = modTable.config[\"colorHealthbar\"]\n    modTable.colorNameText = modTable.config[\"colorName\"]\n    modTable.showRaidMarkColors = modTable.config[\"raidMarkColors\"]\n    modTable.useTargetColor = modTable.config[\"targetDisabled\"]\n    modTable.ignoreTargetColorOnPlayers = modTable.config[\"ignoreTargetOnPlayers\"]\n    modTable.useFocusColor = modTable.config[\"focusEnabled\"]\n    modTable.targetColor = modTable.config[\"targetColor\"]\n    modTable.focusColor = modTable.config[\"focusColor\"]\n    modTable.useThreatColors = modTable.config[\"threatColors\"] -- use threat colors if you are tank without aggro or dps with aggro\n    modTable.colorRares = modTable.config[\"rareEnabled\"]\n    \n    -- you can replace any color text line with 'nil' to skip this mark from being colored, e.g.:    nil, --star \n    modTable.ColorByMark = {\n        nil, --star\n        nil, --circle\n        nil, --diamond\n        nil, --triangle\n        nil, --moon\n        nil, --square\n        nil, --cross\n        nil, --skull\n    }\n    \n    -- rare-type colors\n    modTable.RareColors = {\n        --[\"elite\"] = \"darkgoldenrod\",\n        [\"rareelite\"] = \"goldenrod\",\n        [\"rare\"] = \"silver\",\n        [\"worldboss\"] = \"darkmagenta\",\n    }\n    \n    modTable.NpcColors = {\n        \n        --[126682] = modTable.config[\"t1Mobs\"], --\"Saltfin Swimmer\"\n        --[126682] = modTable.config[\"t2Mobs\"], --\"Saltfin Swimmer\"\n        --[126682] = modTable.config[\"t3Mobs\"], --\"Saltfin Swimmer\"\n        --[126682] = \"#ff8200\", --\"Saltfin Swimmer\"\n        --[126682] = \"hotpink\", --\"Saltfin Swimmer\"\n        --[126682] = \"deeppink\", --\"Saltfin Swimmer\"\n        --[126682] = modTable.config[\"s4Enabled\"] and modTable.config[\"s4Color\"] or nil, --\"Saltfin Swimmer\"\n        --[126682] = modTable.config[\"explosivesEnabled\"] and modTable.config[\"explosivesColor\"] or nil, --\"Saltfin Swimmer\"\n        \n        --Affix NPCs:\n        --[161124] = modTable.config[\"s4Enabled\"] and modTable.config[\"s4Color\"] or nil, --\"Urg'roth, Breaker of Heroes\"\n        \n        -- t3 mobs - light red\n        [164506] = modTable.config[\"t3Mobs\"],\n        [162691] = modTable.config[\"t3Mobs\"],\n        [163524] = modTable.config[\"t3Mobs\"],\n        [165824] = modTable.config[\"t3Mobs\"],\n        [169893] = modTable.config[\"t3Mobs\"],\n        [169927] = modTable.config[\"t3Mobs\"],\n        [168446] = modTable.config[\"t3Mobs\"],\n        [165197] = modTable.config[\"t3Mobs\"],\n        [173447] = modTable.config[\"t3Mobs\"],\n        [163619] = modTable.config[\"t3Mobs\"],\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        -- explosives\n        [120651] = \"#ff8200\", --\"Fel Explosive\"\n        [120651] = modTable.config[\"explosivesEnabled\"] and modTable.config[\"explosivesColor\"] or nil, --\"Fel Explosive\"\n        [174773] = modTable.config[\"explosivesEnabled\"] and modTable.config[\"explosivesColor\"] or nil, -- \"Spideful Shade\"\n        \n        -- important - dark blue\n        [170490] = modTable.config[\"t1Mobs\"],\n        [170572] = modTable.config[\"t1Mobs\"],\n        [174197] = modTable.config[\"t1Mobs\"],\n        [174210] = modTable.config[\"t1Mobs\"],\n        [170882] = modTable.config[\"t1Mobs\"],\n        [163126] = modTable.config[\"t1Mobs\"],\n        [173016] = modTable.config[\"t1Mobs\"],\n        [166302] = modTable.config[\"t1Mobs\"],\n        [165529] = modTable.config[\"t1Mobs\"],\n        [165414] = modTable.config[\"t1Mobs\"],\n        [164921] = modTable.config[\"t1Mobs\"],\n        [163458] = modTable.config[\"t1Mobs\"],\n        [168420] = modTable.config[\"t1Mobs\"],\n        [168418] = modTable.config[\"t1Mobs\"],\n        [163459] = modTable.config[\"t1Mobs\"],\n        [168718] = modTable.config[\"t1Mobs\"],\n        [165076] = modTable.config[\"t1Mobs\"],\n        [167965] = modTable.config[\"t1Mobs\"],\n        [160495] = modTable.config[\"t1Mobs\"],\n        [166275] = modTable.config[\"t1Mobs\"],\n        [166299] = modTable.config[\"t1Mobs\"],\n        [166396] = modTable.config[\"t1Mobs\"],\n        [168627] = modTable.config[\"t1Mobs\"],\n        [164414] = modTable.config[\"t1Mobs\"],\n        [172265] = modTable.config[\"t1Mobs\"],\n        [168992] = modTable.config[\"t1Mobs\"],\n        [163891] = modTable.config[\"t1Mobs\"],\n        [173044] = modTable.config[\"t1Mobs\"],\n        [167612] = modTable.config[\"t1Mobs\"],\n        [167493] = modTable.config[\"t1Mobs\"],\n        [162049] = modTable.config[\"t1Mobs\"],\n        [162039] = modTable.config[\"t1Mobs\"],\n        [165222] = modTable.config[\"t1Mobs\"],\n        [163128] = modTable.config[\"t1Mobs\"],\n        [168357] = modTable.config[\"t1Mobs\"],\n        \n        \n        \n        \n        \n        \n        -- semi important - light blue\n        [166589] = modTable.config[\"t2Mobs\"],\n        [171343] = modTable.config[\"t2Mobs\"],\n        [163894] = modTable.config[\"t2Mobs\"],\n        [168942] = modTable.config[\"t2Mobs\"],\n        [163882] = modTable.config[\"t2Mobs\"],\n        [163862] = modTable.config[\"t2Mobs\"],\n        [164562] = modTable.config[\"t2Mobs\"],\n        [171799] = modTable.config[\"t2Mobs\"],\n        [170690] = modTable.config[\"t2Mobs\"],\n        [164266] = modTable.config[\"t2Mobs\"],\n        [164185] = modTable.config[\"t2Mobs\"],\n        [162103] = modTable.config[\"t2Mobs\"],\n        [165872] = modTable.config[\"t2Mobs\"],\n        [168658] = modTable.config[\"t2Mobs\"],\n        [168318] = modTable.config[\"t2Mobs\"],\n        [168717] = modTable.config[\"t2Mobs\"],\n        [163520] = modTable.config[\"t2Mobs\"],\n        [168572] = modTable.config[\"t2Mobs\"],\n        [162317] = modTable.config[\"t2Mobs\"],\n        [163621] = modTable.config[\"t2Mobs\"],\n        [162040] = modTable.config[\"t2Mobs\"],\n        [167536] = modTable.config[\"t2Mobs\"],\n        [171376] = modTable.config[\"t2Mobs\"],\n        [169861] = modTable.config[\"t2Mobs\"],\n        [167876] = modTable.config[\"t2Mobs\"],\n        [162047] = modTable.config[\"t2Mobs\"],\n        [172981] = modTable.config[\"t2Mobs\"],\n        [174175] = modTable.config[\"t2Mobs\"],\n        [165430] = modTable.config[\"t2Mobs\"],\n        [166276] = modTable.config[\"t2Mobs\"],\n        [165946] = modTable.config[\"t2Mobs\"],\n        [162744] = modTable.config[\"t2Mobs\"],\n        [168393] = modTable.config[\"t2Mobs\"],\n        [168396] = modTable.config[\"t2Mobs\"],\n        [167998] = modTable.config[\"t2Mobs\"],\n        [170850] = modTable.config[\"t2Mobs\"],\n        [163086] = modTable.config[\"t2Mobs\"],\n        [162038] = modTable.config[\"t2Mobs\"],\n        [169905] = modTable.config[\"t2Mobs\"],\n        [163620] = modTable.config[\"t2Mobs\"],\n        [164510] = modTable.config[\"t2Mobs\"],\n        [164557] = modTable.config[\"t2Mobs\"],\n        [165919] = modTable.config[\"t2Mobs\"],\n        [167111] = modTable.config[\"t2Mobs\"],\n        [163121] = modTable.config[\"t2Mobs\"],\n        [167607] = modTable.config[\"t2Mobs\"],\n        [162689] = modTable.config[\"t2Mobs\"],\n        [164292] = modTable.config[\"t2Mobs\"],\n        [168886] = modTable.config[\"t2Mobs\"],\n        [165137] = modTable.config[\"t2Mobs\"],\n        [163618] = modTable.config[\"t2Mobs\"],\n        [168443] = modTable.config[\"t2Mobs\"],\n    }\n    \n    function modTable.UpdateColor (unitFrame, envTable)\n        if not unitFrame then return end\n        \n        if modTable.useThreatColors then\n            if unitFrame.namePlateThreatIsTanking and not Plater.PlayerIsTank then\n                return\n            end\n            if not unitFrame.namePlateThreatIsTanking and Plater.PlayerIsTank then\n                return\n            end\n        end\n        \n        local unitIsPlayer = unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"\n        \n        if modTable.useTargetColor then\n            if unitFrame.namePlateIsTarget then\n                if not unitIsPlayer or (not modTable.ignoreTargetColorOnPlayers and unitIsPlayer)  then\n                    if modTable.colorHealthBar then\n                        Plater.SetNameplateColor (unitFrame, modTable.targetColor)\n                    end\n                    if modTable.colorNameText then\n                        Plater:SetFontColor (unitFrame.unitName, Plater:ParseColors(modTable.targetColor))\n                    end\n                    envTable.HasRaidMark = nil\n                    envTable.isTarget = true\n                    envTable.wasTarget = false\n                end\n                return\n            elseif envTable.isTarget then\n                envTable.isTarget = false\n                envTable.wasTarget = true\n            end\n        end\n        \n        if modTable.useFocusColor then\n            if UnitIsUnit (unitFrame.namePlateUnitToken, \"focus\") then\n                if modTable.colorHealthBar then\n                    Plater.SetNameplateColor (unitFrame, modTable.focusColor)\n                end\n                if modTable.colorNameText then\n                    Plater:SetFontColor (unitFrame.unitName, Plater:ParseColors(modTable.focusColor))\n                end\n                envTable.HasRaidMark = nil\n                envTable.isFocus = true\n                envTable.wasFocus = false\n                return\n            elseif envTable.isFocus then\n                envTable.isFocus = false\n                envTable.wasFocus = true\n            end\n        end\n        \n        -- from \"Color by Raid Mark\"\n        local raidMark = nil\n        if modTable.showRaidMarkColors and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark and modTable.ColorByMark [raidMark]) then\n            if modTable.colorHealthBar then\n                Plater.SetNameplateColor (unitFrame, modTable.ColorByMark [raidMark])\n            end\n            if modTable.colorNameText then\n                Plater:SetFontColor (unitFrame.unitName, Plater:ParseColors(modTable.ColorByMark [raidMark]))\n            end\n            envTable.HasRaidMark = true\n        else\n            --attempt to get the color from the unit color list\n            local color = modTable.NpcColors [unitFrame.namePlateUnitNameLower] or modTable.NpcColors [unitFrame.namePlateUnitName] or modTable.NpcColors [unitFrame.namePlateNpcId] or (modTable.colorRares and modTable.RareColors[UnitClassification(unitFrame.namePlateUnitToken)])\n            --if the color exists, set the health bar color\n            if (color) then\n                if modTable.colorHealthBar then\n                    Plater.SetNameplateColor (unitFrame, color)\n                end\n                if modTable.colorNameText then\n                    Plater:SetFontColor (unitFrame.unitName, Plater:ParseColors(color))\n                end\n                envTable.HasRaidMark = nil\n            elseif envTable.HasRaidMark or envTable.wasTarget or envTable.wasFocus then\n                if unitIsPlayer  then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                if modTable.colorNameText then\n                    --Plater.UpdatePlateText (unitFrame.PlateFrame, Plater.db.profile.plate_config[unitFrame.ActorType], false)\n                    modTable.resetNameColor(unitFrame)\n                end\n                envTable.HasRaidMark = nil\n                envTable.wasTarget = false\n                envTable.wasFocus = false\n            end\n        end\n    end\n    \n    function modTable.resetNameColor(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        local nameString = unitFrame.unitName\n        local plateConfigs = Plater.db.profile.plate_config[unitFrame.ActorType]\n        local ACTORTYPE_FRIENDLY_PLAYER = \"friendlyplayer\"\n        \n        if (Plater.db.profile.plate_config [ACTORTYPE_FRIENDLY_PLAYER].actorname_use_guild_color and plateFrame.playerGuildName == Plater.PlayerGuildName) then\n            Plater:SetFontColor (nameString, unpack(Plater.db.profile.plate_config [ACTORTYPE_FRIENDLY_PLAYER].actorname_guild_color))\n            \n        elseif (Plater.db.profile.plate_config [ACTORTYPE_FRIENDLY_PLAYER].actorname_use_friends_color and Plater.FriendsCache [plateFrame [MEMBER_NAME]]) then\n            Plater:SetFontColor (nameString, unpack(Plater.db.profile.plate_config [ACTORTYPE_FRIENDLY_PLAYER].actorname_friend_color))\n            \n        elseif (plateFrame.actorType == ACTORTYPE_FRIENDLY_PLAYER and Plater.db.profile.plate_config [ACTORTYPE_FRIENDLY_PLAYER].actorname_use_class_color) then\n            local _, unitClass = UnitClass (plateFrame.unitFrame [MEMBER_UNITID])\n            if (unitClass) then\n                local color = RAID_CLASS_COLORS [unitClass]\n                Plater:SetFontColor (nameString, color.r, color.g, color.b)\n            else\n                Plater:SetFontColor (nameString, plateConfigs.actorname_text_color)\n            end\n            \n        else\n            Plater:SetFontColor (nameString, plateConfigs.actorname_text_color)\n        end\n    end\n    \nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if modTable.useTargetColor then\n        modTable.UpdateColor (unitFrame, envTable)\n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1609713840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/UKpo0_GbE/25",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = true,
["Revision"] = 753,
["semver"] = "1.2.2",
["Author"] = "Viash-Thrall",
["Desc"] = "Color the nameplates of important m+ mobs",
["Prio"] = 98,
["version"] = 25,
["PlaterCore"] = 1,
["Name"] = "M+ Colored Mobs",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "NPC Colors:",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "t1Mobs",
["Value"] = {
0,
0.086274509803922,
1,
1,
},
["Name"] = "Most Important:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Most important mobs, usually focus targets (regular interrupts / stuns needed, etc.)",
},
{
["Type"] = 1,
["Key"] = "t2Mobs",
["Value"] = {
0,
0.81960784313725,
1,
1,
},
["Name"] = "Semi Important",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Semi important mobs, interrupts / stuns necessary, keep an eye out!",
},
{
["Type"] = 1,
["Key"] = "t3Mobs",
["Value"] = {
1,
0.59607843137255,
0.51372549019608,
1,
},
["Name"] = "Less Important:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Less important mobs, usally only have one mechanic which nees watching (cones, cleave, irregular interrupts, etc.)",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "explosivesEnabled",
["Value"] = true,
["Name"] = "Color Explosives",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "explosivesColor",
["Value"] = {
1,
0.4,
0.70196078431373,
1,
},
["Name"] = "Explosives Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option9",
["Value"] = 0,
["Name"] = "Option 9",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "s4Enabled",
["Value"] = true,
["Name"] = "Color M+ Affix NPCs",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "\"M+ Affix NPCs\"",
},
{
["Type"] = 1,
["Key"] = "s4Color",
["Value"] = {
1,
0.070588235294118,
0.56862745098039,
1,
},
["Name"] = "M+ Affix NPCs Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "\"M+ Affix NPCs\"",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "targetEnabled",
["Value"] = true,
["Name"] = "Use Target Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetColor",
["Value"] = {
0.27058823529412,
0.50980392156863,
0.70196078431373,
1,
},
["Name"] = "Target Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ignoreTargetOnPlayers",
["Value"] = false,
["Name"] = "Ignore Target Color on Players",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option21",
["Value"] = 0,
["Name"] = "Option 21",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "focusEnabled",
["Value"] = true,
["Name"] = "Use Focus Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "focusColor",
["Value"] = {
1,
0.49019607843137,
0.30980392156863,
1,
},
["Name"] = "Focus Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option26",
["Value"] = "Additional Options:",
["Name"] = "Additional Options:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "colorHealthbar",
["Value"] = true,
["Name"] = "Color Healthbar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "colorName",
["Value"] = false,
["Name"] = "Color Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "raidMarkColors",
["Value"] = true,
["Name"] = "Raid Mark Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "threatColors",
["Value"] = false,
["Name"] = "Use Threat Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use threat colors if you are tank without aggro or dps with aggro",
},
{
["Type"] = 4,
["Key"] = "rareEnabled",
["Value"] = true,
["Name"] = "Color Rares",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Health Update"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    \n    envTable.UpdateHealth (unitFrame)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    \n    envTable.UpdateHealth (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    envTable.ShowMaxHealth = false\n    envTable.ShowPercent = true\n    envTable.Separator = \" - \"\n    \n    --privite:\n    function envTable.UpdateHealth (unitFrame)\n        --get the health and health max current values\n        local currentHealth = unitFrame.healthBar.CurrentHealth or 0\n        local currentHealthMax = unitFrame.healthBar.CurrentHealthMax or 0\n        \n        --build the string text with current health\n        local healthString = Plater.FormatNumber (currentHealth) .. \"\"\n        \n        --if is showing max health, add it in the health string text\n        if (envTable.ShowMaxHealth) then\n            healthString = healthString .. envTable.Separator .. Plater.FormatNumber (currentHealthMax)\n        end\n        \n        --if is showing the percent text, add it into the string text\n        if (envTable.ShowPercent) then\n            local percent = currentHealth / currentHealthMax * 100\n            local fraction = \"%.0f\"\n            \n            if (percent <= 100) then\n                fraction = \"%.0f\"\n            end\n            \n            if (envTable.ShowMaxHealth) then\n                healthString = healthString .. \" (\" .. format (fraction, percent) \n            else\n                healthString = healthString .. envTable.Separator .. format (fraction, percent) \n            end\n        end\n        \n        --set the string text\n        unitFrame.healthBar.lifePercent:SetText (healthString)\n    end\n    \nend",
},
["Time"] = 1609688801,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 237031,
["Enabled"] = true,
["Revision"] = 125,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the total health and percent in the health amount text. See the constructor code to change options.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Health / Max Health (%)",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder:Hide()\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border options\n    local borderSize = 0.8\n    local borderColor = \"white\"\n    \n    if (not unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n    end\n    \n    function envTable.UpdateBorder (unitFrame)\n        if (UnitIsUnit (\"target\", unitFrame.unit)) then               \n            local r, g, b, a = DetailsFramework:ParseColors (borderColor)\n            unitFrame.healthBar.TargetBorder:SetVertexColor (r, g, b, a)\n            \n            unitFrame.healthBar.TargetBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.TargetBorder:UpdateSizes()            \n            \n            unitFrame.healthBar.TargetBorder:Show()\n        else\n            unitFrame.healthBar.TargetBorder:Hide()\n        end\n    end\nend",
},
["Time"] = 1608585773,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/g3hpjQ_EX/1",
["Icon"] = 134400,
["Enabled"] = false,
["Revision"] = 142,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Target Border",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local whitelist = {\n        [144747] = true, -- pakus-aspect\n        [144767] = true, -- gonks-aspect\n        [144963] = true, -- kimbuls-aspect\n        [144941] = true, -- akundas-aspect\n        [148894] = true, -- lost-soul\n        [148716] = true, -- risen-soul\n        [148893] = true, -- tormented-soul\n        [135989] = true, -- shieldbearer-of-zul\n        [127879] = true, -- shieldbearer-of-zul\n        [131527] = true, -- lord-waycrest\n        [131545] = true, -- lady-waycrest\n        [131863] = true, -- raal\n        [144324] = true, -- gorak-tul\n        [127484] = true, -- jes-howlis\n        [130655] = true, -- bobby-howlis\n        [155432] = true, -- enchanted-emissary\n        [155433] = true, -- void-touched-emissary\n        [135764] = true, -- explosive-totem\n        [135761] = true, -- thundering-totem\n        [135765] = true, -- torrent-totem\n        [135759] = true, -- earthwall-totem\n        [151658] = true, -- strider-tonk\n        [151657] = true, -- bomb-tonk\n        [151659] = true, -- rocket-tonk\n        [157614] = true, -- tentacle-of-drest-agath\n        [157613] = true, -- maw-of-drest-agath\n        [157612] = true, -- eye-of-drest-agath\n    }\n    \n    local plateFrame = C_NamePlate.GetNamePlateForUnit (unitId)\n    \n    if plateFrame and not whitelist[unitFrame.namePlateNpcId] then\n        local unitName = plateFrame.namePlateUnitName:gsub('(%S+) ', function (t) return t:sub(1, 1) .. ' ' end)\n        local nameTble = { strsplit(' ', unitName) }\n        \n        unitName = table.remove(nameTble)\n        if #nameTble then\n            unitName = table.concat(nameTble, '') .. ' ' .. unitName\n        end\n        \n        unitFrame.healthBar.unitName:SetText(unitName)  \n    end\nend",
},
["Time"] = 1609688383,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/rqHMsURrq/2",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 209,
["semver"] = "1.0.1",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show Last Name only.",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Last Name Only",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["showNpcId"] = false,
["showUnitId"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Name Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- clear cached info so that it's recalculated\n    unitFrame.origName = nil\n    modTable.cache[unitId] = nil\n    \n    envTable.updateName(unitId, unitFrame, modTable, true)\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.origName = nil\n    modTable.cache[unitId] = nil\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.updateName(unitId, unitFrame, modTable, false)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    \n    -- override takes the highest priority; by default all council-style bosses are filled in\n    -- (this allows you to have shortened names for those fights but turn on full names for all other bosses)\n    modTable.override = {\n        -- Shadowlands Season 1\n        \n        -- De Other Side\n        [164556] = \"Millhouse\", -- Millhouse Manastorm\n        [164555] = \"Millificent\", -- Millificent Manastorm\n        \n        -- Halls of Atonement\n        \n        -- Mists of Tirna Scithe\n        \n        -- Plaguefall\n        \n        -- Sanguine Depths\n        \n        -- Spires of Ascension\n        \n        -- The Necrotic Wake\n        \n        -- Theater of Pain\n        [164451] = \"Dessia\", -- Dessia the Decapitator\n        [164463] = \"Paceran\", -- Paceran the Virulent\n        [164461] = \"Sathel\", -- Sathel the Accursed\n        [164464] = \"Xira\", -- Xira the Underhanded\n        [165946] = \"Mordretha\", -- Mordretha, the Endless Empress (name too damn long)\n    }\n    \n    -- manual is used for enemies where the final word of their name isn't the important one\n    modTable.manual = {\n        -- Shadowlands Season 1\n        \n        -- De Other Side\n        [167964] = \"Dog\", -- 4.RF-4.RF\n        [165905] = \"Son\", -- Son of Hakkar\n        [170488] = \"Son\", -- Son of Hakkar (boss add?)\n        [171184] = \"Mythresh\", -- Mythresh, Sky's Talons\n        [164556] = \"Millhouse\", -- Millhouse Manastorm\n        [164555] = \"Millificent\", -- Millificent Manastorm\n        [164558] = \"Hakkar\", -- Hakkar the Soulflayer\n        \n        -- Halls of Atonement\n        [164557] = \"Shard\", -- Shard of Halkias\n        \n        -- Mists of Tirna Scithe\n        \n        -- Plaguefall\n        [163862] = \"Defender\", -- Defender of Many Eyes\n        [173360] = \"Belcher\", -- Plaguebelcher\n        [168396] = \"Belcher\", -- Plaguebelcher\n        [168627] = \"Binder\", -- Plaguebinder\n        [168580] = \"Borer\", -- Plagueborer\n        [168878] = \"Rigged Borer\", -- Rigged Plagueborer\n        [168891] = \"Rigged Borer\", -- Rigged Plagueborer\n        [168153] = \"Roc\", -- Plagueroc\n        [168310] = \"Roc\", -- Plagueroc\n        [164707] = \"Congealed Slime\", -- Congealed Slime\n        [165010] = \"Congealed Slime\", -- Congealed Slime\n        [164705] = \"Pestilence Slime\", -- Pestilence Slime\n        [165357] = \"Pestilence Slime\", -- Pestilence Slime\n        [163891] = \"Rotmarrow Slime\", -- Rotmarrow Slime\n        [164552] = \"Rotmarrow Slime\", -- Rotmarrow Slime\n        [168969] = \"Gushing Slime\", -- Gushing Slime\n        [170927] = \"Erupting Ooze\", -- Erupting Ooze\n        [170021] = \"Gushing Ooze\", -- Gushing Ooze\n        [164550] = \"Slithering Ooze\", -- Slithering Ooze\n        [174856] = \"Slithering Ooze\", -- Slithering Ooze\n        [168886] = \"Virulax\", -- Virulax Blightweaver\n        [169861] = \"Ickor\", -- Ickor Bileflesh\n        \n        -- Sanguine Depths\n        [172265] = \"Remnant\", -- Remnant of Fury\n        [165076] = \"Gluttonous\", -- Gluttonous Tick (in contrast, Famished Ticks will be labelled \"Tick\")\n        [162100] = \"Kryxis\", -- Kryxis the Voracious\n        \n        -- Spires of Ascension\n        [163524] = \"Praetor\", -- Kyrian Dark-Praetor\n        \n        -- The Necrotic Wake\n        [165138] = \"Blight Bag\", -- Blight Bag\n        [166264] = \"Spare Parts\", -- Spare Parts\n        [166266] = \"Spare Parts\", -- Spare Parts\n        [167731] = \"Separation\", -- Separation Assistant\n        [173044] = \"Stitching\", -- Stitching Assistant\n        [162693] = \"Nalthor\", -- Nalthor the Rimebinder\n        \n        -- Theater of Pain\n        [162744] = \"Nekthara\", -- Nekthara the Mangler\n        [167538] = \"Dokigg\", -- Dokigg the Brutalizer\n        [167536] = \"Harugia\", -- Harugia the Bloodthirsty\n        [167532] = \"Heavin\", -- Heavin the Breaker\n        [167534] = \"Rek\", -- Rek the Hardened\n        [167533] = \"Advent\", -- Advent Nevermore\n        [164451] = \"Dessia\", -- Dessia the Decapitator\n        [164463] = \"Paceran\", -- Paceran the Virulent\n        [164461] = \"Sathel\", -- Sathel the Accursed\n        [165946] = \"Mordretha\", -- Mordretha, the Endless Empress\n    }\n    \n    local hide = 1\n    local lieutenant = 2\n    local miniboss = 3\n    local boss = 4\n    \n    modTable.hide = hide\n    modTable.lieutenant = lieutenant\n    modTable.miniboss = miniboss\n    modTable.boss = boss\n    \n    modTable.bosses = {\n        -- Shadowlands Season 1\n        [173729] = miniboss, -- Manifestation of Pride\n        \n        -- De Other Side\n        [167966] = hide, -- Frogger Slimes\n        [167964] = lieutenant, -- 4.RF-4.RF\n        [170572] = lieutenant, -- Atal'ai Hoodoo Hexxer (?)\n        [171343] = lieutenant, -- Bladebeak Matriarch (?)\n        [168942] = lieutenant, -- Death Speaker (?)\n        [167962] = lieutenant, -- Defunct Dental Drill\n        [168934] = lieutenant, -- Enraged Spirit\n        [169905] = lieutenant, -- Risen Warlord\n        [171184] = miniboss, -- Mythresh, Sky's Talons\n        [164558] = boss, -- Hakkar the Soulflayer\n        [164556] = boss, -- Millhouse Manastorm\n        [164555] = boss, -- Millificent Manastorm\n        [164450] = boss, -- Dealer Xy'exa\n        [166608] = boss, -- Mueh'zala\n        \n        -- Halls of Atonement\n        [164557] = lieutenant, -- Shard of Halkias\n        [174175] = lieutenant, -- Loyal Stoneborn\n        [167612] = lieutenant, -- Stoneborn Reaver\n        [167607] = lieutenant, -- Stoneborn Slasher\n        [167876] = miniboss, -- Inquisitor Sigar\n        [165408] = boss, -- Halkias, the Sin-Stained Goliath\n        [164185] = boss, -- Echelon\n        [165410] = boss, -- High Adjudicator Aleez\n        [164218] = boss, -- Lord Chamberlain\n        \n        -- Mists of Tirna Scithe\n        [164926] = lieutenant, -- Drust Boughbreaker\n        [167111] = lieutenant, -- Spinemaw Staghorn (?)\n        [164929] = lieutenant, -- Tirnenn Villager\n        [173655] = miniboss, -- Mistveil Matriarch\n        [173720] = miniboss, -- Mistveil Gorgegullet\n        [173714] = miniboss, -- Mistveil Nightblossom\n        [164567] = boss, -- Ingra Maloch\n        [164804] = boss, -- Droman Oulfarran\n        [164501] = boss, -- Mistcaller\n        [164517] = boss, -- Tred'ova\n        \n        -- Plaguefall\n        [163894] = lieutenant, -- Blighted Spinebreaker\n        [163882] = lieutenant, -- Decaying Flesh Giant\n        [168393] = lieutenant, -- Plaguebelcher\n        [168396] = lieutenant, -- Plaguebelcher\n        [168153] = lieutenant, -- Plagueroc\n        [168886] = miniboss, -- Virulax Blightweaver\n        [169861] = miniboss, -- Ickor Bileflesh\n        [164255] = boss, -- Globgrog\n        [164967] = boss, -- Doctor Ickus\n        [164266] = boss, -- Domina Venomblade\n        [164267] = boss, -- Margrave Stradama\n        \n        -- Sanguine Depths\n        [162057] = lieutenant, -- Chamber Sentinel\n        [171799] = lieutenant, -- Depths Warden\n        [162040] = lieutenant, -- Grand Overseer\n        [162047] = lieutenant, -- Insatiable Brute\n        [162038] = lieutenant, -- Regal Mistdancer\n        [171376] = miniboss, -- Head Custodian Javlin\n        [162100] = boss, -- Kryxis the Voracious\n        [162103] = boss, -- Executor Tarvold\n        [162102] = boss, -- Grand Proctor Beryllia\n        [162099] = boss, -- General Kaal (hallway)\n        [162133] = boss, -- General Kaal (boss)\n        \n        -- Spires of Ascension\n        [168425] = lieutenant, -- Forsworn Annihilator\n        [168658] = lieutenant, -- Forsworn Devastator\n        [168318] = lieutenant, -- Forsworn Goliath\n        [168681] = lieutenant, -- Forsworn Helion\n        [163520] = lieutenant, -- Forsworn Squad-Leader\n        [168845] = miniboss, -- Astronos\n        [168843] = miniboss, -- Klotos\n        [168844] = miniboss, -- Lakesis\n        [162059] = boss, -- Kin-Tara\n        [163077] = lieutenant, -- Azules (Kin-Tara's etherwyrm)\n        [162058] = boss, -- Ventunax\n        [162060] = boss, -- Oryphiron\n        [162061] = boss, -- Devos, Paragon of Doubt\n        \n        -- The Necrotic Wake\n        [165137] = lieutenant, -- Zolramus Gatekeeper\n        [167731] = lieutenant, -- Separation Assistant\n        [173044] = lieutenant, -- Stitching Assistant\n        [165919] = lieutenant, -- Skeletal Marauder\n        [172981] = lieutenant, -- Kyrian Stitchwerk\n        [164578] = lieutenant, -- Stitchflesh's Creation\n        [165824] = miniboss, -- Nar'zudah\n        [165197] = miniboss, -- Skeletal Monstrosity\n        [163621] = miniboss, -- Goregrind\n        [163620] = miniboss, -- Rotspew\n        [162691] = boss, -- Blightbone\n        [163157] = boss, -- Amarth, The Harvester\n        [162689] = boss, -- Surgeon Stitchflesh\n        [162693] = boss, -- Nalthor the Rimebinder\n        \n        -- Theater of Pain\n        [170850] = lieutenant, -- Raging Bloodhorn\n        [163086] = lieutenant, -- Rancid Gasbag\n        [167998] = lieutenant, -- Portal Guardian\n        [162763] = lieutenant, -- Soulforged Bonereaver\n        [169893] = lieutenant, -- Nefarious Darkspeaker\n        [162744] = miniboss, -- Nekthara the Mangler\n        [167538] = miniboss, -- Dokigg the Brutalizer\n        [167536] = miniboss, -- Harugia the Bloodthirsty\n        [167532] = miniboss, -- Heavin the Breaker\n        [167534] = miniboss, -- Rek the Hardened\n        [167533] = miniboss, -- Advent Nevermore\n        [164451] = boss, -- Dessia the Decapitator (An Affront of Challengers)\n        [164463] = boss, -- Paceran the Virulent (An Affront of Challengers)\n        [164461] = boss, -- Sathel the Accursed (An Affront of Challengers)\n        [164464] = boss, -- Xira the Underhanded (An Affront of Challengers)\n        [162317] = boss, -- Gorechop\n        [162329] = boss, -- Xav the Unfallen\n        [162309] = boss, -- Kul'Tharok\n        [165946] = boss, -- Mordretha, the Endless Empress\n        \n        -- Castle Nathria\n        [164406] = boss, -- Shriekwing\n        [165066] = boss, -- Huntsman Altimor\n        [165067] = lieutenant, -- Margore\n        [169457] = lieutenant, -- Bargast\n        [169458] = lieutenant, -- Hecutis\n        [164261] = boss, -- Hungering Destroyer\n        [165521] = boss, -- Lady Inerva Darkvein\n        [168973] = miniboss, -- High Torturer Darithos\n        [165805] = miniboss, -- Shade of Kael'Thas\n        [166644] = boss, -- Artificer Xy'mox\n        [166970] = boss, -- Lord Stavros\n        [166969] = boss, -- Baroness Frieda\n        [166971] = boss, -- Castellan Niklaus\n        [164407] = boss, -- Sludgefist\n        [168112] = boss, -- General Kaal\n        [168113] = boss, -- General Grashaal\n        [167406] = boss, -- Sire Denathrius\n        [168156] = miniboss, -- Remornia\n        \n        -- Testing (Kyrian training dummies)\n        [154585] = lieutenant, -- Valiant's Resolve\n        [154580] = lieutenant, -- Reinforced Guardian\n        [154583] = miniboss, -- Stalwart Guardian\n        [154586] = boss, -- Stalwart Phalanx\n    }\n    \n    function modTable.isBoss(id)\n        return modTable.bosses[id] == modTable.boss\n    end\n    \n    function modTable.isMiniboss(id)\n        return modTable.bosses[id] == modTable.miniboss\n    end\n    \n    function modTable.isLieutenant(id)\n        return modTable.bosses[id] == modTable.lieutenant\n    end\n    \n    -- cache to hold ID -> name mappings, to avoid fully recalculating on each update\n    modTable.cache = {}\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- extract the last word from a string\n    function envTable.lastWord(str)\n        if str == nil then\n            return str\n        end\n        \n        local space = string.byte(\" \")\n        for i=str:len()-1,0,-1 do\n            if str:byte(i) == space then\n                return string.sub(str, i+1, str:len())\n            end\n        end\n        \n        return str\n    end\n    \n    -- attempt to match a given NPC name to some common patterns\n    function envTable.matchPattern(str)\n        if str == nil then\n            return nil\n        end\n        \n        local firstWordPattern = \"^(%S+)\"\n        local lastWordPattern = \"(%S+)$\"\n        \n        -- check if name is of the format \"X, Y\"; extract X if true\n        -- eg. \"Illidan Stormrage, Really Evil Guy\" -> \"Illidan Stormrage\"\n        local mat = string.match(str, \"^([^,]+),[^,]+\")\n        if mat ~= nil then\n            -- use the first word of X\n            -- eg. \"Illidan Stormrage\" -> \"Illidan\"\n            return string.match(mat, firstWordPattern)\n        end\n        \n        -- check if name is of the format \"X of Y\"; extract X if true\n        -- eg. \"Evil Warlock of Doom and Terror\" -> \"Evil Warlock\"\n        local mat = string.match(str, \"^(.+)%s+of+%s+\")\n        if mat ~= nil then\n            -- use the last word of X\n            -- eg. \"Evil Warlock\" -> \"Warlock\"\n            return string.match(mat, lastWordPattern)\n        end\n        \n        -- check if name is of the format \"X the Y\"; extract X if true\n        -- eg. \"Kael'Thas Sunstrider the Big Boss Man\" -> \"Kael'Thas Sunstrider\"\n        local mat = string.match(str, \"^(.+)%s+the+%s+\")\n        if mat ~= nil then\n            -- use the first word of X\n            -- eg. \"Kael'Thas Sunstrider\" -> \"Kael'Thas\"\n            return string.match(mat, firstWordPattern)\n        end\n        \n        return nil\n    end\n    \n    -- main logic for shortening unit names\n    function envTable.updateName(unitId, unitFrame, modTable, forceUpdate)\n        if unitId == nil then\n            return\n        end\n        \n        local currId = unitFrame.namePlateNpcId\n        if currId == nil then\n            return\n        end\n        \n        if modTable.cache == nil then\n            modTable.cache = {}\n        end\n        local prevEntry = modTable.cache[unitId]\n        \n        local update = forceUpdate\n        \n        if prevEntry == nil then\n            -- if the cache was empty but origName is set, it means that an option was toggled\n            -- (re-running the init clears the cache)\n            -- the NPC's original name is already saved, so use it\n            if unitFrame.origName == nil then\n                unitFrame.origName = unitFrame.healthBar.unitName:GetText()\n            end\n            update = true\n            \n            -- the NPC ID doesn't match the cached value; this nameplate has been re-assigned\n        elseif currId ~= prevEntry.id then\n            unitFrame.origName = unitFrame.healthBar.unitName:GetText()\n            update = true            \n        end\n        \n        -- Some error happened, usually caused by adds spawning; don't set name or cache result\n        if unitFrame.origName == \"Unknown\" then\n            --print(\"UNKNOWN!\")\n            unitFrame.origName = nil\n            return\n        end\n        \n        local newName = unitFrame.origName\n        \n        if update then\n            if newName == nil then\n                --print(\"unitFrame.healthBar.unitName:GetText() returned nil!\")\n                return\n            end\n            \n            if modTable.override[currId] then\n                --print(\"Updating: override\")\n                newName = modTable.override[currId]\n                \n            elseif modTable.isBoss(currId) and modTable.config.fullBossNames then\n                --print(\"Updating: full name (boss)\")\n                \n            elseif modTable.isMiniboss(currId) and modTable.config.fullMinibossNames then\n                --print(\"Updating: full name (boss)\")\n                \n            elseif modTable.manual[currId] then\n                --print(\"Updating: manual\")\n                newName = modTable.manual[currId]\n                \n            else\n                local m = nil\n                if modTable.config.patternMatching then\n                    m = envTable.matchPattern(newName)\n                end\n                \n                if m == nil then\n                    --print(\"Updating: last word of name\")\n                    newName = envTable.lastWord(newName)\n                else\n                    --print(\"Updating: matched common pattern\")\n                    newName = m\n                end\n                \n            end\n            \n            -- handle debug options\n            if modTable.config.showNpcId then\n                newName = newName .. \" \" .. currId\n            end\n            if modTable.config.showUnitId then\n                newName = newName .. \" \" .. unitId\n            end\n            \n            modTable.cache[unitId] = {id=currId, name=newName}\n        else\n            --print(\"Not updating\")\n            newName = modTable.cache[unitId].name\n        end \n        \n        unitFrame.healthBar.unitName:SetText(newName)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1609688829,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/VsE4iJqTZ/8",
["Icon"] = 135768,
["Enabled"] = true,
["Revision"] = 255,
["semver"] = "1.0.7",
["Author"] = "Varthar-Torghast",
["Desc"] = "Shorten enemy names in Shadowlands Mythic+ dungeons (eg. \"Mist Dancer\" -> \"Dancer\"). Exceptions have been coded wherever it makes sense; you can edit these and add new enemies within the initialization hook.",
["Prio"] = 99,
["version"] = 8,
["PlaterCore"] = 1,
["Name"] = "SL M+ Short Names",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "fullBossNames",
["Value"] = true,
["Name"] = "Full Boss Names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Don't abbreviate boss names (eg. \"Hakkar the Soulflayer\" instead of \"Hakkar\").",
},
{
["Type"] = 4,
["Key"] = "fullMinibossNames",
["Value"] = true,
["Name"] = "Full Miniboss Names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Don't abbreviate miniboss names (eg. \"Inquisitor Sigar\" instead of \"Sigar\").",
},
{
["Type"] = 4,
["Key"] = "patternMatching",
["Value"] = true,
["Name"] = "Attempt Pattern Matching",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Useful if you want to enable this mod outside of SL dungeons. Will try to match some common patterns (eg. \"X of Y\" -> \"X\") in order to use the correct shortened name.",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Debug:",
["Name"] = "Debug",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showNpcId",
["Value"] = false,
["Name"] = "Show NPC ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Add NPC ID to the displayed name.",
},
{
["Type"] = 4,
["Key"] = "showUnitId",
["Value"] = false,
["Name"] = "Show Unit ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Add unit ID to the displayed name.",
},
},
},
{
["OptionsValues"] = {
["SPpixelth"] = 1.1999999284744,
["SPpixelborder"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    local options1 = {\n        glowType = \"button\",\n        frequency = modTable.config.SPglowfreq\n    }\n    \n    local options2 = {\n        glowType = \"pixel\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        length = modTable.config.SPpixellength,\n        th = modTable.config.SPpixelth,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff,\n        border = modTable.config.SPpixelborder\n    }\n    \n    local options3 = {\n        glowType = \"ants\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        scale = modTable.config.SPantsscale,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff,\n    }\n    \n    modTable.options = (modTable.config.SPglownum == 1 and options1) or (modTable.config.SPglownum == 2 and options2) or (modTable.config.SPglownum == 3 and options3)\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local buffSpecialGlow = true\n    local color = modTable.config.SPglowcolor\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        \n        local auraContainer = auraContainers [containerID]\n        \n        for index, auraIcon in ipairs (auraContainer) do\n            if not Plater.StartGlow then\n                auraIcon.purgeGlowEffect = auraIcon.purgeGlowEffect or Plater.CreateIconGlow (auraIcon)\n                if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                    auraIcon.purgeGlowEffect:SetColor(color, color)\n                    auraIcon.purgeGlowEffect:Show()\n                else\n                    auraIcon.purgeGlowEffect:Hide()\n                end\n            else\n                if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                    Plater.StartGlow(auraIcon, color, modTable.options)\n                else\n                    Plater.StopGlow(auraIcon)\n                end                \n            end\n        end\n        \n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                local canStealOrPurge = auraIcon.canStealOrPurge\n                \n                if not Plater.StartGlow then\n                    auraIcon.purgeGlowEffect = auraIcon.purgeGlowEffect or Plater.CreateIconGlow (auraIcon)\n                    if (auraIcon:IsShown() and canStealOrPurge) then\n                        auraIcon.purgeGlowEffect:SetColor(color, color)\n                        auraIcon.purgeGlowEffect:Show()\n                    else\n                        auraIcon.purgeGlowEffect:Hide()\n                    end\n                else\n                    if (auraIcon:IsShown() and canStealOrPurge) then\n                        Plater.StartGlow(auraIcon, color, modTable.options)\n                    else\n                        Plater.StopGlow(auraIcon)\n                    end                \n                end\n            end\n        end\n    end\n    \nend",
},
["Time"] = 1609688374,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/uEnDIKvvP/1",
["Icon"] = "INTERFACE\\ICONS\\Ability_Creature_Cursed_04",
["Enabled"] = true,
["Revision"] = 713,
["semver"] = "1.0.0",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Steal/Purge Aura Glow",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Common Options",
["Name"] = "Common Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "1(Button) / 2(Pixel) / 3(Ants) ",
["Min"] = 1,
["Key"] = "SPglownum",
["Value"] = 2,
["Name"] = "Glow Type",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Set to negative to inverse direction of rotation",
["Min"] = -2,
["Key"] = "SPglowfreq",
["Value"] = 0.5,
["Name"] = "Glow Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "SPglowcolor",
["Value"] = {
1,
1,
0.45490196078431,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set glow color",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel & Ants Glow",
["Name"] = "Options for Pixel & Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Set number of lines",
["Min"] = 1,
["Key"] = "SPglowparticle",
["Value"] = 6,
["Name"] = "Number of Particles",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowxoff",
["Value"] = 1.2,
["Name"] = "X-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowyoff",
["Value"] = 1.2,
["Name"] = "Y-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel Glow",
["Name"] = "Options for Pixel Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "SPpixelborder",
["Value"] = false,
["Name"] = "Pixel Add Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable to true to create border under lines",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set pixel line length",
["Min"] = 0.01,
["Key"] = "SPpixellength",
["Value"] = 6,
["Name"] = "Pixel Line Length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Set pixel line thickness",
["Min"] = 0.01,
["Key"] = "SPpixelth",
["Value"] = 2,
["Name"] = "Pixel Line Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Ants Glow",
["Name"] = "Options for Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Set ants glow scale",
["Min"] = 0.01,
["Key"] = "SPantsscale",
["Value"] = 0.8,
["Name"] = "Ants Glow Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    isInspired = Plater.UnitHasAura (unitFrame, \"Inspiring Presence\")\n    \n    \n    if (isInspired) then\n        Plater.SetNameplateColor (unitFrame, \"orange\")\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["Time"] = 1609713833,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = true,
["Revision"] = 108,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Prio"] = 99,
["Name"] = "Inspiring Presence",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
},
["range_check_alpha"] = 1,
["aura_width2"] = 20,
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["hover_highlight_alpha"] = 0.29999998211861,
["aura_stack_size"] = 12,
["saved_cvars"] = {
["ShowClassColorInNameplate"] = "1",
["nameplateOverlapV"] = "0.79999995231628",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.025",
["nameplateGlobalScale"] = "1",
["nameplateShowEnemyMinions"] = "0",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1.3999999761581",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["nameplateMinScale"] = "1",
["nameplateOtherTopInset"] = "0.08",
["nameplateSelfBottomInset"] = "0.2",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateOccludedAlphaMult"] = "0.40281981229782",
["nameplateSelfTopInset"] = "0.5",
["nameplateSelfAlpha"] = "1",
},
["target_shady_alpha"] = 0.59999996423721,
["disable_omnicc_on_auras"] = true,
["target_highlight_height"] = 24,
["aura_width"] = 21,
["aura_height2"] = 14,
["version"] = 4,
["health_statusbar_bgcolor"] = {
0.043137254901961,
0.043137254901961,
0.043137254901961,
},
["castbar_target_shadow_color"] = {
nil,
nil,
nil,
0,
},
["extra_icon_anchor"] = {
["x"] = -10,
},
["login_counter"] = 8439,
["extra_icon_caster_name"] = false,
["aura_cooldown_show_swipe"] = false,
["pet_width_scale"] = 0.949999988079071,
["aura_border_colors"] = {
["steal_or_purge"] = {
0.72941176470588,
0,
0.98039215686275,
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Fixate On You"] = 11,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Cast - Circular Swipe"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Shining Green [P]"] = 3,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Aura - Is Cast Bar [P]"] = 1,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Add - Explode on Die [P]"] = 1,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Important Target [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Unit - Important"] = 11,
["Countdown"] = 11,
["Cast - Stop Casting"] = 4,
["Cast - Alert + Timer [P]"] = 4,
["Cast - Quick Flash"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Cast - Very Important"] = 15,
["Add - Warning [P]"] = 5,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Spiteful Affix"] = 3,
["Cast - Heal Cut [P]"] = 3,
["Cast - On Going Cast [P]"] = 2,
["Color Change"] = 1,
["Auto Set Skull"] = 11,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Aura Border Color"] = 1,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Tank Interrupt"] = 11,
["Cast - Heroic Leap [P]"] = 3,
["Unit Power"] = 1,
["Unit - Show Energy"] = 11,
},
["hook_data_trash"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Nameplate Updated"] = "\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    isInspired = Plater.NameplateHasAura (unitFrame, \"Inspiring Presence\")\n    \n    \n    if (isInspired) then\n        Plater.SetNameplateColor (unitFrame, \"orange\")\n    end\n    \nend",
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    isInspired = Plater.NameplateHasAura (unitFrame, \"Inspiring Presence\")\n    \n    \n    if (isInspired) then\n        Plater.SetNameplateColor (unitFrame, \"orange\")\n    end\n    \nend",
["Nameplate Updated"] = "\n\n",
},
["__TrashAt"] = 1609637792,
["Time"] = 1609619702,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135921,
["Enabled"] = false,
["Revision"] = 120,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Colors the Inspiring Presence mob",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Inspiring Presence",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 223,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["PlaterCore"] = 1,
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.ListOfNpcs = {\n        [61146] = \"olive\", --monk statue npcID\n        [103822] = \"olive\", --druid treant npcID\n        \n    }\n    \n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        --check if the npcID of this unit is in the npc list \n        if (envTable.ListOfNpcs [npcID]) then\n            Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [npcID])\n            \n        else\n            --check if the name of ths unit is in the list\n            local unitName = UnitName (unitId .. \"target\")\n            if (envTable.ListOfNpcs [unitName]) then\n                Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [unitName])\n                \n            else\n                --check if the name of the unit in lower case is in the npc list\n                unitName = string.lower (unitName)\n                if (envTable.ListOfNpcs [unitName]) then\n                    Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [unitName])                \n                    \n                end\n            end\n        end\n        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["__TrashAt"] = 1724222631,
["Time"] = 1553102867,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Options"] = {
},
["Name"] = "Attacking Specific Unit [Plater]",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["__TrashAt"] = 1724222631,
["Time"] = 1603567332,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 254,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Combo Points [Plater]",
["HooksTemp"] = {
},
["Options"] = {
},
},
},
["castbar_target_anchor"] = {
["x"] = 2,
},
["cast_statusbar_color_interrupted"] = {
nil,
0.10196078431373,
0.10196078431373,
},
["aura_stack_font"] = "Gilroy Bold",
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["patch_version"] = 37,
["target_highlight_color"] = {
1,
1,
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 9,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\nend\n\n\n\n\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    \nend\n\n\n",
["Time"] = 1609607408,
["NpcNames"] = {
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["url"] = "",
["Icon"] = 135921,
["Desc"] = "Inspired Affix",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["Revision"] = 467,
["semver"] = "",
["version"] = -1,
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\nend\n\n\n\n\n\n\n",
["Name"] = "Inspired",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    \nend\n\n\n",
["SpellIds"] = {
343503,
},
["PlaterCore"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1609688408,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
["textColor"] = {
1,
1,
1,
1,
},
["bgWidth"] = 30,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["scriptId"] = "table: 0000012DB2F3D8D0",
["__TrashAt"] = 1610305788,
["Time"] = 1609254915,
["Icon"] = 135945,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n    end\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
"174773",
},
["version"] = -1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n    end\nend\n\n\n\n\n\n",
["Revision"] = 68,
["Options"] = {
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.50588235294118,
0.070588235294118,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Name"] = "M+ Spiteful",
["Author"] = "Symantec-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Time to die Spiteful affix",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Enabled"] = true,
["url"] = "",
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1607270489,
["NpcNames"] = {
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Key"] = "shakeAmplitude",
["Value"] = 25,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 30,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tank",
["Desc"] = "Cast alert for abilities which only the tank can interrupt.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["Revision"] = 835,
["semver"] = "",
["version"] = -1,
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Tank Interrupt [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["__TrashAt"] = 1724222626,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        [154564] = {80, 30},   --debug\n        [164451] = {40}, --dessia the decapirator - theater of pain\n        [164463] = {40}, --Paceran the Virulent - theater of pain\n        [164461] = {40}, -- Sathel the Accursed - theater of pain\n        [165946]= {50}, -- ~mordretha - thather of pain\n        [164501] = {70, 40, 10}, --mistcaller - tina scythe\n        [164218] = {70, 40}, --Lord Chamberlain - Halls of Atonement\n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1609607074,
["NpcNames"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 110,
["semver"] = "",
["version"] = -1,
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Name"] = "Unit - Health Markers [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        [154564] = {80, 30},   --debug\n        [164451] = {40}, --dessia the decapirator - theater of pain\n        [164463] = {40}, --Paceran the Virulent - theater of pain\n        [164461] = {40}, -- Sathel the Accursed - theater of pain\n        [165946]= {50}, -- ~mordretha - thather of pain\n        [164501] = {70, 40, 10}, --mistcaller - tina scythe\n        [164218] = {70, 40}, --Lord Chamberlain - Halls of Atonement\n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n",
["__TrashAt"] = 1724222626,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n--[=[\n\n154564 - debug\n\n168098 - empowered coldheart agent\n156212 - coldheart agent\n\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1604607993,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 406,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    \n    unitFrame.healthBar.MainTargetDotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + scriptTable.config.nameplateSizeOffset)\n    \nend\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["Name"] = "Unit - Main Target [P]",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Desc"] = "Highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 0,
["Name"] = "Nameplate Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.71372549019608,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["__TrashAt"] = 1724222626,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (you may need /reload if some configs isn't applied immediately)    \n    --change the nameplate color to this if allowed\n    envTable.CanChangeNameplateColor = scriptTable.config.changeNameplateColor --\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset --\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/skullbones_128]])\n    unitFrame.UnitImportantSkullTexture:SetPoint(\"center\", unitFrame.healthBar, \"center\", 0, -5)\n    \n    unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n    unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n    unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n164362 - smily morsel - plaguefall\n168882 - fleeting manifestation - sanguine depths\n170234 - oppressive banner - theater of pain\n168988 - overgrowth - Mists of Tirna Scithe\n170452 - essesnce orb - torghast\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can change the nameplate color\n    if (envTable.CanChangeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1604599472,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 355,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\nend\n\n\n\n\n",
["NpcNames"] = {
},
["Name"] = "Unit - Important [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Desc"] = "Highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 3,
["Name"] = "Nameplate Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.71372549019608,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Skull Texture",
["Name"] = "Skull Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.46274509803922,
0,
1,
},
["Name"] = "Skull Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Key"] = "skullAlpha",
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "",
["Min"] = 0.4,
["Key"] = "skullScale",
["Value"] = 0.6,
["Name"] = "Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["__TrashAt"] = 1724222626,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1607126229,
["__TrashAt"] = 1724222631,
["NpcNames"] = {
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 608,
["semver"] = "",
["Desc"] = "Add the buff name in the trigger box.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n\nend\n\n\n",
["Time"] = 1609607101,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["Icon"] = 2175503,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["Revision"] = 465,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["__TrashAt"] = 1724222631,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\nend\n\n\n\n\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n\nend\n\n\n",
["Name"] = "Explosion Affix M+ [Plater]",
["PlaterCore"] = 1,
["SpellIds"] = {
240446,
273577,
},
["Prio"] = 99,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1607270486,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["__TrashAt"] = 1724222631,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["Revision"] = 352,
["semver"] = "",
["NpcNames"] = {
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Tercioo-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["Desc"] = "Add the debuff name in the trigger box.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0.016\n    \n    --update the health bar color coloring from yellow to red\n    --Plater.SetNameplateColor (unitFrame, max (envTable._CastPercent/100, .66), abs (envTable._CastPercent/100 - 1), 0, 1)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.HealthBarColor)\nend\n\n\n",
["Time"] = 1607270490,
["__TrashAt"] = 1724222631,
["NpcNames"] = {
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Health Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the health bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["Revision"] = 517,
["semver"] = "",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0.016\n    \n    --update the health bar color coloring from yellow to red\n    --Plater.SetNameplateColor (unitFrame, max (envTable._CastPercent/100, .66), abs (envTable._CastPercent/100 - 1), 0, 1)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.HealthBarColor)\nend\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \nend",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1606591522,
["__TrashAt"] = 1724222631,
["NpcNames"] = {
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a small animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.6,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["Revision"] = 598,
["semver"] = "",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        \n        envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1607270485,
["__TrashAt"] = 1724222631,
["NpcNames"] = {
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Key"] = "timeleftToBlink",
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Key"] = "blinkSpeed",
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Key"] = "blinkMaxAlpha",
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "",
["Value"] = {
0.28627450980392,
0.003921568627451,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftWarning",
["Value"] = 8,
["Name"] = "Time Left Warning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftCritical",
["Value"] = 3,
["Name"] = "Time Left Critical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.87058823529412,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.074509803921569,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["Revision"] = 334,
["semver"] = "",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Author"] = "Izimode-Azralon",
["Initialization"] = "					function (scriptTable)\n						--insert code here\n						\n					end\n				",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        \n        envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["Temp_Initialization"] = "					function (scriptTable)\n						--insert code here\n						\n					end\n				",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
["castBarColor"] = {
0.4117647058823529,
1,
0,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n        end\n    end\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1608755332,
["__TrashAt"] = 1724222631,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["url"] = "",
["NpcNames"] = {
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 704,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n        end\n    end\n    \nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Very Important [Plater]",
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["__TrashAt"] = 1724222631,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1607126228,
["__TrashAt"] = 1724222631,
["NpcNames"] = {
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["Revision"] = 973,
["semver"] = "",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            if target and target ~= \"\" then\n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName (plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
["bgWidth"] = 30,
["textColor"] = {
1,
1,
1,
1,
},
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1609281290,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 132,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["__TrashAt"] = 1724222631,
["NpcNames"] = {
"174773",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "M+ Spiteful",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Fraction"] = false,
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "bgWidth",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Key"] = "bgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textSize",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "switchTargetName",
["Value"] = false,
["Name"] = "Show Target instead of Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useTargetingColor",
["Value"] = false,
["Name"] = "Change Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetingColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow = envTable.movingArrow or Plater:CreateImage (self, [[Interface\\PETBATTLES\\PetBattle-StatIcons]], 16, self:GetHeight(), \"background\", {0, 15/32, 18/32, 30/32})\n    \n    --envTable.movingArrow.color = scriptTable.config.arrowColor\n    envTable.movingArrow:SetAlpha (scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (envTable.movingArrow, \n        function() \n            envTable.movingArrow:Show() \n            envTable.movingArrow:SetPoint(\"left\", 0, 0)\n        end, \n        function() envTable.movingArrow:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1607270488,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow = envTable.movingArrow or Plater:CreateImage (self, [[Interface\\PETBATTLES\\PetBattle-StatIcons]], 16, self:GetHeight(), \"background\", {0, 15/32, 18/32, 30/32})\n    \n    --envTable.movingArrow.color = scriptTable.config.arrowColor\n    envTable.movingArrow:SetAlpha (scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (envTable.movingArrow, \n        function() \n            envTable.movingArrow:Show() \n            envTable.movingArrow:SetPoint(\"left\", 0, 0)\n        end, \n        function() envTable.movingArrow:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n",
["NpcNames"] = {
},
["url"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Revision"] = 467,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.275,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["semver"] = "",
["Prio"] = 99,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Enabled"] = true,
["__TrashAt"] = 1724736788,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1719710916,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 79,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["__TrashAt"] = 1724913393,
["NpcNames"] = {
},
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1724881991,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 82,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1725218072,
},
},
["ghost_auras"] = {
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PALADIN"] = {
[5] = {
},
},
},
},
["number_region_first_run"] = true,
["aura_show_buff_by_the_unit"] = false,
["first_run3"] = true,
["resources"] = {
["scale"] = 0.79999995231628,
},
["cast_statusbar_bgtexture"] = "REEEE",
["extra_icon_auras"] = {
"Inspiring Presence",
},
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["semver"] = "1.2.1",
["npc_colors"] = {
[133944] = {
true,
false,
"violet",
},
[130635] = {
true,
false,
"violet",
},
[150169] = {
true,
false,
"violet",
},
[167965] = {
true,
false,
"violet",
},
[127111] = {
true,
false,
"violet",
},
[131818] = {
true,
false,
"lightskyblue",
},
[165251] = {
true,
false,
"blue",
},
[170490] = {
true,
false,
"violet",
},
[136470] = {
true,
false,
"violet",
},
[133835] = {
true,
false,
"lightskyblue",
},
[134232] = {
true,
false,
"violet",
},
[163458] = {
false,
false,
"white",
},
[134137] = {
true,
false,
"lightskyblue",
},
[164506] = {
true,
false,
"violet",
},
[165919] = {
true,
false,
"violet",
},
[134058] = {
true,
false,
"violet",
},
[131677] = {
true,
false,
"lightskyblue",
},
[150251] = {
true,
false,
"violet",
},
[136297] = {
true,
false,
"violet",
},
[173016] = {
true,
false,
"violet",
},
[163126] = {
true,
false,
"violet",
},
[150712] = {
true,
false,
"violet",
},
[139425] = {
true,
false,
"violet",
},
[165222] = {
true,
false,
"violet",
},
[170572] = {
true,
false,
"violet",
},
[166524] = {
true,
false,
"white",
},
[168318] = {
true,
false,
"violet",
},
[166302] = {
true,
false,
"violet",
},
[164921] = {
true,
false,
"violet",
},
[129788] = {
true,
false,
"violet",
},
[134251] = {
true,
false,
"violet",
},
[141284] = {
true,
false,
"violet",
},
[135204] = {
true,
false,
"violet",
},
[139284] = {
true,
false,
"violet",
},
[134629] = {
true,
false,
"violet",
},
[130025] = {
true,
false,
"lightskyblue",
},
[136186] = {
true,
false,
"violet",
},
[134284] = {
true,
false,
"violet",
},
[168572] = {
true,
false,
"blue",
},
[135474] = {
true,
false,
"violet",
},
[174210] = {
true,
false,
"violet",
},
[131850] = {
true,
false,
"violet",
},
[134364] = {
true,
false,
"violet",
},
[131586] = {
true,
false,
"violet",
},
[164414] = {
true,
false,
"violet",
},
[133870] = {
true,
false,
"violet",
},
[168718] = {
true,
false,
"lightskyblue",
},
[165414] = {
true,
false,
"violet",
},
[131666] = {
true,
false,
"violet",
},
[135365] = {
true,
false,
"violet",
},
[167111] = {
true,
false,
"violet",
},
[131587] = {
true,
false,
"violet",
},
[127488] = {
true,
false,
"lightskyblue",
},
[131492] = {
true,
false,
"violet",
},
[130655] = {
true,
false,
"violet",
},
[130028] = {
true,
false,
"violet",
},
[171799] = {
true,
false,
"violet",
},
[168942] = {
true,
false,
"lightskyblue",
},
[131318] = {
true,
false,
"violet",
},
[166275] = {
true,
false,
"lightskyblue",
},
[150146] = {
true,
false,
"violet",
},
[165529] = {
true,
false,
"lightskyblue",
},
[122972] = {
true,
false,
"violet",
},
[134990] = {
true,
false,
"violet",
},
[127486] = {
true,
false,
"violet",
},
[122969] = {
true,
false,
"violet",
},
[169927] = {
true,
false,
"blue",
},
[130661] = {
true,
false,
"violet",
},
[166276] = {
true,
false,
"blue",
},
[168578] = {
true,
false,
"violet",
},
[168594] = {
true,
false,
"violet",
},
[131812] = {
true,
false,
"violet",
},
[164562] = {
true,
false,
"blue",
},
[164451] = {
true,
false,
"white",
},
[137478] = {
true,
false,
"violet",
},
[171341] = {
true,
false,
"white",
},
[167967] = {
true,
false,
"violet",
},
[136076] = {
true,
false,
"violet",
},
[122973] = {
true,
false,
"violet",
},
[133432] = {
true,
false,
"violet",
},
[168627] = {
true,
false,
"violet",
},
[162039] = {
true,
false,
"lightskyblue",
},
[165872] = {
true,
false,
"lightskyblue",
},
[151657] = {
true,
false,
"violet",
},
[150276] = {
true,
false,
"violet",
},
[134417] = {
true,
false,
"violet",
},
[170882] = {
true,
false,
"violet",
},
[168420] = {
true,
false,
"lightskyblue",
},
[167612] = {
true,
false,
"violet",
},
[138187] = {
true,
false,
"lightskyblue",
},
[131670] = {
true,
false,
"lightskyblue",
},
[128434] = {
true,
false,
"violet",
},
[139949] = {
true,
false,
"violet",
},
[134418] = {
true,
false,
"lightskyblue",
},
[171772] = {
true,
false,
"white",
},
[126919] = {
true,
false,
"violet",
},
[139800] = {
true,
false,
"violet",
},
[133593] = {
true,
false,
"violet",
},
[162057] = {
true,
false,
"violet",
},
[134514] = {
true,
false,
"violet",
},
[165137] = {
true,
false,
"lightskyblue",
},
[134174] = {
true,
false,
"violet",
},
[144295] = {
true,
false,
"violet",
},
[163459] = {
true,
false,
"lightskyblue",
},
[150297] = {
true,
false,
"violet",
},
[130026] = {
true,
false,
"violet",
},
[129547] = {
true,
false,
"violet",
},
[144294] = {
true,
false,
"violet",
},
[166299] = {
true,
false,
"violet",
},
[133912] = {
true,
false,
"violet",
},
[129367] = {
true,
false,
"violet",
},
},
["health_selection_overlay_alpha"] = 0,
["dps"] = {
["colors"] = {
["aggro"] = {
0.78039215686274,
0.25098039215686,
0.25098039215686,
},
["notontank"] = {
0.29411764705882,
0.68627450980392,
0.29803921568628,
},
["noaggro"] = {
0.29411764705882,
0.68627450980392,
0.29803921568628,
},
["pulling"] = {
nil,
0.45882352941177,
0.10196078431373,
},
},
},
["cast_statusbar_color"] = {
nil,
0.70196078431373,
nil,
1,
},
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = -2,
["side"] = 2,
},
["health_animation_time_dilatation"] = 2.619999885559082,
["cast_statusbar_bgcolor"] = {
nil,
nil,
nil,
1,
},
["aura_alpha"] = 1,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["cast_statusbar_spark_width"] = 4,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator6",
},
["Jundies Plater"] = {
["target_highlight"] = false,
["aura_breakline_space"] = 1,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    local color = \"gray\"\n    \n    function envTable.updateNameplateColor(unitFrame)\n        if not InCombatLockdown() then\n            return\n        end\n\n        -- Hardened Carapace stacks on Shattereshell Scarab\n        if unitFrame.namePlateNpcId == 218884 then\n            local auraInfo = C_UnitAuras.GetAuraDataBySpellName(unitId, C_Spell.GetSpellName(438706))\n            \n            if auraInfo and auraInfo.applications and auraInfo.applications <= 5 then\n                Plater.SetNameplateColor(unitFrame) -- omitting a color should reset it\n                return\n            end\n        end\n        \n        Plater.SetNameplateColor(unitFrame, color)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable) end",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable) end",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateNameplateColor(unitFrame)\nend",
["Time"] = 1727071096,
["Icon"] = "524354",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    local color = \"gray\"\n    \n    function envTable.updateNameplateColor(unitFrame)\n        if not InCombatLockdown() then\n            return\n        end\n\n        -- Hardened Carapace stacks on Shattereshell Scarab\n        if unitFrame.namePlateNpcId == 218884 then\n            local auraInfo = C_UnitAuras.GetAuraDataBySpellName(unitId, C_Spell.GetSpellName(438706))\n            \n            if auraInfo and auraInfo.applications and auraInfo.applications <= 5 then\n                Plater.SetNameplateColor(unitFrame) -- omitting a color should reset it\n                return\n            end\n        end\n        \n        Plater.SetNameplateColor(unitFrame, color)\n    end\nend",
["NpcNames"] = {
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 578,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable) end",
["Name"] = "Invalidate Unit - Jundies",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (self, unitId, unitFrame, envTable) end",
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
350857,
352016,
235308,
235089,
367573,
362020,
232156,
374779,
113309,
117665,
379256,
396734,
406730,
403049,
410631,
410654,
403284,
421013,
425794,
260923,
264027,
75683,
336499,
335141,
256957,
440177,
438706,
451026,
325697,
442611,
458199,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateNameplateColor(unitFrame)\nend",
["Temp_Initialization"] = "function (self, unitId, unitFrame, envTable) end",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable) end",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n--The War Within\n\n--\n\n--DRAGONFLIGHT\n\n--Amirdrassil\n--Gnarlroot - 209333\n--Nymue - 206172\n--Smolderon - 200927\n--Pip - 208367\n--Urctos - 208363\n\n--Aberrus, the Shadowed Crucible\n--Zskarn - 202375\n--Rashok - 201320\n--Magmorax - 201579\n\n--VAULT OF THE INCARNATES\n\n--Eranog - 184972\n--Terros - 190496\n--Dethea, Ascended - 189813 \n--Broodkeeper Diurna - 190245\n--Kurog Grimtotem - 184986\n\n--DUNGEONS\n--Overgrown Ancient - 196482\n--Telash Greywing - 186737\n--Granyth - 186616\n--The Raging Tempest - 186615\n--Zancha - 131383\n--Unbound Abomination - 133007\n--Warlord Sargha - 189901\n--Chargath, Bane of Scales - 189340\n--Emberon - 184422\n--Cragmaw - 131817\n--Unbound Abomination - 133007\n\n--SHADOWLANDS\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n164558 = Hakkar the Soulflayer\n\n162060 = Oryphrion\ncustom:\n171557 = shade-of-bargast\n\n--BFA\n\n--\n--Priestess Alun'za - 122967\n\n-- Sepulcher of the First Ones\n\n--Xymox adds - 184140\n--Lihuvim - 182169\n--Tala - 104217 for testing\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
["fontColor"] = {
1,
1,
1,
1,
},
["fontSize"] = 12,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["Time"] = 1726353060,
["Icon"] = 136048,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n--The War Within\n\n--\n\n--DRAGONFLIGHT\n\n--Amirdrassil\n--Gnarlroot - 209333\n--Nymue - 206172\n--Smolderon - 200927\n--Pip - 208367\n--Urctos - 208363\n\n--Aberrus, the Shadowed Crucible\n--Zskarn - 202375\n--Rashok - 201320\n--Magmorax - 201579\n\n--VAULT OF THE INCARNATES\n\n--Eranog - 184972\n--Terros - 190496\n--Dethea, Ascended - 189813 \n--Broodkeeper Diurna - 190245\n--Kurog Grimtotem - 184986\n\n--DUNGEONS\n--Overgrown Ancient - 196482\n--Telash Greywing - 186737\n--Granyth - 186616\n--The Raging Tempest - 186615\n--Zancha - 131383\n--Unbound Abomination - 133007\n--Warlord Sargha - 189901\n--Chargath, Bane of Scales - 189340\n--Emberon - 184422\n--Cragmaw - 131817\n--Unbound Abomination - 133007\n\n--SHADOWLANDS\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n164558 = Hakkar the Soulflayer\n\n162060 = Oryphrion\ncustom:\n171557 = shade-of-bargast\n\n--BFA\n\n--\n--Priestess Alun'za - 122967\n\n-- Sepulcher of the First Ones\n\n--Xymox adds - 184140\n--Lihuvim - 182169\n--Tala - 104217 for testing\n\n--]=]",
["NpcNames"] = {
"171557",
"162060",
"168318",
"184140",
"182169",
"196482",
"186120",
"186116",
"189901",
"197025",
"190496",
"189813",
"190245",
"184972",
"184986",
"164558",
"186737",
"186616",
"186615",
"131383",
"133007",
"202375",
"201320",
"201579",
"189340",
"131817",
"209333",
"122967",
"206172",
"200927",
"208367",
"208363",
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 585,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Name"] = "Show Energy - Jundies",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0.5,\n        yOffset = 0.5, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n    if (timeLeft < (envTable._Duration*0.3)) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1726353056,
["Icon"] = 413591,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0.5,\n        yOffset = 0.5, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["NpcNames"] = {
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 365,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["Name"] = "Pandemic Glow - Jundies",
["Author"] = "Viash-Thrall",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Adds a configurable pixel border glow to the buff/debuff if the remaining duration is less than 30% of its total duration.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
292711,
278946,
212463,
284402,
284401,
2818,
703,
1943,
295425,
283668,
316220,
258179,
207690,
315341,
1822,
1079,
106830,
202347,
204213,
391191,
980,
172,
445468,
445465,
316099,
383346,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n    if (timeLeft < (envTable._Duration*0.3)) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
["useCastbarColor"] = false,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1727078560,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["NpcNames"] = {
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 1220,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Name"] = "Important Casts - Jundies",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
3636,
376171,
350687,
372735,
373017,
392488,
268030,
257784,
337943,
320822,
333292,
341840,
324987,
333478,
178072,
330438,
329423,
350287,
334928,
348428,
330532,
358980,
351073,
358026,
351603,
356023,
330513,
334076,
237946,
237952,
312262,
242733,
362628,
316443,
356031,
356011,
356001,
355642,
355644,
355782,
355057,
356133,
357260,
357284,
347015,
355139,
336451,
364240,
364241,
361923,
368063,
356407,
363024,
355584,
334664,
340300,
366288,
232120,
228554,
228009,
228025,
228019,
227977,
228278,
228280,
228567,
29339,
169341,
162415,
340037,
373513,
373618,
167232,
227646,
375606,
386549,
385568,
385393,
388211,
211464,
215433,
371983,
373405,
391599,
387627,
375653,
388392,
387862,
392457,
396812,
383823,
371624,
393309,
393296,
391268,
393429,
374623,
390548,
391019,
387615,
152818,
225100,
210261,
212784,
392486,
397889,
395859,
385331,
388804,
156718,
398206,
106856,
106864,
397394,
367500,
377488,
377612,
385574,
215204,
212773,
397382,
257426,
265540,
265542,
278961,
403978,
403671,
257397,
278755,
413044,
265511,
183528,
193803,
193585,
410870,
87779,
374045,
374699,
385029,
373897,
378282,
384161,
369675,
369465,
369365,
411302,
274400,
400296,
405433,
408805,
411994,
413607,
412922,
417481,
418200,
411300,
412378,
412233,
407124,
415304,
412012,
421029,
421031,
420525,
425816,
265368,
264390,
264407,
263959,
253583,
252781,
255041,
256849,
200630,
204243,
201399,
168082,
427459,
164965,
164887,
169839,
200345,
76813,
429176,
76820,
200248,
225562,
436841,
334748,
324293,
434802,
322938,
256957,
275826,
446700,
257169,
272571,
449455,
429109,
443430,
451871,
76711,
338353,
432967,
433841,
452162,
431309,
450756,
451097,
462508,
429428,
407120,
386024,
444743,
427609,
432959,
424420,
440687,
448248,
429545,
447950,
447411,
445021,
333623,
257732,
460092,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function()\nend",
["OnHideCode"] = "function()\nend",
["OptionsValues"] = {
["debuffed"] = 0.79999995231628,
["casting"] = 1.1999999284744,
["hide"] = true,
},
["Temp_OnShowCode"] = "function()\nend\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    local isDebuffed = scriptTable.isDebuffed(unitFrame)\n    \n    if isDebuffed then\n        if scriptTable.config.hide then\n            scriptTable.hide(unitFrame)\n            return\n        end\n        \n        Plater.SetNameplateScale(unitFrame, scriptTable.config.debuffed)\n        -- instantly ccd enemies (e.g. freeze trap) never had the animation start\n        if unitFrame.healthBar.HealthFlashFrame then\n            unitFrame.healthBar.HealthFlashFrame:StopAnimating()\n        end\n        \n        return\n    end\n    scriptTable.show(unitFrame)\n    \n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Time"] = 1726864248,
["Icon"] = 298642,
["Temp_ConstructorCode"] = "function()\nend",
["NpcNames"] = {
"204560",
},
["semver"] = "1.0.6",
["Enabled"] = false,
["Revision"] = 257,
["Options"] = {
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "nameplate scale while debuffed",
["Min"] = 0,
["Key"] = "debuffed",
["Value"] = 0.8,
["Name"] = "Debuffed Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "nameplate scale while casting",
["Min"] = 0,
["Key"] = "casting",
["Value"] = 1.4,
["Name"] = "Casting Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hide",
["Value"] = false,
["Name"] = "Hide Nameplate when ccd",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["OnShowCode"] = "function()\nend\n\n\n\n",
["Name"] = "Incorporeal - Jundies",
["Author"] = "Ququlcoatl-Blackmoore",
["Initialization"] = "function (scriptTable)\n    -- taken from https://github.com/Tercioo/Plater-Nameplates/blob/master/libs/DF/spells.lua#L916\n    -- but trimmed to only include ccs that would deal with it for good\n    local spells = {\n        [118699] = \"WARLOCK\", -- Fear (debuff spellid)\n        [710] = \"WARLOCK\", -- Banish\n        [118] = \"MAGE\", -- Polymorph\n        [61305] = \"MAGE\", -- Polymorph (black cat)\n        [28271] = \"MAGE\", -- Polymorph Turtle\n        [161354] = \"MAGE\", -- Polymorph Monkey\n        [161353] = \"MAGE\", -- Polymorph Polar Bear Cub\n        [126819] = \"MAGE\", -- Polymorph Porcupine\n        [277787] = \"MAGE\", -- Polymorph Direhorn\n        [61721] = \"MAGE\", -- Polymorph Rabbit\n        [28272] = \"MAGE\", -- Polymorph Pig\n        [277792] = \"MAGE\", -- Polymorph Bumblebee\n        [391622] = \"MAGE\", -- Polymorph Duck\n        [9484] = \"PRIEST\", -- Shackle Undead\n        [2094] = \"ROGUE\", -- Blind\n        [427773] = \"ROGUE\", -- Blind\n        [20066] = \"PALADIN\", -- Repentance (talent)\n        [10326] = \"PALADIN\", -- Turn Evil\n        [2637] = \"DRUID\", -- Hibernate\n        [115078] = \"MONK\", -- Paralysis\n        [51514] = \"SHAMAN\", -- Hex\n        [210873] = \"SHAMAN\", -- Hex (Compy)\n        [211004] = \"SHAMAN\", -- Hex (Spider)\n        [211010] = \"SHAMAN\", -- Hex (Snake)\n        [211015] = \"SHAMAN\", -- Hex (Cockroach)\n        [269352] = \"SHAMAN\", -- Hex (Skeletal Hatchling)\n        [277778] = \"SHAMAN\", -- Hex (Zandalari Tendonripper)\n        [277784] = \"SHAMAN\", -- Hex (Wicker Mongrel)\n        [309328] = \"SHAMAN\", -- Hex (Living Honey)\n        [217832] = \"DEMONHUNTER\", -- Imprison\n        [360806] = \"EVOKER\", -- Sleep Walk\n        [3355] = \"HUNTER\", -- Freezing Trap\n        [1513] = \"HUNTER\" -- Scare Beast\n    }\n    \n    --- @return boolean\n    scriptTable.isDebuffed = function(unitFrame)\n        for spellId in pairs(spells) do\n            if Plater.UnitHasAura(unitFrame, spellId) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    scriptTable.hide = function(unitFrame)\n        -- no check whether its already hidden as it may reappear for whichever\n        -- reason when you turn camera away and back to it again\n        Plater.HideHealthBar(unitFrame)\n        Plater.DisableHighlight(unitFrame)\n        unitFrame._isHidden = true\n    end\n    \n    scriptTable.show = function(unitFrame)\n        if not unitFrame._isHidden then\n            return\n        end\n        \n        Plater.ShowHealthBar(unitFrame)\n        Plater.EnableHighlight(unitFrame)\n        unitFrame._isHidden = false\n    end\nend",
["Desc"] = "conditionally scales the nameplate of Incorporeal Beings when not ccd",
["version"] = 7,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    local isDebuffed = scriptTable.isDebuffed(unitFrame)\n    \n    if isDebuffed then\n        if scriptTable.config.hide then\n            scriptTable.hide(unitFrame)\n            return\n        end\n        \n        Plater.SetNameplateScale(unitFrame, scriptTable.config.debuffed)\n        -- instantly ccd enemies (e.g. freeze trap) never had the animation start\n        if unitFrame.healthBar.HealthFlashFrame then\n            unitFrame.healthBar.HealthFlashFrame:StopAnimating()\n        end\n        \n        return\n    end\n    scriptTable.show(unitFrame)\n    \n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Temp_Initialization"] = "function (scriptTable)\n    -- taken from https://github.com/Tercioo/Plater-Nameplates/blob/master/libs/DF/spells.lua#L916\n    -- but trimmed to only include ccs that would deal with it for good\n    local spells = {\n        [118699] = \"WARLOCK\", -- Fear (debuff spellid)\n        [710] = \"WARLOCK\", -- Banish\n        [118] = \"MAGE\", -- Polymorph\n        [61305] = \"MAGE\", -- Polymorph (black cat)\n        [28271] = \"MAGE\", -- Polymorph Turtle\n        [161354] = \"MAGE\", -- Polymorph Monkey\n        [161353] = \"MAGE\", -- Polymorph Polar Bear Cub\n        [126819] = \"MAGE\", -- Polymorph Porcupine\n        [277787] = \"MAGE\", -- Polymorph Direhorn\n        [61721] = \"MAGE\", -- Polymorph Rabbit\n        [28272] = \"MAGE\", -- Polymorph Pig\n        [277792] = \"MAGE\", -- Polymorph Bumblebee\n        [391622] = \"MAGE\", -- Polymorph Duck\n        [9484] = \"PRIEST\", -- Shackle Undead\n        [2094] = \"ROGUE\", -- Blind\n        [427773] = \"ROGUE\", -- Blind\n        [20066] = \"PALADIN\", -- Repentance (talent)\n        [10326] = \"PALADIN\", -- Turn Evil\n        [2637] = \"DRUID\", -- Hibernate\n        [115078] = \"MONK\", -- Paralysis\n        [51514] = \"SHAMAN\", -- Hex\n        [210873] = \"SHAMAN\", -- Hex (Compy)\n        [211004] = \"SHAMAN\", -- Hex (Spider)\n        [211010] = \"SHAMAN\", -- Hex (Snake)\n        [211015] = \"SHAMAN\", -- Hex (Cockroach)\n        [269352] = \"SHAMAN\", -- Hex (Skeletal Hatchling)\n        [277778] = \"SHAMAN\", -- Hex (Zandalari Tendonripper)\n        [277784] = \"SHAMAN\", -- Hex (Wicker Mongrel)\n        [309328] = \"SHAMAN\", -- Hex (Living Honey)\n        [217832] = \"DEMONHUNTER\", -- Imprison\n        [360806] = \"EVOKER\", -- Sleep Walk\n        [3355] = \"HUNTER\", -- Freezing Trap\n        [1513] = \"HUNTER\" -- Scare Beast\n    }\n    \n    --- @return boolean\n    scriptTable.isDebuffed = function(unitFrame)\n        for spellId in pairs(spells) do\n            if Plater.UnitHasAura(unitFrame, spellId) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    scriptTable.hide = function(unitFrame)\n        -- no check whether its already hidden as it may reappear for whichever\n        -- reason when you turn camera away and back to it again\n        Plater.HideHealthBar(unitFrame)\n        Plater.DisableHighlight(unitFrame)\n        unitFrame._isHidden = true\n    end\n    \n    scriptTable.show = function(unitFrame)\n        if not unitFrame._isHidden then\n            return\n        end\n        \n        Plater.ShowHealthBar(unitFrame)\n        Plater.EnableHighlight(unitFrame)\n        unitFrame._isHidden = false\n    end\nend",
["Temp_OnHideCode"] = "function()\nend",
["url"] = "https://wago.io/8_ULM1VxI/7",
},
{
["ConstructorCode"] = "function (_, _, _, envTable, scriptTable)\n    \n    \n    --TWW Dungeons\n    \n    local cityOfThreads = {\n        [219984] = { 50 }, --Xeph'itik\n    }\n    \n    local dawnbreaker = {\n        [211087] = { 50 }, --Speaker Shadowcrown\n        [213937] = { 59.5 }, --Rasha'nan\n    }\n    \n    local prioryOfTheSacredFlame = {\n        [207940] = { 50 }, --Prioress Murrpray\n    }\n    \n    local darkflameCleft = {\n        [210797] = { 44.5 }, --The Darkness\n    }\n    \n    --DF Dungeons\n    \n    local dawnOfTheInfinite = {\n        [207638] = { 80 }, -- Blight of Galakrond\n        [207639] = { 80 }, -- Blight of Galakrond\n        [198997] = { 80 }, -- Blight of Galakrond\n        [201792] = { 50 }, -- Ahnzon\n        [199000] = { 20 }, -- Deios\n        [198933] = { 90, 85 }, -- Iridikron\n    }\n    \n    local rubyLifePools = {\n        [190485] = { 50 }, -- Stormvein\n        [190484] = { 50 }, -- Kyrakka\n        [193435] = { 50 }, -- Kyrakka\n        [188252] = { 75, 45 }, -- Melidrussa Chillworn\n        [197697] = { 50 }, -- Flamegullet\n    }\n    \n    local azureVault = {\n        [186738] = { 75, 50, 25 }, -- Umbrelskul\n    }\n    \n    local brackenhideHollow = {\n        [186125] = { 15 }, -- Tricktotem\n        [186122] = { 15 }, -- Rira Hackclaw\n        [186124] = { 15 }, -- Gashtooth\n        [185534] = { 15 }, -- Bonebolt Hunter\n        [186206] = { 15 }, -- Cruel Bonecrusher\n        [185508] = { 15 }, -- Claw Fighter\n        [185528] = { 15 }, -- Trickclaw Mystic\n        [186121] = { 4 }, -- Decatriarch Wratheye\n        [186227] = { 20 }, -- Monstrous Decay\n    }\n    \n    local neltharus = {\n        [194816] = { 10 }, -- Forgewrought Monstrosity\n    }\n    \n    local hallsOfInfusion = {\n        [189719] = { 15 }, -- Watcher Irideus\n        [190407] = { 20 }, -- Aqua Rager\n        [189729] = { 60 }, -- Primal Tsunami\n    }\n    \n    local nokhudOffensive = {\n        [186151] = { 60 }, --Balakar Khan\n    }\n    \n    local uldaman = {\n        [184020] = { 40 }, -- Hulking Berserker\n        [184580] = { 10 }, -- Olaf\n        [184581] = { 10 }, -- Baelog\n        [184582] = { 10 }, -- Eric \"The Swift\"\n        [184125] = { 1 }, -- Chrono-Lord Deios\n    }\n    \n    --SL Dungeons\n    \n    local theaterOfPain = {\n        [164451] = { 40 }, -- Dessia the Decapitator\n        [164463] = { 40 }, -- Paceran the Virulent\n        [164461] = { 40 }, -- Sathel the Accursed\n        [165946] = { 50 }, -- Mordretha\n    }\n    \n    local mistsOfTirnaScithe = {\n        [164501] = { 70, 40, 10 }, -- Mistcaller\n        [164926] = { 50 }, --Drust Boughbreaker\n        [164804] = { 20 }, -- Droman Oulfarran\n        [164517] = { 70, 40 }, --Tred'ova\n    }\n    \n    local plaguefall = {\n        [164267] = { 66, 33 }, -- Magrave Stradama\n        [164967] = { 66, 33 }, -- Doctor ickus\n        [169861] = { 66, 33 }, -- Ickor Bileflesh\n    }\n    \n    local hallsOfAtonement = {\n        [164218] = { 70, 40 }, --Lord Chamberlain\n    }\n    \n    local sanguineDepths = {\n        [162099] = { 50 }, -- General Kaal Boss fight\n    }\n    \n    local spiresOfAscension = {\n        [162061] = { 70, 30 }, --Devos\n    }\n    \n    local necroticWake = {\n        [163121] = { 70 }, -- Stitched Vanguard\n    }\n    \n    local deOtherSide = {\n        [164558] = { 80, 60, 40, 20 }, -- Hakkar the Soulflayer\n    }\n    \n    local tazaveshGambit = {\n        [177269] = { 40 }, -- So'leah\n    }\n    \n    local tazaveshStreets = {\n        [175806] = { 66, 33 }, -- So'azmi\n    }\n    \n    --BFA Dungeons\n    \n    local freehold = {\n        [126983] = { 60, 30 }, -- Harlan Sweete - Freehold\n        [126832] = { 75 }, -- Skycap'n Kragg - Freehold\n        [129699] = { 90, 70, 50, 30 }, -- Ludwig von Tortollan - Freehold\n    }\n    \n    local waycrest = {\n        [131527] = { 30 }, -- Lord Waycrest\n    }\n    \n    local siegeOfBoralus = {\n        [129208] = { 66, 33 }, -- Dread Captain Lockwood\n    }\n    \n    local motherlode = {\n        [133345] = { 20 }, -- Feckless Assistant\n    }\n    \n    local junkyard = {\n        [150276] = { 50 }, -- Heavy Scrapbot\n        [152009] = { 30 }, -- Malfunctioning Scrapbots\n        [144298] = { 30 }, -- Defense Bot Mk III (Workshop)\n    }\n    \n    local workshop = {\n        [144298] = { 30 }, -- Defense Bot Mk III (casts a shield)\n    }\n    \n    --Legion Dungeons\n    \n    local karazhanUpper = {\n        [114790] = { 66, 33 }, -- Viz'aduum\n    }\n    \n    local karazhanLower = {\n        [114261] = { 50 }, -- Toe Knee\n        [114260] = { 50 }, -- Mrrgria\n        [114265] = { 50 }, -- Gang Ruffian\n        [114783] = { 50 }, -- Reformed Maiden\n        [114312] = { 60 }, -- Moroes\n    }\n    \n    local hallsOfValor = {\n        [96574] = { 30 }, -- Stormforged Sentinel\n        [95674] = { 60.5 }, -- Fenryr P1\n        [94960] = { 10.5 }, -- Hymdall\n        [95676] = { 80, 5 }, -- Odyn\n    }\n    \n    local courtOfStars = {\n        [104215] = { 25 }, -- Patrol Captain Gerdo\n    }\n    \n    local neltharionsLair = {\n        [91005] = { 20 }, -- Naraxas\n    }\n    \n    local blackRookHold = {\n        [98542] = { 50 }, -- Amalgam of Souls\n        [98965] = { 20 }, -- Kur'talos Ravencrest\n    }\n    \n    local darkheartThicket = {\n        [99192] = { 50 }, -- Shade of Xavius\n    }\n    \n    --WoD Dungeons\n    \n    local grimrailDepot = {\n        [81236] = { 50 }, -- Grimrail Technician\n        [79545] = { 60 }, -- Nitrogg Thundertower\n        [77803] = { 20 }, -- Railmaster Rocketspark\n    }\n    \n    local ironDocks = {\n        [81297] = { 50 }, -- Dreadfang -> Fleshrender Nok'gar\n    }\n    \n    local shadowmoonBurialGrounds = {\n        [76057] = { 20.5 }, -- Carrion Worm\n    }\n    \n    --MoP Dungeons\n    \n    local templeOfTheJadeSerpent = {\n        [59544] = { 50 }, --The Nodding Tiger\n        [56732] = { 70, 30 }, -- Liu Flameheart\n    }\n    \n    --Cata Dungeons\n    \n    local throneOfTheTides = {\n        [40586] = { 60, 30 }, -- Lady Naz'jar\n        [40825] = { 25 }, -- Erunak Stonespeaker\n    }\n    \n    local grimBatol = {\n        [224249] = { 50 }, --Twilight Lavabender\n        [40320] = { 50 }, --Valiona\n    }\n    \n    \n    --Raids \n    \n    local amirdrassil = {\n        [208445] = { 35 }, -- Larodar\n        [204931] = { 70 }, -- Fyrakk\n    }\n    \n    local aberrus = {\n        [201261] = { 80, 60, 40 }, -- Kazzara\n        [201773] = { 50 }, -- Moltannia (Eternal Blaze)\n        [201774] = { 50 }, -- Krozgoth (Essence of Shadow)\n        [201668] = { 60, 35 }, -- Neltharion\n        [200912] = { 50 }, -- Neldris, Experiment\n        [200913] = { 50 }, -- Thadrion, Experiment\n        [199659] = { 25 }, -- Warlord Kagni, Assault of the Zaqali\n        [201754] = { 65, 40 }, -- Sarkareth\n        [203230] = { 50 }, -- Dragonfire Golem, Zskarn\n    }\n    \n    local vault = {\n        [181378] = { 66, 33 }, -- Kurog Grimtotem\n        [194990] = { 50 }, -- Stormseeker Acolyte\n        [189492] = { 65 }, -- Raszageth\n    }\n    \n    local sepulcher = {\n        [181548] = { 40 }, -- Absolution: Prototype Pantheon\n        [181551] = { 40 }, -- Duty: Prototype Pantheon\n        [181546] = { 40 }, -- Renewal: Prototype Pantheon\n        [181549] = { 40 }, -- War: Prototype Pantheon\n        [183501] = { 75, 50 }, --Xymox\n        [180906] = { 78, 45 }, --Halondrus\n        [183671] = { 40 }, -- Monstrous Soul - Anduin\n        [185421] = { 15 }, -- The Jailer\n    }\n    \n    local sanctumOfDomination = {\n        [175730] = { 70, 40 }, -- Fatescribe Roh-Kalo\n        [176523] = { 70, 40 }, -- Painsmith\n        [175725] = { 66, 33 }, -- Eye of the Jailer\n        [176929] = { 60, 20 }, -- Remnant of Kel'Thuzad\n        [175732] = { 83, 50 }, -- Sylvanas Windrunner\n    }\n    \n    local nathria = {\n        [166969] = { 50 }, -- Council of Blood - Frieda\n        [166970] = { 50 }, -- Council of Blood - Stavros\n        [166971] = { 50 }, -- Council of Blood - Niklaus\n        [167406] = { 70.5, 37.5 }, -- Sire Denathrius\n        [173162] = { 66, 33 }, -- Lord Evershade\n    }\n    \n    local openWorld = {\n        [180013] = { 20 }, -- Escaped Wilderling, Shadowlands - Korthia\n        [179931] = { 80, 60 }, -- Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = { 40 }, -- Bazual, The Dreaded Flame, Dragonflight\n    }\n    \n    local mageTower = {\n        [116410] = { 33 }, -- Karam Magespear\n    }\n    \n    envTable.lifePercent = {}\n    \n    local zones = {\n        darkflameCleft,\n        prioryOfTheSacredFlame,\n        cityOfThreads,\n        dawnbreaker,\n        rubyLifePools,\n        azureVault,\n        brackenhideHollow,\n        neltharus,\n        hallsOfInfusion,\n        nokhudOffensive,\n        uldaman,\n        theaterOfPain,\n        mistsOfTirnaScithe,\n        plaguefall,\n        hallsOfAtonement,\n        sanguineDepths,\n        spiresOfAscension,\n        necroticWake,\n        deOtherSide,\n        tazaveshGambit,\n        tazaveshStreets,\n        freehold,\n        waycrest,\n        siegeOfBoralus,\n        motherlode,\n        junkyard,\n        workshop,\n        karazhanUpper,\n        karazhanLower,\n        hallsOfValor,\n        courtOfStars,\n        neltharionsLair,\n        blackRookHold,\n        darkheartThicket,\n        grimrailDepot,\n        ironDocks,\n        shadowmoonBurialGrounds,\n        templeOfTheJadeSerpent,\n        throneOfTheTides,\n        grimBatol,\n        amirdrassil,\n        aberrus,\n        vault,\n        sepulcher,\n        sanctumOfDomination,\n        nathria,\n        openWorld,\n        mageTower,\n        dawnOfTheInfinite,\n    }\n    \n    for i = 1, #zones do\n        local zone = zones[i]\n        \n        for id, thresholds in pairs(zone) do\n            envTable.lifePercent[id] = thresholds\n        end\n    end\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        \n        if not markersTable then\n            return\n        end\n        \n        local unitLifePercent = envTable._HealthPercent / 100\n        \n        for _, percent in ipairs(markersTable) do\n            percent = percent / 100\n            if unitLifePercent > percent then\n                if not unitFrame.healthMarker then\n                    envTable.CreateMarker(unitFrame)\n                end\n                \n                unitFrame.healthMarker:Show()\n                local width = unitFrame.healthBar:GetWidth()\n                unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width * percent, 0)\n                \n                local overlaySize = width * (unitLifePercent - percent)\n                unitFrame.healthOverlay:SetWidth(overlaySize)\n                unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                \n                unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                \n                unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                \n                return\n            end\n        end\n        \n        if unitFrame.healthMarker and unitFrame.healthMarker:IsShown() then\n            unitFrame.healthMarker:Hide()\n            unitFrame.healthOverlay:Hide()\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1727078854,
["NpcNames"] = {
"81236",
"77803",
"150276",
"152009",
"175806",
"114790",
"81297",
"79545",
"177269",
"133345",
"164926",
"114265",
"114261",
"114783",
"180013",
"179931",
"193532",
"116410",
"190485",
"193435",
"188252",
"186738",
"186125",
"186122",
"186124",
"184422",
"96574",
"114312",
"164804",
"164267",
"164967",
"169861",
"162061",
"144298",
"181548",
"181551",
"181546",
"181549",
"183501",
"180906",
"185421",
"163121",
"175730",
"176523",
"175725",
"176929",
"166969",
"166970",
"166971",
"167406",
"173162",
"175732",
"183671",
"114260",
"184581",
"184582",
"184580",
"185534",
"190407",
"194816",
"186151",
"59544",
"186121",
"197697",
"194990",
"76057",
"56732",
"95676",
"94960",
"104215",
"95674",
"189492",
"190484",
"97087",
"184020",
"201261",
"91005",
"113537",
"126983",
"185508",
"186206",
"185528",
"189719",
"129732",
"199659",
"201773",
"201774",
"164218",
"164501",
"162099",
"164451",
"164463",
"164461",
"165946",
"201754",
"203230",
"199000",
"201792",
"198997",
"207639",
"20763",
"129699",
"198933",
"98542",
"98965",
"99192",
"40586",
"40825",
"208445",
"207638",
"131527",
"201668",
"200912",
"200913",
"126832",
"204931",
"189729",
"164929",
"224249",
"219984",
"211087",
"129208",
"164517",
"40320",
"207940",
"213937",
"210797",
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 757,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Prio"] = 99,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Health Markers - Jundies",
["Enabled"] = true,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (_, _, _, envTable, scriptTable)\n    \n    \n    --TWW Dungeons\n    \n    local cityOfThreads = {\n        [219984] = { 50 }, --Xeph'itik\n    }\n    \n    local dawnbreaker = {\n        [211087] = { 50 }, --Speaker Shadowcrown\n        [213937] = { 59.5 }, --Rasha'nan\n    }\n    \n    local prioryOfTheSacredFlame = {\n        [207940] = { 50 }, --Prioress Murrpray\n    }\n    \n    local darkflameCleft = {\n        [210797] = { 44.5 }, --The Darkness\n    }\n    \n    --DF Dungeons\n    \n    local dawnOfTheInfinite = {\n        [207638] = { 80 }, -- Blight of Galakrond\n        [207639] = { 80 }, -- Blight of Galakrond\n        [198997] = { 80 }, -- Blight of Galakrond\n        [201792] = { 50 }, -- Ahnzon\n        [199000] = { 20 }, -- Deios\n        [198933] = { 90, 85 }, -- Iridikron\n    }\n    \n    local rubyLifePools = {\n        [190485] = { 50 }, -- Stormvein\n        [190484] = { 50 }, -- Kyrakka\n        [193435] = { 50 }, -- Kyrakka\n        [188252] = { 75, 45 }, -- Melidrussa Chillworn\n        [197697] = { 50 }, -- Flamegullet\n    }\n    \n    local azureVault = {\n        [186738] = { 75, 50, 25 }, -- Umbrelskul\n    }\n    \n    local brackenhideHollow = {\n        [186125] = { 15 }, -- Tricktotem\n        [186122] = { 15 }, -- Rira Hackclaw\n        [186124] = { 15 }, -- Gashtooth\n        [185534] = { 15 }, -- Bonebolt Hunter\n        [186206] = { 15 }, -- Cruel Bonecrusher\n        [185508] = { 15 }, -- Claw Fighter\n        [185528] = { 15 }, -- Trickclaw Mystic\n        [186121] = { 4 }, -- Decatriarch Wratheye\n        [186227] = { 20 }, -- Monstrous Decay\n    }\n    \n    local neltharus = {\n        [194816] = { 10 }, -- Forgewrought Monstrosity\n    }\n    \n    local hallsOfInfusion = {\n        [189719] = { 15 }, -- Watcher Irideus\n        [190407] = { 20 }, -- Aqua Rager\n        [189729] = { 60 }, -- Primal Tsunami\n    }\n    \n    local nokhudOffensive = {\n        [186151] = { 60 }, --Balakar Khan\n    }\n    \n    local uldaman = {\n        [184020] = { 40 }, -- Hulking Berserker\n        [184580] = { 10 }, -- Olaf\n        [184581] = { 10 }, -- Baelog\n        [184582] = { 10 }, -- Eric \"The Swift\"\n        [184125] = { 1 }, -- Chrono-Lord Deios\n    }\n    \n    --SL Dungeons\n    \n    local theaterOfPain = {\n        [164451] = { 40 }, -- Dessia the Decapitator\n        [164463] = { 40 }, -- Paceran the Virulent\n        [164461] = { 40 }, -- Sathel the Accursed\n        [165946] = { 50 }, -- Mordretha\n    }\n    \n    local mistsOfTirnaScithe = {\n        [164501] = { 70, 40, 10 }, -- Mistcaller\n        [164926] = { 50 }, --Drust Boughbreaker\n        [164804] = { 20 }, -- Droman Oulfarran\n        [164517] = { 70, 40 }, --Tred'ova\n    }\n    \n    local plaguefall = {\n        [164267] = { 66, 33 }, -- Magrave Stradama\n        [164967] = { 66, 33 }, -- Doctor ickus\n        [169861] = { 66, 33 }, -- Ickor Bileflesh\n    }\n    \n    local hallsOfAtonement = {\n        [164218] = { 70, 40 }, --Lord Chamberlain\n    }\n    \n    local sanguineDepths = {\n        [162099] = { 50 }, -- General Kaal Boss fight\n    }\n    \n    local spiresOfAscension = {\n        [162061] = { 70, 30 }, --Devos\n    }\n    \n    local necroticWake = {\n        [163121] = { 70 }, -- Stitched Vanguard\n    }\n    \n    local deOtherSide = {\n        [164558] = { 80, 60, 40, 20 }, -- Hakkar the Soulflayer\n    }\n    \n    local tazaveshGambit = {\n        [177269] = { 40 }, -- So'leah\n    }\n    \n    local tazaveshStreets = {\n        [175806] = { 66, 33 }, -- So'azmi\n    }\n    \n    --BFA Dungeons\n    \n    local freehold = {\n        [126983] = { 60, 30 }, -- Harlan Sweete - Freehold\n        [126832] = { 75 }, -- Skycap'n Kragg - Freehold\n        [129699] = { 90, 70, 50, 30 }, -- Ludwig von Tortollan - Freehold\n    }\n    \n    local waycrest = {\n        [131527] = { 30 }, -- Lord Waycrest\n    }\n    \n    local siegeOfBoralus = {\n        [129208] = { 66, 33 }, -- Dread Captain Lockwood\n    }\n    \n    local motherlode = {\n        [133345] = { 20 }, -- Feckless Assistant\n    }\n    \n    local junkyard = {\n        [150276] = { 50 }, -- Heavy Scrapbot\n        [152009] = { 30 }, -- Malfunctioning Scrapbots\n        [144298] = { 30 }, -- Defense Bot Mk III (Workshop)\n    }\n    \n    local workshop = {\n        [144298] = { 30 }, -- Defense Bot Mk III (casts a shield)\n    }\n    \n    --Legion Dungeons\n    \n    local karazhanUpper = {\n        [114790] = { 66, 33 }, -- Viz'aduum\n    }\n    \n    local karazhanLower = {\n        [114261] = { 50 }, -- Toe Knee\n        [114260] = { 50 }, -- Mrrgria\n        [114265] = { 50 }, -- Gang Ruffian\n        [114783] = { 50 }, -- Reformed Maiden\n        [114312] = { 60 }, -- Moroes\n    }\n    \n    local hallsOfValor = {\n        [96574] = { 30 }, -- Stormforged Sentinel\n        [95674] = { 60.5 }, -- Fenryr P1\n        [94960] = { 10.5 }, -- Hymdall\n        [95676] = { 80, 5 }, -- Odyn\n    }\n    \n    local courtOfStars = {\n        [104215] = { 25 }, -- Patrol Captain Gerdo\n    }\n    \n    local neltharionsLair = {\n        [91005] = { 20 }, -- Naraxas\n    }\n    \n    local blackRookHold = {\n        [98542] = { 50 }, -- Amalgam of Souls\n        [98965] = { 20 }, -- Kur'talos Ravencrest\n    }\n    \n    local darkheartThicket = {\n        [99192] = { 50 }, -- Shade of Xavius\n    }\n    \n    --WoD Dungeons\n    \n    local grimrailDepot = {\n        [81236] = { 50 }, -- Grimrail Technician\n        [79545] = { 60 }, -- Nitrogg Thundertower\n        [77803] = { 20 }, -- Railmaster Rocketspark\n    }\n    \n    local ironDocks = {\n        [81297] = { 50 }, -- Dreadfang -> Fleshrender Nok'gar\n    }\n    \n    local shadowmoonBurialGrounds = {\n        [76057] = { 20.5 }, -- Carrion Worm\n    }\n    \n    --MoP Dungeons\n    \n    local templeOfTheJadeSerpent = {\n        [59544] = { 50 }, --The Nodding Tiger\n        [56732] = { 70, 30 }, -- Liu Flameheart\n    }\n    \n    --Cata Dungeons\n    \n    local throneOfTheTides = {\n        [40586] = { 60, 30 }, -- Lady Naz'jar\n        [40825] = { 25 }, -- Erunak Stonespeaker\n    }\n    \n    local grimBatol = {\n        [224249] = { 50 }, --Twilight Lavabender\n        [40320] = { 50 }, --Valiona\n    }\n    \n    \n    --Raids \n    \n    local amirdrassil = {\n        [208445] = { 35 }, -- Larodar\n        [204931] = { 70 }, -- Fyrakk\n    }\n    \n    local aberrus = {\n        [201261] = { 80, 60, 40 }, -- Kazzara\n        [201773] = { 50 }, -- Moltannia (Eternal Blaze)\n        [201774] = { 50 }, -- Krozgoth (Essence of Shadow)\n        [201668] = { 60, 35 }, -- Neltharion\n        [200912] = { 50 }, -- Neldris, Experiment\n        [200913] = { 50 }, -- Thadrion, Experiment\n        [199659] = { 25 }, -- Warlord Kagni, Assault of the Zaqali\n        [201754] = { 65, 40 }, -- Sarkareth\n        [203230] = { 50 }, -- Dragonfire Golem, Zskarn\n    }\n    \n    local vault = {\n        [181378] = { 66, 33 }, -- Kurog Grimtotem\n        [194990] = { 50 }, -- Stormseeker Acolyte\n        [189492] = { 65 }, -- Raszageth\n    }\n    \n    local sepulcher = {\n        [181548] = { 40 }, -- Absolution: Prototype Pantheon\n        [181551] = { 40 }, -- Duty: Prototype Pantheon\n        [181546] = { 40 }, -- Renewal: Prototype Pantheon\n        [181549] = { 40 }, -- War: Prototype Pantheon\n        [183501] = { 75, 50 }, --Xymox\n        [180906] = { 78, 45 }, --Halondrus\n        [183671] = { 40 }, -- Monstrous Soul - Anduin\n        [185421] = { 15 }, -- The Jailer\n    }\n    \n    local sanctumOfDomination = {\n        [175730] = { 70, 40 }, -- Fatescribe Roh-Kalo\n        [176523] = { 70, 40 }, -- Painsmith\n        [175725] = { 66, 33 }, -- Eye of the Jailer\n        [176929] = { 60, 20 }, -- Remnant of Kel'Thuzad\n        [175732] = { 83, 50 }, -- Sylvanas Windrunner\n    }\n    \n    local nathria = {\n        [166969] = { 50 }, -- Council of Blood - Frieda\n        [166970] = { 50 }, -- Council of Blood - Stavros\n        [166971] = { 50 }, -- Council of Blood - Niklaus\n        [167406] = { 70.5, 37.5 }, -- Sire Denathrius\n        [173162] = { 66, 33 }, -- Lord Evershade\n    }\n    \n    local openWorld = {\n        [180013] = { 20 }, -- Escaped Wilderling, Shadowlands - Korthia\n        [179931] = { 80, 60 }, -- Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = { 40 }, -- Bazual, The Dreaded Flame, Dragonflight\n    }\n    \n    local mageTower = {\n        [116410] = { 33 }, -- Karam Magespear\n    }\n    \n    envTable.lifePercent = {}\n    \n    local zones = {\n        darkflameCleft,\n        prioryOfTheSacredFlame,\n        cityOfThreads,\n        dawnbreaker,\n        rubyLifePools,\n        azureVault,\n        brackenhideHollow,\n        neltharus,\n        hallsOfInfusion,\n        nokhudOffensive,\n        uldaman,\n        theaterOfPain,\n        mistsOfTirnaScithe,\n        plaguefall,\n        hallsOfAtonement,\n        sanguineDepths,\n        spiresOfAscension,\n        necroticWake,\n        deOtherSide,\n        tazaveshGambit,\n        tazaveshStreets,\n        freehold,\n        waycrest,\n        siegeOfBoralus,\n        motherlode,\n        junkyard,\n        workshop,\n        karazhanUpper,\n        karazhanLower,\n        hallsOfValor,\n        courtOfStars,\n        neltharionsLair,\n        blackRookHold,\n        darkheartThicket,\n        grimrailDepot,\n        ironDocks,\n        shadowmoonBurialGrounds,\n        templeOfTheJadeSerpent,\n        throneOfTheTides,\n        grimBatol,\n        amirdrassil,\n        aberrus,\n        vault,\n        sepulcher,\n        sanctumOfDomination,\n        nathria,\n        openWorld,\n        mageTower,\n        dawnOfTheInfinite,\n    }\n    \n    for i = 1, #zones do\n        local zone = zones[i]\n        \n        for id, thresholds in pairs(zone) do\n            envTable.lifePercent[id] = thresholds\n        end\n    end\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        \n        if not markersTable then\n            return\n        end\n        \n        local unitLifePercent = envTable._HealthPercent / 100\n        \n        for _, percent in ipairs(markersTable) do\n            percent = percent / 100\n            if unitLifePercent > percent then\n                if not unitFrame.healthMarker then\n                    envTable.CreateMarker(unitFrame)\n                end\n                \n                unitFrame.healthMarker:Show()\n                local width = unitFrame.healthBar:GetWidth()\n                unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width * percent, 0)\n                \n                local overlaySize = width * (unitLifePercent - percent)\n                unitFrame.healthOverlay:SetWidth(overlaySize)\n                unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                \n                unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                \n                unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                \n                return\n            end\n        end\n        \n        if unitFrame.healthMarker and unitFrame.healthMarker:IsShown() then\n            unitFrame.healthMarker:Hide()\n            unitFrame.healthOverlay:Hide()\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"top\", unitFrame.HealthBar, -22, 15);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--MISC\n--174773 - Spiteful Shade\n\n--The War Within\n\n--220626 - Parasite\n\n--Ara Kara\n--218961 - Starved Crawler\n\n\n--Dragonflight\n\n--Brackenhide\n--194745 - Rotfang Hyena\n\n--Halls of Infusion\n--190366, 195399 - Curious Swoglet\n\n\n--Shadowlands\n\n--Halls of Atonement\n--165913 - Ghastly Parishioner\n--167898 - Manifestation of Envy\n\n--Necrotic Wake\n--164702 - Carrion Worm\n--167731 - Surgeons before 3rd boss\n\n\n--BFA\n\n--Freehold\n--129529 - Blacktooth Scrapper\n\n--Underrot\n--133835 - Feral Bloodswarmer\n\n--Siege of Boredom\n--128649 - 1st boss\n\n\n--LEGION\n\n--Nelth's Lair\n--101476 - Molten Charskin - Dargrul Encounter\n\n--Blackrook hold\n--102781 - Fel Bat Pup\n\n\n--OLD SHIT\n\n--Throne of the tides\n--212681 - Vicious Snap Dragon\n\n--Temple of the Jade Serpent\n--56792 - Figment of Doubt\n\n\n\n--87329 - test dummy \n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["OptionsValues"] = {
["dotsColor"] = {
0,
1,
0.0078431377187371,
1,
},
["outline"] = true,
["nameplateColor"] = {
0.8666667342186,
0.43529415130615,
0,
1,
},
["changeNameplateColor"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["UID"] = "0x669cfe742d32773",
["UpdateCode"] = "function (_, unitId, unitFrame, envTable, scriptTable)\n    --check if can change the nameplate color\n    local targetName = UnitName(unitId .. \"target\")\n    \n    if not targetName then\n        return\n    end\n    \n    local role = UnitGroupRolesAssigned(unitId .. \"target\")\n    \n    -- ignore temporary fixates if the unit is targeting the tank (again)\n    if role == \"TANK\" then\n        Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n        envTable.FixateTarget:Hide()\n        \n        return\n    end\n    \n    if UnitIsUnit(targetName, \"player\") then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation =\n            Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4)\n            \n            envTable.colorchanged = true\n        end\n    end\n    \n    targetName = Plater.SetTextColorByClass(unitId .. \"target\", targetName)\n    envTable.FixateTarget.text = targetName\n    envTable.FixateTarget:Show()\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1727078545,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"top\", unitFrame.HealthBar, -22, 15);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--MISC\n--174773 - Spiteful Shade\n\n--The War Within\n\n--220626 - Parasite\n\n--Ara Kara\n--218961 - Starved Crawler\n\n\n--Dragonflight\n\n--Brackenhide\n--194745 - Rotfang Hyena\n\n--Halls of Infusion\n--190366, 195399 - Curious Swoglet\n\n\n--Shadowlands\n\n--Halls of Atonement\n--165913 - Ghastly Parishioner\n--167898 - Manifestation of Envy\n\n--Necrotic Wake\n--164702 - Carrion Worm\n--167731 - Surgeons before 3rd boss\n\n\n--BFA\n\n--Freehold\n--129529 - Blacktooth Scrapper\n\n--Underrot\n--133835 - Feral Bloodswarmer\n\n--Siege of Boredom\n--128649 - 1st boss\n\n\n--LEGION\n\n--Nelth's Lair\n--101476 - Molten Charskin - Dargrul Encounter\n\n--Blackrook hold\n--102781 - Fel Bat Pup\n\n\n--OLD SHIT\n\n--Throne of the tides\n--212681 - Vicious Snap Dragon\n\n--Temple of the Jade Serpent\n--56792 - Figment of Doubt\n\n\n\n--87329 - test dummy \n\n\n",
["Icon"] = "4630415",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["Revision"] = 1101,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.8666667342186,
0.43529415130615,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Outline Test",
},
},
["NpcNames"] = {
"174773",
"164702",
"165913",
"167898",
"56792",
"194745",
"129529",
"133835",
"101476",
"190366",
"195399",
"212681",
"102781",
"Shattershell Scarab",
"220626",
"218961",
"165251",
"162689",
"167731",
"128649",
"144160",
"40357",
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Changes nameplate color to Orange and adds glow to npcs that are fixated on you",
["ScriptType"] = 3,
["Prio"] = 99,
["Name"] = "Fixate - Jundies",
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (_, unitId, unitFrame, envTable, scriptTable)\n    --check if can change the nameplate color\n    local targetName = UnitName(unitId .. \"target\")\n    \n    if not targetName then\n        return\n    end\n    \n    local role = UnitGroupRolesAssigned(unitId .. \"target\")\n    \n    -- ignore temporary fixates if the unit is targeting the tank (again)\n    if role == \"TANK\" then\n        Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n        envTable.FixateTarget:Hide()\n        \n        return\n    end\n    \n    if UnitIsUnit(targetName, \"player\") then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation =\n            Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4)\n            \n            envTable.colorchanged = true\n        end\n    end\n    \n    targetName = Plater.SetTextColorByClass(unitId .. \"target\", targetName)\n    envTable.FixateTarget.text = targetName\n    envTable.FixateTarget:Show()\nend\n\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function()\nend",
["OnHideCode"] = "function()\nend",
["OptionsValues"] = {
["casting"] = 1.1999999284744,
},
["Temp_OnShowCode"] = "function()\nend\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Time"] = 1726864253,
["Icon"] = 132397,
["Temp_ConstructorCode"] = "function()\nend",
["NpcNames"] = {
"214287",
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 315,
["Options"] = {
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Key"] = "casting",
["Value"] = 1.2,
["Name"] = "Casting Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["OnShowCode"] = "function()\nend\n\n\n\n",
["Name"] = "Must Die - Jundies",
["Author"] = "Ququlcoatl-Blackmoore",
["Initialization"] = "function (scriptTable)        \nend",
["Desc"] = "conditionally scales the nameplate of Incorporeal Beings when not ccd",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Temp_Initialization"] = "function (scriptTable)        \nend",
["Temp_OnHideCode"] = "function()\nend",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Time"] = 1727078553,
["Icon"] = 644389,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["NpcNames"] = {
"167966",
"199220",
"199916",
"225601",
"39450",
},
["semver"] = "1.0.1",
["Enabled"] = true,
["Revision"] = 166,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Name"] = "Hide Nameplate - Jundies",
["Author"] = "Briarbreed-Area 52",
["Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
["Desc"] = "Hide nameplates based on the unit's NPC ID.",
["version"] = 2,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Temp_Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
["url"] = "https://wago.io/Haq3jHDkU/2",
},
},
["npcs_renamed"] = {
[173044] = "Stitcher",
[176394] = "Worker",
[212764] = "Speaker",
[192333] = "Alpha",
[191222] = "Frost Dragon",
[197985] = "Flame",
[190381] = "Rotburst",
[207796] = "Burning",
[98965] = "Kur'talos",
[176523] = "Painsmith",
[185683] = "Speed Relic",
[87329] = "Test Dummy",
[98521] = "Etheldrin",
[101839] = "Cat",
[199368] = "Big Crystal",
[164967] = "Dickus",
[179334] = "Zo'dahh",
[144298] = "Mk III",
[184319] = "Custodian",
[204560] = "Incorporeal",
[135234] = "Doggo",
[181224] = "Da Sausage",
[114627] = "Terror",
[216340] = "Sentry",
[189813] = "Dathea",
[167731] = "Separator",
[184130] = "Earthen",
[184908] = "Haste Boi",
[179733] = "Fish Stick",
[184972] = "Eggnog",
[131823] = "M'lady",
[163891] = "Bad Slime",
[201261] = "Kazzara",
[184910] = "Speed Boi",
[128551] = "Doggo",
[190340] = "Defender",
[184911] = "CDR Boi",
[180990] = "Jailer",
[185610] = "Simp",
[59555] = "Haunting",
[229537] = "Emissary",
[174843] = "Maitre D",
[214012] = "Dark ",
[214287] = "Bad Totem",
[175806] = "Sa'lami",
[181548] = "Absolution",
[178141] = "Fish Sticker",
[227300] = "Big Spawn",
[164705] = "Haste Slime",
[99192] = "Xavius",
[168969] = "Green Slime",
[194897] = "Stormsurge Totem",
[209090] = "T. Swift",
[181549] = "War",
[197509] = "Cloud",
[181546] = "Renewal",
[201155] = "Nascent Dragon",
[182169] = "Lithium",
[151657] = "Bomb",
[164707] = "Purple Slime",
[184582] = "Eric",
[197298] = "Nascent Dragon",
[214840] = "Engorged",
[174773] = "Spiteful",
[197219] = "Big Lasher",
[185685] = "CDR Relic",
[70245] = "uh oh",
[181551] = "Duty",
[180773] = "Trash Can",
[102781] = "Bat",
[165946] = "Mordretha",
[216658] = "Izo",
[198998] = "Tyr",
[175646] = "S.U.C.C. Master",
[114632] = "Attendant",
[165010] = "Purple Slime",
[190426] = "Decay Totem",
[98696] = "Illysanna",
[220401] = "Detector",
[214350] = "Turned",
[151649] = "Mk I",
[185680] = "Haste Relic",
[175663] = "Hill Brad",
[208445] = "Larodar",
[198047] = "Tempest",
[98538] = "Velandras",
},
["bossmod_support_bars_text_enabled"] = false,
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater.lua:1581",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater.lua:1581",
["SoftTargetIconGameObject"] = "Interface/AddOns/Plater/Plater.lua:1581",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOverlapH"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateLargerScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["SoftTargetInteract"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemies"] = "Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua:72",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemyPets"] = "Interface/AddOns/Plater/Plater.lua:8664",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater.lua:8721",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater.lua:1581",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemyTotems"] = "Interface/AddOns/Plater/Plater.lua:8676",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOtherAtBase"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["SoftTargetNameplateInteract"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater.lua:1581",
},
["aura_cache_by_name"] = {
["mort'regar's echoes"] = {
333575,
},
["broodkeeper's blaze"] = {
394452,
394453,
},
["regrowth"] = {
8936,
16561,
20665,
22373,
22695,
27637,
28744,
34361,
39000,
39125,
66067,
69882,
72922,
72932,
84158,
97426,
98099,
102047,
165753,
173791,
176218,
187697,
188905,
224527,
265532,
283745,
292627,
292734,
311571,
326689,
338857,
},
["storm dominance"] = {
374918,
396076,
396077,
396111,
396113,
},
["crippling poison"] = {
3408,
3409,
25809,
30981,
44289,
115196,
132747,
132748,
169622,
169623,
283648,
283649,
},
["flame dominance"] = {
374881,
396056,
396062,
396105,
396106,
},
["blazing soul"] = {
111642,
235365,
389176,
411008,
422067,
423530,
426898,
},
["echoing void"] = {
307232,
307236,
317014,
317020,
317022,
317029,
318280,
318485,
318486,
373281,
373304,
373305,
},
["ice barrier"] = {
11426,
33245,
69787,
198094,
201565,
240074,
262251,
264458,
267504,
284882,
},
["sphere of suppression"] = {
294906,
294907,
294908,
294909,
294910,
294912,
294919,
294920,
294922,
298292,
298418,
298419,
298420,
300012,
300013,
},
["atrophic poison"] = {
83609,
381637,
392388,
},
["concentrated flame"] = {
295368,
295373,
295374,
295375,
295376,
295377,
295378,
295379,
295380,
295384,
299349,
299353,
302564,
},
["sanguine sphere"] = {
163689,
166591,
},
["enslaved"] = {
201089,
204831,
211680,
222424,
268192,
299156,
303622,
323961,
},
["bolster"] = {
209859,
280001,
},
["frost dominance"] = {
374916,
396072,
396074,
396108,
396109,
},
["chaos brand"] = {
1490,
255260,
281242,
},
["whip rage"] = {
29340,
233210,
},
["kevin's wrath"] = {
352520,
352528,
352533,
352534,
},
["sinful revelation"] = {
309623,
324260,
},
["predatory instincts"] = {
389808,
},
["iron wire"] = {
196861,
256148,
},
["earth shield"] = {
379,
974,
32734,
38590,
54479,
54480,
55599,
55600,
56451,
57802,
57803,
58981,
58982,
59471,
59472,
60013,
60014,
66063,
66064,
67530,
67537,
69568,
69569,
69925,
69926,
77905,
79927,
79928,
101649,
101650,
143475,
143479,
145559,
145560,
159981,
159982,
165773,
199355,
199356,
204288,
204290,
226078,
254417,
254425,
268709,
268710,
374066,
374067,
377874,
377875,
383648,
413008,
413010,
},
["power word: shield"] = {
17,
11647,
11835,
11974,
17139,
20697,
22187,
27607,
29408,
32595,
35944,
36052,
41373,
44175,
44291,
46193,
66099,
71548,
71780,
83842,
84039,
102409,
113734,
122808,
123258,
127399,
135313,
136100,
165718,
211558,
226076,
248441,
284471,
318158,
344426,
},
["strength of the pack"] = {
64369,
64381,
171114,
178149,
178150,
189715,
199184,
199186,
200922,
260057,
341222,
341223,
359768,
365338,
},
["numbing poison"] = {
5760,
5761,
158873,
158876,
311373,
342947,
359078,
},
["consecration"] = {
26573,
32773,
33559,
36946,
37553,
38385,
41541,
43429,
57798,
59998,
69930,
79966,
81297,
107100,
111365,
153441,
158416,
162642,
165711,
184047,
188370,
190010,
200667,
200678,
200679,
204242,
205228,
216217,
221645,
221730,
233390,
243597,
251151,
251152,
251549,
251550,
264082,
283579,
283582,
283583,
288807,
288808,
288809,
290496,
290497,
290498,
294346,
294347,
327980,
344172,
382484,
387881,
413267,
},
["lunar empowerment"] = {
211091,
292664,
},
["ancient flame"] = {
144691,
144695,
144699,
295365,
295367,
295369,
295372,
295381,
299348,
299350,
303380,
369990,
375583,
},
["nimble steps"] = {
352366,
354050,
354051,
354052,
},
["breath of eons"] = {
403631,
403755,
403758,
409632,
409990,
},
["tidebringer"] = {
236501,
236502,
},
["prey on the weak"] = {
131511,
255909,
389788,
389806,
},
["pistol shot"] = {
185763,
207820,
214779,
223933,
240073,
255966,
267241,
267452,
268229,
274253,
275000,
285167,
294934,
},
["liquefying ooze"] = {
345466,
},
["enveloping mist"] = {
124682,
209193,
212414,
227345,
231605,
274062,
317602,
344008,
344240,
},
["selfless healer"] = {
85804,
114250,
128863,
216777,
},
["butcher cut"] = {
279416,
279426,
},
["mutilated flesh"] = {
211672,
340431,
381672,
394021,
},
["shadowflame wreathe"] = {
405076,
405764,
405765,
405766,
406753,
406764,
406770,
},
["shadow's grasp"] = {
206760,
263656,
263658,
306965,
},
["scouring touch"] = {
356329,
},
["dream delver"] = {
352786,
353353,
353354,
},
["might of the upper reaches"] = {
333579,
},
["thunder clap"] = {
6343,
57832,
60019,
69304,
85216,
145046,
147683,
183543,
236389,
237917,
262538,
267578,
283929,
316143,
316414,
316490,
382590,
386028,
396719,
},
["nothing personal"] = {
286573,
286579,
286581,
289467,
},
["filthy transfusion"] = {
273834,
273835,
273836,
},
["soulglow spectrometer"] = {
352186,
352938,
352939,
352940,
358379,
},
["mystic touch"] = {
8647,
113746,
331653,
},
["arcane intellect"] = {
1459,
13326,
36880,
45525,
129171,
266499,
367803,
},
["blistering heat"] = {
105444,
105445,
417039,
420950,
420968,
},
["effusive anima accelerator"] = {
352188,
353248,
353349,
360277,
},
["mind flay"] = {
15407,
16568,
17165,
22919,
23953,
26044,
26143,
28310,
29407,
29570,
32417,
35507,
37276,
37330,
37621,
38243,
40842,
42396,
43512,
46562,
52586,
54339,
54805,
57779,
57941,
59367,
59974,
60006,
60472,
65488,
78751,
79541,
79711,
89032,
91134,
103024,
129033,
144293,
149984,
150886,
150893,
154125,
164445,
172670,
183324,
189873,
193473,
193635,
196508,
196509,
201520,
202894,
203037,
203313,
203375,
208697,
216513,
218510,
222075,
234696,
241934,
254123,
260182,
260304,
263117,
264892,
271649,
274019,
274032,
277358,
277521,
278311,
284414,
290402,
292974,
299301,
303566,
306391,
308172,
308884,
308885,
310552,
310555,
312526,
312679,
314187,
314188,
314592,
315949,
316835,
317490,
319027,
321330,
394167,
406231,
},
["in the spotlight"] = {
227931,
312926,
},
["moonkin aura"] = {
209740,
209746,
},
["power word: fortitude"] = {
13864,
21562,
23947,
23948,
36004,
58921,
74973,
94366,
133538,
160637,
165739,
183585,
206629,
211681,
266501,
267528,
284466,
286145,
},
["blaze of glory"] = {
99252,
146038,
146039,
153926,
167629,
167630,
177354,
373972,
373973,
373974,
373975,
373976,
373977,
385528,
},
["insidious chill"] = {
391566,
391568,
},
["freezing ice stone"] = {
402940,
403391,
},
["amplifying poison"] = {
381664,
383414,
394328,
},
["earth dominance"] = {
374917,
396067,
396068,
396085,
396098,
},
["deadly poison"] = {
2818,
2823,
3583,
10022,
13582,
21787,
21788,
32970,
32971,
34616,
34655,
34657,
36872,
38519,
38520,
41191,
41192,
41485,
43580,
43581,
56145,
56149,
59479,
59482,
63755,
63756,
67710,
67711,
72329,
82632,
82633,
96648,
113780,
129410,
130980,
130981,
132745,
132746,
145419,
145420,
145421,
177918,
177919,
177920,
289078,
314113,
373774,
377030,
377036,
394324,
394325,
403952,
},
["defensive countermeasure"] = {
297133,
299428,
300996,
303941,
},
["inspired"] = {
105710,
133461,
133928,
134116,
134454,
134885,
135077,
135414,
135435,
192943,
224693,
235727,
256539,
301972,
343503,
},
["all-consuming spite"] = {
343553,
},
},
["url"] = "https://wago.io/ak3iS95aa/110",
["blizzard_nameplate_font_override_enabled"] = true,
["indicator_raidmark_scale"] = 0.8499999642372131,
["aura2_y_offset"] = 1.5,
["aura_timer_text_anchor"] = {
["x"] = 0.5,
},
["buffs_on_aura2"] = true,
["health_selection_overlay"] = "PlaterFocus",
["expansion_triggerwipe"] = {
[8] = true,
[10] = true,
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.80000007152557,
0.30196079611778,
0.30196079611778,
1,
},
["first_run2"] = true,
["npc_cache"] = {
[164815] = {
"Zolramus Siphoner",
"The Necrotic Wake",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[24656] = {
"Fizzle",
"Magisters' Terrace",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[10381] = {
"Ravaged Cadaver",
"Stratholme",
"enUS",
},
[10413] = {
"Crypt Beast",
"Stratholme",
"enUS",
},
[22897] = {
"Summoned Windfury Totem",
"Magisters' Terrace",
"enUS",
},
[22929] = {
"Greater Shadowfiend",
"Black Temple",
"enUS",
},
[225204] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[227507] = {
"Sureki Skirmisher",
"Nerub-ar Palace",
"enUS",
},
[213434] = {
"Sporbit",
"Fungal Folly",
"enUS",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
},
[138464] = {
"Ashvane Deckhand",
"Siege of Boralus",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[19507] = {
"Sunseeker Gene-Splicer",
"Tempest Keep: The Botanica",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
},
[219066] = {
"Afflicted Civilian",
"The Rookery",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[226487] = {
"Hive'Ashi Swarmer",
"Kalimdor",
"enUS",
},
[20083] = {
"Bloodwarder Mender",
"Tempest Keep: The Botanica",
"enUS",
},
[13196] = {
"Phase Lasher",
"Dire Maul",
"enUS",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[13276] = {
"Wildspawn Imp",
"Dire Maul",
"enUS",
},
[24561] = {
"Yazzai",
"Magisters' Terrace",
"enUS",
},
[227513] = {
"Tala",
"The Dread Pit",
"enUS",
},
[24689] = {
"Wretched Bruiser",
"Magisters' Terrace",
"enUS",
},
[228537] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[227514] = {
"Velo",
"The Dread Pit",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[1729] = {
"Defias Evoker",
"Deadmines",
"enUS",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[218306] = {
"Scarab Captain Vul'akan",
"Nerub-ar Palace",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[17653] = {
"Shadowmoon Channeler",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[222145] = {
"Voracious Stagshell",
"Nerub-ar Palace",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[1763] = {
"Gilnid",
"Deadmines",
"enUS",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[232893] = {
"Anvilrage Warden",
"Blackrock Depths",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[219588] = {
"Yes Man",
"Cinderbrew Meadery",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[232894] = {
"Manifested Dread",
"Blackrock Depths",
"enUS",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[10382] = {
"Mangled Cadaver",
"Stratholme",
"enUS",
},
[10398] = {
"Thuzadin Shadowcaster",
"Stratholme",
"enUS",
},
[10414] = {
"Patchwork Horror",
"Stratholme",
"enUS",
},
[222149] = {
"Injured Earthen",
"The Stonevault",
"enUS",
},
[22963] = {
"Bonechewer Worker",
"Black Temple",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
},
[229826] = {
"Boulder",
"Blackrock Depths",
"enUS",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[17398] = {
"Nascent Fel Orc",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[17462] = {
"Shattered Hand Zealot",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[226758] = {
"Hive'Ashi Drone",
"Kalimdor",
"enUS",
},
[39450] = {
"Trogg Dweller",
"Grim Batol",
"enUS",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
"enUS",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
"enUS",
},
[215756] = {
"Ascended Webwarden",
"Khaz Algar",
},
[218315] = {
"Kaheti Sentry",
"Nerub-ar Palace",
"enUS",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
"enUS",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[218317] = {
"Woven Threadmancer",
"Nerub-ar Palace",
"enUS",
},
[232902] = {
"Bloodhound Mastiff",
"Blackrock Depths",
"enUS",
},
[222923] = {
"Repurposed Loaderbot",
"The Stonevault",
"enUS",
},
[5649] = {
"Sandfury Blood Drinker",
"Zul'Farrak",
"enUS",
},
[84499] = {
"Entanglement",
"The Everbloom",
"enUS",
},
[26802] = {
"Alliance Ranger",
"The Nexus",
"enUS",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[11454] = {
"Wildspawn Betrayer",
"Dire Maul",
"enUS",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
"enUS",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
},
[223181] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[218320] = {
"Web Acolyte",
"Nerub-ar Palace",
"enUS",
},
[190174] = {
"Hypnosis Bat",
"Operation: Mechagon",
},
[223182] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
"enUS",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
"enUS",
},
[202969] = {
"Empty Recollection",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216275] = {
"Brann's Epic Egg",
"Kriegval's Rest",
"enUS",
},
[39388] = {
"Mutated Hatchling",
"Grim Batol",
"enUS",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
"enUS",
},
[6017] = {
"Lava Spout Totem",
"Zul'Farrak",
"enUS",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
"enUS",
},
[8120] = {
"Sul'lithuz Abomination",
"Zul'Farrak",
"enUS",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
"enUS",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[218325] = {
"Swarming Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[171500] = {
"Shuffling Corpse",
"The Necrotic Wake",
"enUS",
},
[42971] = {
"Rockwing Gargoyle",
"Stratholme",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[10399] = {
"Thuzadin Acolyte",
"Stratholme",
"enUS",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[163058] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[22997] = {
"Flame of Azzinoth",
"Black Temple",
"enUS",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
"enUS",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
"enUS",
},
[222167] = {
"Brood Infuser",
"Nerub-ar Palace",
"enUS",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[17464] = {
"Shattered Hand Gladiator",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[165108] = {
"Illusionary Clone",
"Mists of Tirna Scithe",
"enUS",
},
[17624] = {
"Laughing Skull Warden",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[39390] = {
"Twilight Drake",
"Grim Batol",
"enUS",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[32593] = {
"Skittering Swarmer",
"Azjol-Nerub",
"enUS",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[11455] = {
"Wildspawn Felsworn",
"Dire Maul",
"enUS",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[23030] = {
"Dragonmaw Sky Stalker",
"Black Temple",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
"enUS",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
"enUS",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[23318] = {
"Ashtongue Rogue",
"Black Temple",
"enUS",
},
[17401] = {
"Felhound Manastalker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[17465] = {
"Shattered Hand Centurion",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[19608] = {
"Frayer Wildling",
"Tempest Keep: The Botanica",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[39392] = {
"Faceless Corruptor",
"Grim Batol",
"enUS",
},
[223200] = {
"Blood Collector",
"Nerub-ar Palace",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[214502] = {
"The Bloodbound Horror",
"Nerub-ar Palace",
"enUS",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[634] = {
"Defias Overseer",
"Deadmines",
"enUS",
},
[221667] = {
"Lost Watcher",
"Nerub-ar Palace",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[210153] = {
"Ol' Waxbeard",
"Darkflame Cleft",
"enUS",
},
[214503] = {
"Sikran",
"Nerub-ar Palace",
"enUS",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[642] = {
"Sneed's Shredder",
"Deadmines",
"enUS",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[644] = {
"Rhahk'Zor",
"Deadmines",
"enUS",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
"enUS",
},
[26805] = {
"Alliance Cleric",
"The Nexus",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[223204] = {
"Chamber Guardian",
"Nerub-ar Palace",
"enUS",
},
[200943] = {
"Electrified Colossal Stormfiend",
"Vault of the Incarnates",
},
[221669] = {
"Blight Swarmer",
"Nerub-ar Palace",
"enUS",
},
[138254] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[128650] = {
"Chopper Redhook",
"Siege of Boralus",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[214506] = {
"Broodtwister Ovi'nax",
"Nerub-ar Palace",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[227300] = {
"Bile-Soaked Spawn",
"Nerub-ar Palace",
"enUS",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"Vault of the Incarnates",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[17370] = {
"Laughing Skull Enforcer",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[223207] = {
"Black Blood",
"Nerub-ar Palace",
"enUS",
},
[19513] = {
"Mutate Fear-Shrieker",
"Tempest Keep: The Botanica",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[138002] = {
"Scrimshaw Gutter",
"Siege of Boralus",
"enUS",
},
[220138] = {
"Regurgitating Monstrosity",
"Nerub-ar Palace",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
"enUS",
},
[17882] = {
"The Black Stalker",
"Coilfang: The Underbog",
"enUS",
},
[17978] = {
"Thorngrin the Tender",
"Tempest Keep: The Botanica",
"enUS",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
"enUS",
},
[220139] = {
"Slithering Spew",
"Nerub-ar Palace",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[87329] = {
"Raider's Training Dummy",
"Draenor",
},
[18394] = {
"Ethereal Wraith",
"Auchindoun: Mana-Tombs",
"enUS",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
"enUS",
},
[16507] = {
"Shattered Hand Sentry",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[222700] = {
"Umbral Weave",
"City of Threads",
"enUS",
},
[80805] = {
"Makogg Emberblade",
"Iron Docks",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[16699] = {
"Shattered Hand Reaver",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
"enUS",
},
[17371] = {
"Shadowmoon Warlock",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
"enUS",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[221427] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[18331] = {
"Ethereal Darkcaster",
"Auchindoun: Mana-Tombs",
"enUS",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
"enUS",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[10385] = {
"Ghostly Citizen",
"Stratholme",
"enUS",
},
[16700] = {
"Shattered Hand Legionnaire",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[10417] = {
"Venom Belcher",
"Stratholme",
"enUS",
},
[218103] = {
"Nerubian Lord",
"The Dread Pit",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
"enUS",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[165138] = {
"Blight Bag",
"The Necrotic Wake",
"enUS",
},
[40357] = {
"Invoked Shadowflame Spirit",
"Grim Batol",
"enUS",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[222455] = {
"Black Blood Harvester",
"Nerub-ar Palace",
"enUS",
},
[231411] = {
"Felguard",
"Blackrock Depths",
"enUS",
},
[227573] = {
"Anub'vir",
"Earthcrawl Mines",
"enUS",
},
[214012] = {
"Dark Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[233203] = {
"Flamewalker",
"Blackrock Depths",
"enUS",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[221945] = {
"Forgotten Harbinger",
"Nerub-ar Palace",
"enUS",
},
[232436] = {
"Shadowforge Citizen",
"Blackrock Depths",
"enUS",
},
[136483] = {
"Ashvane Deckhand",
"Siege of Boralus",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[227575] = {
"Armored Shellguard",
"Earthcrawl Mines",
"enUS",
},
[40166] = {
"Molten Giant",
"Grim Batol",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[222459] = {
"Congealing Mass",
"Nerub-ar Palace",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
"enUS",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[223995] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[45412] = {
"Lord Aurius Rivendare",
"Stratholme",
"enUS",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
"enUS",
},
[227578] = {
"Nerubian Webcaster",
"Earthcrawl Mines",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[216320] = {
"The Coaglamation",
"City of Threads",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[29335] = {
"Anub'ar Webspinner",
"Azjol-Nerub",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[227581] = {
"Nerubian Oracle",
"Earthcrawl Mines",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[218370] = {
"Queen Ansurek",
"Nerub-ar Palace",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[17725] = {
"Underbog Lurker",
"Coilfang: The Underbog",
"enUS",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
"enUS",
},
[226303] = {
"Bael'Gar",
"Blackrock Depths",
"enUS",
},
[19964] = {
"Red Seedling",
"Tempest Keep: The Botanica",
"enUS",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[883] = {
"Deer",
"Dire Maul",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
"enUS",
},
[218884] = {
"Shattershell Scarab",
"Nerub-ar Palace",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[36522] = {
"Soul Horror",
"The Forge of Souls",
"enUS",
},
[220164] = {
"Darkened Husk",
"The Dread Pit",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[24698] = {
"Ethereum Smuggler",
"Magisters' Terrace",
"enUS",
},
[211977] = {
"Pack Mole",
"Darkflame Cleft",
"enUS",
},
[216583] = {
"Chittering Fearmonger",
"Earthcrawl Mines",
"enUS",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[10418] = {
"Risen Guardsman",
"Stratholme",
"enUS",
},
[7274] = {
"Sandfury Executioner",
"Zul'Farrak",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[216584] = {
"Nerubian Captain",
"The Dread Pit",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[84400] = {
"Gnarled Ancient",
"The Everbloom",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[163619] = {
"Zolramus Bonecarver",
"The Necrotic Wake",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[226309] = {
"Dope'rel",
"Blackrock Depths",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[204560] = {
"Incorporeal Being",
"Halls of Infusion",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[17694] = {
"Shadowmoon Darkcaster",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
"enUS",
},
[226311] = {
"Hate'rel",
"Blackrock Depths",
"enUS",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[223497] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[163623] = {
"Rotspew Leftovers",
"The Necrotic Wake",
"enUS",
},
[223498] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[226313] = {
"Gloom'rel",
"Blackrock Depths",
"enUS",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[18430] = {
"Ethereal Apprentice",
"Auchindoun: Mana-Tombs",
"enUS",
},
[28729] = {
"Watcher Narjil",
"Azjol-Nerub",
"enUS",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[26746] = {
"Crazed Mana-Wraith",
"The Nexus",
"enUS",
},
[228361] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[33134] = {
"Sara",
"Ulduar",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
"enUS",
},
[22844] = {
"Ashtongue Battlelord",
"Black Temple",
"enUS",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
"enUS",
},
[226315] = {
"Lord Roccor",
"Blackrock Depths",
"enUS",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[232458] = {
"Doomforge Arcanasmith",
"Blackrock Depths",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[19486] = {
"Sunseeker Chemist",
"Tempest Keep: The Botanica",
"enUS",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[18431] = {
"Ethereal Beacon",
"Auchindoun: Mana-Tombs",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[28826] = {
"Stormfury Revenant",
"Halls of Lightning",
"enUS",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
"enUS",
},
[28922] = {
"Anub'ar Crusher",
"Azjol-Nerub",
"enUS",
},
[22299] = {
"Spore Strider",
"Coilfang: The Underbog",
"enUS",
},
[16704] = {
"Shattered Hand Sharpshooter",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[10419] = {
"Risen Conjuror",
"Stratholme",
"enUS",
},
[10435] = {
"Magistrate Barthilas",
"Stratholme",
"enUS",
},
[224276] = {
"Twilight Enforcer",
"Grim Batol",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
"enUS",
},
[18419] = {
"Bloodwarder Greenkeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[636] = {
"Defias Blackguard",
"Deadmines",
"enUS",
},
[17399] = {
"Seductress",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[232465] = {
"Dark Iron Imperial Guard",
"Blackrock Depths",
"enUS",
},
[17726] = {
"Wrathfin Myrmidon",
"Coilfang: The Underbog",
"enUS",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
},
[17723] = {
"Bog Giant",
"Coilfang: The Underbog",
"enUS",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[17621] = {
"Heathen Guard",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[23421] = {
"Ashtongue Channeler",
"Black Temple",
"enUS",
},
[230419] = {
"Hive'Ashi Worker",
"Kalimdor",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[102781] = {
"Fel Bat Pup",
"Black Rook Hold",
"enUS",
},
[212764] = {
"Engine Speaker",
"The Stonevault",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[22876] = {
"Coilskar Soothsayer",
"Black Temple",
"enUS",
},
[22874] = {
"Coilskar Harpooner",
"Black Temple",
"enUS",
},
[20923] = {
"Blood Guard Porung",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[230420] = {
"Qiraji Battleguard",
"Kalimdor",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[19512] = {
"Nethervine Reaper",
"Tempest Keep: The Botanica",
"enUS",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"UNKNOWN",
"enUS",
},
[17728] = {
"Murkblood Tribesman",
"Coilfang: The Underbog",
"enUS",
},
[129928] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[2630] = {
"Earthbind Totem",
"Magisters' Terrace",
"enUS",
},
[230421] = {
"Scourge Risen",
"Kalimdor",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[17400] = {
"Felguard Annihilator",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[643] = {
"Sneed",
"Deadmines",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[11043] = {
"Risen Monk",
"Stratholme",
"enUS",
},
[18587] = {
"Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[18421] = {
"Sunseeker Researcher",
"Tempest Keep: The Botanica",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[24664] = {
"Kael'thas Sunstrider",
"Magisters' Terrace",
"enUS",
},
[17975] = {
"High Botanist Freywinn",
"Tempest Keep: The Botanica",
"enUS",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
},
[229399] = {
"Blood Drainer",
"Nerub-ar Palace",
"enUS",
},
[226505] = {
"Obsidian Destroyer",
"Kalimdor",
"enUS",
},
[225817] = {
"Caustic Skyrazor",
"Nerub-ar Palace",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[17724] = {
"Underbat",
"Coilfang: The Underbog",
"enUS",
},
[22873] = {
"Coilskar General",
"Black Temple",
"enUS",
},
[18422] = {
"Sunseeker Botanist",
"Tempest Keep: The Botanica",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[26716] = {
"Azure Warder",
"The Nexus",
"enUS",
},
[18429] = {
"Arcane Fiend",
"Auchindoun: Mana-Tombs",
"enUS",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[17693] = {
"Shattered Hand Scout",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[231083] = {
"Fetid Oak",
"Kalimdor",
"enUS",
},
[28923] = {
"Loken",
"Halls of Lightning",
"enUS",
},
[17976] = {
"Commander Sarannis",
"Tempest Keep: The Botanica",
"enUS",
},
[22846] = {
"Ashtongue Stormcaller",
"Black Temple",
"enUS",
},
[22878] = {
"Aqueous Lord",
"Black Temple",
"enUS",
},
[19509] = {
"Sunseeker Harvester",
"Tempest Keep: The Botanica",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[10416] = {
"Bile Spewer",
"Stratholme",
"enUS",
},
[24690] = {
"Wretched Husk",
"Magisters' Terrace",
"enUS",
},
[24560] = {
"Priestess Delrissa",
"Magisters' Terrace",
"enUS",
},
[24697] = {
"Sister of Torment",
"Magisters' Terrace",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
},
[232463] = {
"Twilight's Hammer Ambassador",
"Blackrock Depths",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[83389] = {
"Ironwing Flamespitter",
"Iron Docks",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
"enUS",
},
[17377] = {
"Keli'dan the Breaker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[11490] = {
"Zevrim Thornhoof",
"Dire Maul",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[13280] = {
"Hydrospawn",
"Dire Maul",
"enUS",
},
[220193] = {
"Sureki Venomblade",
"City of Threads",
"enUS",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[230668] = {
"Corpse Bird",
"Kalimdor",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[230422] = {
"Scourge Soulbinder",
"Kalimdor",
"enUS",
},
[17729] = {
"Murkblood Spearman",
"Coilfang: The Underbog",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[233208] = {
"Anvilrage Artillerist",
"Blackrock Depths",
"enUS",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[11452] = {
"Wildspawn Rogue",
"Dire Maul",
"enUS",
},
[230672] = {
"Brackenhide Scavenger",
"Kalimdor",
"enUS",
},
[1731] = {
"Goblin Craftsman",
"Deadmines",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[24723] = {
"Selin Fireheart",
"Magisters' Terrace",
"enUS",
},
[13021] = {
"Warpwood Crusher",
"Dire Maul",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[198702] = {
"Unstable Frost",
"Vault of the Incarnates",
"enUS",
},
[19508] = {
"Sunseeker Herbalist",
"Tempest Keep: The Botanica",
"enUS",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[226310] = {
"Doom'rel",
"Blackrock Depths",
"enUS",
},
[165111] = {
"Drust Spiteclaw",
"Mists of Tirna Scithe",
"enUS",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
},
[28732] = {
"Anub'ar Warrior",
"Azjol-Nerub",
"enUS",
},
[24687] = {
"Sunblade Physician",
"Magisters' Terrace",
"enUS",
},
[10558] = {
"Hearthsinger Forresten",
"Stratholme",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[5648] = {
"Sandfury Shadowcaster",
"Zul'Farrak",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[28924] = {
"Anub'ar Champion",
"Azjol-Nerub",
"enUS",
},
[20465] = {
"Underbog Frenzy",
"Coilfang: The Underbog",
"enUS",
},
[22847] = {
"Ashtongue Primalist",
"Black Temple",
"enUS",
},
[10420] = {
"Risen Initiate",
"Stratholme",
"enUS",
},
[10436] = {
"Baroness Anastari",
"Stratholme",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[42973] = {
"Eye of Naxxramas",
"Stratholme",
"enUS",
},
[230079] = {
"Flame Geyser",
"Blackrock Depths",
"enUS",
},
[226307] = {
"Anger'rel",
"Blackrock Depths",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[10463] = {
"Shrieking Banshee",
"Stratholme",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[220199] = {
"Battle Scarab",
"City of Threads",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[646] = {
"Mr. Smite",
"Deadmines",
"enUS",
},
[7608] = {
"Murta Grimgut",
"Zul'Farrak",
"enUS",
},
[226308] = {
"Vile'rel",
"Blackrock Depths",
"enUS",
},
[17083] = {
"Fel Orc Convert",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[8095] = {
"Sul'lithuz Sandcrawler",
"Zul'Farrak",
"enUS",
},
[232440] = {
"Twilight Emissary",
"Blackrock Depths",
"enUS",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[639] = {
"Edwin VanCleef",
"Deadmines",
"enUS",
},
[24688] = {
"Wretched Skulker",
"Magisters' Terrace",
"enUS",
},
[7275] = {
"Shadowpriest Sezz'ziz",
"Zul'Farrak",
"enUS",
},
[645] = {
"Cookie",
"Deadmines",
"enUS",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[210478] = {
"Infected Beast",
"Fungal Folly",
"enUS",
},
[14350] = {
"Hydroling",
"Dire Maul",
"enUS",
},
[163622] = {
"Goregrind Bits",
"The Necrotic Wake",
"enUS",
},
[17730] = {
"Murkblood Healer",
"Coilfang: The Underbog",
"enUS",
},
[14349] = {
"Pimgib",
"Dire Maul",
"enUS",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[17826] = {
"Swamplord Musel'ek",
"Coilfang: The Underbog",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
"enUS",
},
[210479] = {
"Carnivorous Lasher",
"Fungal Folly",
"enUS",
},
[19969] = {
"Green Seedling",
"Tempest Keep: The Botanica",
"enUS",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[8877] = {
"Sandfury Zealot",
"Zul'Farrak",
"enUS",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[228841] = {
"Kel'Thuzad",
"Kalimdor",
"enUS",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[3450] = {
"Defias Companion",
"Deadmines",
"enUS",
},
[10876] = {
"Undead Scarab",
"Stratholme",
"enUS",
},
[226306] = {
"Golem Lord Argelmach",
"Blackrock Depths",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[230682] = {
"Ghoul of the Frozen Wastes",
"Kalimdor",
"enUS",
},
[5650] = {
"Sandfury Witch Doctor",
"Zul'Farrak",
"enUS",
},
[10080] = {
"Sandarr Dunereaver",
"Zul'Farrak",
"enUS",
},
[28733] = {
"Anub'ar Shadowcaster",
"Azjol-Nerub",
"enUS",
},
[11492] = {
"Alzzin the Wildshaper",
"Dire Maul",
"enUS",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[26782] = {
"Crystalline Keeper",
"The Nexus",
"enUS",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[22848] = {
"Storm Fury",
"Black Temple",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[7787] = {
"Sandfury Slave",
"Zul'Farrak",
"enUS",
},
[29117] = {
"Anub'ar Champion",
"Azjol-Nerub",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[220974] = {
"Bazaar Guard",
"Khaz Algar",
},
[29213] = {
"Anub'ar Darter",
"Azjol-Nerub",
"enUS",
},
[10813] = {
"Balnazzar",
"Stratholme",
"enUS",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
"enUS",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[215755] = {
"Ascended Overseer",
"Khaz Algar",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[11457] = {
"Wildspawn Hellcaller",
"Dire Maul",
"enUS",
},
[164427] = {
"Reanimated Warrior",
"The Necrotic Wake",
"enUS",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[13022] = {
"Whip Lasher",
"Dire Maul",
"enUS",
},
[203951] = {
"Kobold Skullface",
"Kriegval's Rest",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[36516] = {
"Soulguard Animator",
"The Forge of Souls",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[641] = {
"Goblin Woodcarver",
"Deadmines",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
"enUS",
},
[17731] = {
"Fen Ray",
"Coilfang: The Underbog",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[17827] = {
"Claw",
"Coilfang: The Underbog",
"enUS",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
"enUS",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
"enUS",
},
[220978] = {
"Skeins Guard",
"Khaz Algar",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[11456] = {
"Wildspawn Shadowstalker",
"Dire Maul",
"enUS",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[227632] = {
"Venombite",
"The Dread Pit",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[7247] = {
"Sandfury Soul Eater",
"Zul'Farrak",
"enUS",
},
[8179] = {
"Greater Healing Ward",
"Zul'Farrak",
"enUS",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[22849] = {
"Ashtongue Feral Spirit",
"Black Temple",
"enUS",
},
[10437] = {
"Nerub'enkan",
"Stratholme",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[10405] = {
"Plague Ghoul",
"Stratholme",
"enUS",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[29118] = {
"Anub'ar Crypt Fiend",
"Azjol-Nerub",
"enUS",
},
[232464] = {
"Shadowforge Senator",
"Blackrock Depths",
"enUS",
},
[223541] = {
"Stolen Loader",
"Fungal Folly",
"enUS",
},
[29214] = {
"Anub'ar Assassin",
"Azjol-Nerub",
"enUS",
},
[227635] = {
"Kas'dru",
"The Dread Pit",
"enUS",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
"enUS",
},
[226100] = {
"Kaheti Skirmisher",
"Nerub-ar Palace",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[226312] = {
"Seeth'rel",
"Blackrock Depths",
"enUS",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[166079] = {
"Brittlebone Crossbowman",
"The Necrotic Wake",
"enUS",
},
[28684] = {
"Krik'thir the Gatewatcher",
"Azjol-Nerub",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[17380] = {
"Broggok",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[216634] = {
"Swooping Spreader",
"Earthcrawl Mines",
"enUS",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[223674] = {
"Caustic Skitterer",
"Nerub-ar Palace",
"enUS",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[19843] = {
"Nethervine Trickster",
"Tempest Keep: The Botanica",
"enUS",
},
[17732] = {
"Lykul Wasp",
"Coilfang: The Underbog",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
"enUS",
},
[232244] = {
"Anvilrage Artillerist",
"Blackrock Depths",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[232245] = {
"Anvilrage Dragoon",
"Blackrock Depths",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
"enUS",
},
[234024] = {
"Egg Cocoon",
"Zekvir's Lair",
"enUS",
},
[29340] = {
"Anub'ar Brood Keeper",
"Azjol-Nerub",
"enUS",
},
[85194] = {
"Entanglement",
"The Everbloom",
"enUS",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[133990] = {
"Scrimshaw Gutter",
"Siege of Boralus",
"enUS",
},
[214504] = {
"Rasha'nan",
"Nerub-ar Palace",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[220988] = {
"Skeins Sentry",
"Khaz Algar",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[232246] = {
"Anvilrage Medic",
"Blackrock Depths",
"enUS",
},
[24558] = {
"Ellrys Duskhallow",
"Magisters' Terrace",
"enUS",
},
[232247] = {
"Anvilrage Officer",
"Blackrock Depths",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[115388] = {
"King",
"Return to Karazhan",
},
[218865] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[222881] = {
"Royal Weaver",
"Nerub-ar Palace",
"enUS",
},
[219198] = {
"Ravenous Scarab",
"City of Threads",
"enUS",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[232248] = {
"Anvilrage Soldier",
"Blackrock Depths",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[29119] = {
"Anub'ar Necromancer",
"Azjol-Nerub",
"enUS",
},
[28921] = {
"Hadronox",
"Azjol-Nerub",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[210148] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[11197] = {
"Mindless Skeleton",
"Stratholme",
"enUS",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[220986] = {
"Hollows Sentry",
"Khaz Algar",
},
[18404] = {
"Bloodwarder Steward",
"Tempest Keep: The Botanica",
"enUS",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
},
[229691] = {
"Swarmbot",
"Awakening The Machine",
"enUS",
},
[17381] = {
"The Maker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[232250] = {
"Anvilrage Enforcer",
"Blackrock Depths",
"enUS",
},
[19632] = {
"Lykul Stinger",
"Coilfang: The Underbog",
"enUS",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[17477] = {
"Hellfire Imp",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[1732] = {
"Defias Squallshaper",
"Deadmines",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[13197] = {
"Fel Lash",
"Dire Maul",
"enUS",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[224516] = {
"Skardyn Invader",
"The Stonevault",
"enUS",
},
[17669] = {
"Rabid Warhound",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[11461] = {
"Warpwood Guardian",
"Dire Maul",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[232252] = {
"Anvilrage Rogue",
"Blackrock Depths",
"enUS",
},
[222273] = {
"Sureki Silkbow",
"Nerub-ar Palace",
"enUS",
},
[14354] = {
"Pusillin",
"Dire Maul",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[10383] = {
"Broken Cadaver",
"Stratholme",
"enUS",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[164702] = {
"Carrion Worm",
"The Necrotic Wake",
"enUS",
},
[222274] = {
"Sureki Darkblade",
"Nerub-ar Palace",
"enUS",
},
[222275] = {
"Training Dummy",
"Nerub-ar Palace",
"enUS",
},
[222786] = {
"Parasitic Worm",
"Nerub-ar Palace",
"enUS",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[224066] = {
"Sureki Vanguard",
"Nerub-ar Palace",
"enUS",
},
[225601] = {
"Webbed Victim",
"The Dawnbreaker",
"enUS",
},
[36666] = {
"Spectral Warden",
"The Forge of Souls",
"enUS",
},
[232254] = {
"Fireguard Destroyer",
"Blackrock Depths",
"enUS",
},
[18341] = {
"Pandemonius",
"Auchindoun: Mana-Tombs",
"enUS",
},
[226625] = {
"Cave Skipper",
"Fungal Folly",
"enUS",
},
[18405] = {
"Tempest-Forge Peacekeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[18309] = {
"Ethereal Scavenger",
"Khaz Algar (Surface)",
"enUS",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
"enUS",
},
[24674] = {
"Phoenix",
"Magisters' Terrace",
"enUS",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[7268] = {
"Sandfury Guardian",
"Zul'Farrak",
"enUS",
},
[204109] = {
"Cavernous Shrieker",
"Kriegval's Rest",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[7276] = {
"Zul'Farrak Dead Hero",
"Zul'Farrak",
"enUS",
},
[10390] = {
"Skeletal Guardian",
"Stratholme",
"enUS",
},
[10406] = {
"Ghoul Ravener",
"Stratholme",
"enUS",
},
[22883] = {
"Aqueous Spawn",
"Black Temple",
"enUS",
},
[10438] = {
"Maleki the Pallid",
"Stratholme",
"enUS",
},
[52019] = {
"Skyfall Nova",
"The Vortex Pinnacle",
"enUS",
},
[29120] = {
"Anub'arak",
"Azjol-Nerub",
"enUS",
},
[220742] = {
"Guardian Tentacle",
"The Sinkhole",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[229442] = {
"Obsidian Elemental",
"Blackrock Depths",
"enUS",
},
[208457] = {
"Skittering Darkness",
"Darkflame Cleft",
"enUS",
},
[168246] = {
"Reanimated Crossbowman",
"The Necrotic Wake",
"enUS",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[218440] = {
"Kaheti War Banner",
"Nerub-ar Palace",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
},
[229443] = {
"Greater Obsidian Elemental",
"Blackrock Depths",
"enUS",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[207438] = {
"Headless Horseman",
"Scarlet Monastery",
"enUS",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[23523] = {
"Ashtongue Elementalist",
"Black Temple",
"enUS",
},
[17414] = {
"Shadowmoon Technician",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[229444] = {
"Son of Roccor",
"Blackrock Depths",
"enUS",
},
[225606] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[19557] = {
"Greater Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[26735] = {
"Azure Scale-Binder",
"The Nexus",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[224970] = {
"Caustic Bomber",
"Nerub-ar Palace",
"enUS",
},
[210510] = {
"Flimflam the Cowardly",
"Darkflame Cleft",
"enUS",
},
[17670] = {
"Shattered Hand Houndmaster",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[17734] = {
"Underbog Lord",
"Coilfang: The Underbog",
"enUS",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[165560] = {
"Gormling Larva",
"Mists of Tirna Scithe",
"enUS",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[11030] = {
"Mindless Undead",
"Stratholme",
"enUS",
},
[17990] = {
"Underbog Mushroom",
"Coilfang: The Underbog",
"enUS",
},
[219723] = {
"Royal Whisperer",
"Nerub-ar Palace",
"enUS",
},
[165597] = {
"Patchwerk Soldier",
"The Necrotic Wake",
"enUS",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[7604] = {
"Sergeant Bly",
"Zul'Farrak",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[11142] = {
"Undead Postman",
"Stratholme",
"enUS",
},
[24675] = {
"Phoenix Egg",
"Magisters' Terrace",
"enUS",
},
[223562] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[141938] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[13285] = {
"Death Lash",
"Dire Maul",
"enUS",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[11462] = {
"Warpwood Treant",
"Dire Maul",
"enUS",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
"enUS",
},
[7788] = {
"Sandfury Drudge",
"Zul'Farrak",
"enUS",
},
[26722] = {
"Azure Magus",
"The Nexus",
"enUS",
},
[230216] = {
"Magmatron Mk. II",
"Blackrock Depths",
"enUS",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[28587] = {
"Volkhan",
"Halls of Lightning",
"enUS",
},
[28961] = {
"Titanium Siegebreaker",
"Halls of Lightning",
"enUS",
},
[230218] = {
"Electron Mk. II",
"Blackrock Depths",
"enUS",
},
[22884] = {
"Leviathan",
"Black Temple",
"enUS",
},
[230217] = {
"Toxitron Mk. II",
"Blackrock Depths",
"enUS",
},
[16807] = {
"Grand Warlock Nethekurse",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[29153] = {
"Animated Bones",
"Azjol-Nerub",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[29217] = {
"Anub'ar Venomancer",
"Azjol-Nerub",
"enUS",
},
[229706] = {
"Explosive Bomberbot",
"Awakening The Machine",
"enUS",
},
[224077] = {
"Egg Cocoon",
"Zekvir's Lair",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[222193] = {
"Hollow Frostweaver",
"Nerub-ar Palace",
"enUS",
},
[26800] = {
"Alliance Berserker",
"The Nexus",
"enUS",
},
[230219] = {
"Arcanotron Mk. II",
"Blackrock Depths",
"enUS",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
"enUS",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[3947] = {
"Goblin Shipbuilder",
"Deadmines",
"enUS",
},
[223822] = {
"Queen's Guard Re'zah",
"Nerub-ar Palace",
"enUS",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[222214] = {
"Frenzied Leaper",
"Nerub-ar Palace",
"enUS",
},
[216658] = {
"Izo, the Grand Splicer",
"City of Threads",
"enUS",
},
[23524] = {
"Ashtongue Spiritbinder",
"Black Temple",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[222235] = {
"Bloodthirsty Swarmer",
"Nerub-ar Palace",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[229782] = {
"Awakened Phalanx",
"Awakening The Machine",
"enUS",
},
[128652] = {
"Viq'Goth",
"Siege of Boralus",
"enUS",
},
[87252] = {
"Unruly Ogron",
"Iron Docks",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[17671] = {
"Shattered Hand Champion",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[22853] = {
"Illidari Defiler",
"Black Temple",
"enUS",
},
[17735] = {
"Wrathfin Warrior",
"Coilfang: The Underbog",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[232268] = {
"Chiseled War Construct",
"Blackrock Depths",
"enUS",
},
[207450] = {
"Fungal Stabber",
"Fungal Folly",
"enUS",
},
[224152] = {
"Twilight Brute",
"Grim Batol",
"enUS",
},
[28546] = {
"Ionar",
"Halls of Lightning",
"enUS",
},
[208728] = {
"Treasure Wraith",
"The Dread Pit",
"enUS",
},
[18343] = {
"Tavarok",
"Auchindoun: Mana-Tombs",
"enUS",
},
[22885] = {
"Dragon Turtle",
"Black Temple",
"enUS",
},
[33983] = {
"Constrictor Tentacle",
"Ulduar",
"enUS",
},
[232269] = {
"Fineous Darkvire",
"Blackrock Depths",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[22917] = {
"Illidan Stormrage",
"Black Temple",
"enUS",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[36478] = {
"Soulguard Watchman",
"The Forge of Souls",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[18311] = {
"Ethereal Crypt Raider",
"Khaz Algar (Surface)",
"enUS",
},
[28578] = {
"Hardened Steel Reaver",
"Halls of Lightning",
"enUS",
},
[210265] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[230991] = {
"Fireguard Destroyer",
"Blackrock Depths",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[26723] = {
"Keristrasza",
"The Nexus",
"enUS",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
"enUS",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[220501] = {
"Royal Shackles",
"Nerub-ar Palace",
"enUS",
},
[230992] = {
"Dark Iron Imperial Guard",
"Blackrock Depths",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[10391] = {
"Skeletal Berserker",
"Stratholme",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[10423] = {
"Risen Priest",
"Stratholme",
"enUS",
},
[101839] = {
"Risen Companion",
"Black Rook Hold",
"enUS",
},
[16808] = {
"Warchief Kargath Bladefist",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
"enUS",
},
[230993] = {
"Twilight's Hammer Ambassador",
"Blackrock Depths",
"enUS",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
"enUS",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Fungal Folly",
"enUS",
},
[222038] = {
"Shrillwing Hunter En'kilah",
"Nerub-ar Palace",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[204127] = {
"Kobold Taskfinder",
"Kriegval's Rest",
"enUS",
},
[230994] = {
"Fireling",
"Blackrock Depths",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[223318] = {
"Devoted Worshipper",
"Nerub-ar Palace",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[207454] = {
"Fungal Gutter",
"Fungal Folly",
"enUS",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
"enUS",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[225952] = {
"Qiraji Battleguard",
"Kalimdor",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[224853] = {
"Mutated Hatchling",
"Grim Batol",
"enUS",
},
[227127] = {
"Grazing Mosswool",
"Earthcrawl Mines",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[210270] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
"enUS",
},
[115395] = {
"Queen",
"Return to Karazhan",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[207456] = {
"Fungal Speartender",
"Fungal Folly",
"enUS",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
"enUS",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[33985] = {
"Corruptor Tentacle",
"Ulduar",
"enUS",
},
[222042] = {
"Shrillwing",
"Nerub-ar Palace",
"enUS",
},
[28579] = {
"Hardened Steel Berserker",
"Halls of Lightning",
"enUS",
},
[29240] = {
"Stormforged Lieutenant",
"Halls of Lightning",
"enUS",
},
[228951] = {
"Nerubian Stalker",
"Earthcrawl Mines",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[18312] = {
"Ethereal Spellbinder",
"Auchindoun: Mana-Tombs",
"enUS",
},
[18344] = {
"Nexus-Prince Shaffar",
"Auchindoun: Mana-Tombs",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[203877] = {
"Kobold Thwacker",
"Kriegval's Rest",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
"enUS",
},
[228953] = {
"Skittering Intruder",
"Earthcrawl Mines",
"enUS",
},
[129989] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[166264] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[203878] = {
"Kobold Mystic",
"Kriegval's Rest",
"enUS",
},
[16809] = {
"Warbringer O'mrogg",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[228954] = {
"Nerubian Marauder",
"Earthcrawl Mines",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[19016] = {
"Hellfire Familiar",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[201155] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[40319] = {
"Drahga Shadowburner",
"Grim Batol",
"enUS",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
"enUS",
},
[166266] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[4416] = {
"Defias Strip Miner",
"Deadmines",
"enUS",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[120651] = {
"Explosives",
"Operation: Mechagon",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[223839] = {
"Queen's Guard Ge'zah",
"Nerub-ar Palace",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[224609] = {
"Twilight Destroyer",
"Grim Batol",
"enUS",
},
[221537] = {
"Unstable Experiment",
"Nerub-ar Palace",
"enUS",
},
[219746] = {
"Silken Tomb",
"Nerub-ar Palace",
"enUS",
},
[24684] = {
"Sunblade Blood Knight",
"Magisters' Terrace",
"enUS",
},
[222305] = {
"Palace Guardian",
"Nerub-ar Palace",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[211816] = {
"Bazaar Sentry",
"Khaz Algar",
},
[17993] = {
"Bloodwarder Protector",
"Tempest Keep: The Botanica",
"enUS",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[2520] = {
"Remote-Controlled Golem",
"Deadmines",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[230799] = {
"Burning Spirit",
"Blackrock Depths",
"enUS",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[22855] = {
"Illidari Nightlord",
"Black Temple",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[18313] = {
"Ethereal Sorcerer",
"Auchindoun: Mana-Tombs",
"enUS",
},
[28580] = {
"Hardened Steel Skycaller",
"Halls of Lightning",
"enUS",
},
[22887] = {
"High Warlord Naj'entus",
"Black Temple",
"enUS",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[229729] = {
"Nullbot",
"Awakening The Machine",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[222866] = {
"Defias Watchman",
"Deadmines",
"enUS",
},
[162689] = {
"Surgeon Stitchflesh",
"The Necrotic Wake",
"enUS",
},
[28836] = {
"Stormforged Runeshaper",
"Halls of Lightning",
"enUS",
},
[222564] = {
"Rupturing Ooze",
"Nerub-ar Palace",
"enUS",
},
[207468] = {
"Gnarled Reviver",
"Fungal Folly",
"enUS",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[137614] = {
"Demolishing Terror",
"Siege of Boralus",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
"enUS",
},
[189813] = {
"Dathea, Ascended",
"Vault of the Incarnates",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
"enUS",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[215657] = {
"Ulgrax the Devourer",
"Nerub-ar Palace",
"enUS",
},
[162691] = {
"Blightbone",
"The Necrotic Wake",
"enUS",
},
[20078] = {
"Bloodwarder Reservist",
"Tempest Keep: The Botanica",
"enUS",
},
[10408] = {
"Rockwing Gargoyle",
"Stratholme",
"enUS",
},
[231010] = {
"Corpse Spider",
"Kalimdor",
"enUS",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
},
[210797] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[17871] = {
"Underbog Shambler",
"Coilfang: The Underbog",
"enUS",
},
[165251] = {
"Illusionary Vulpin",
"Mists of Tirna Scithe",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[10808] = {
"Timmy the Cruel",
"Stratholme",
"enUS",
},
[162693] = {
"Nalthor the Rimebinder",
"The Necrotic Wake",
"enUS",
},
[208241] = {
"Ankle Biter",
"The Dread Pit",
"enUS",
},
[208239] = {
"Skittering Menace",
"The Dread Pit",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
"enUS",
},
[17770] = {
"Hungarfen",
"Coilfang: The Underbog",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[217491] = {
"Skeinspinner Takazj",
"Nerub-ar Palace",
"enUS",
},
[224616] = {
"Animated Shadow",
"The Dawnbreaker",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[11032] = {
"Commander Malor",
"Stratholme",
"enUS",
},
[17994] = {
"Bloodwarder Falconer",
"Tempest Keep: The Botanica",
"enUS",
},
[7605] = {
"Raven",
"Zul'Farrak",
"enUS",
},
[221035] = {
"Royal Scribe",
"Nerub-ar Palace",
"enUS",
},
[28581] = {
"Stormforged Tactician",
"Halls of Lightning",
"enUS",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
"enUS",
},
[28837] = {
"Stormforged Sentinel",
"Halls of Lightning",
"enUS",
},
[129996] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
},
[208243] = {
"Nerubian Slasher",
"The Dread Pit",
"enUS",
},
[19598] = {
"Mutate Fleshlasher",
"Tempest Keep: The Botanica",
"enUS",
},
[18314] = {
"Nexus Stalker",
"Auchindoun: Mana-Tombs",
"enUS",
},
[232550] = {
"Prototype Arcane Golem",
"Blackrock Depths",
"enUS",
},
[208242] = {
"Nerubian Darkcaster",
"The Dread Pit",
"enUS",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
"enUS",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[28965] = {
"Titanium Thunderer",
"Halls of Lightning",
"enUS",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[16523] = {
"Shattered Hand Savage",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[222572] = {
"Infesting Latcher",
"Nerub-ar Palace",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[227178] = {
"Scourge Risen",
"Kalimdor",
"enUS",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
"enUS",
},
[7789] = {
"Sandfury Cretin",
"Zul'Farrak",
"enUS",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
},
[11464] = {
"Warpwood Tangler",
"Dire Maul",
"enUS",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[7797] = {
"Ruuzlu",
"Zul'Farrak",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[227179] = {
"Scourge Gargoyle",
"Kalimdor",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[232553] = {
"Prototype Toxic Golem",
"Blackrock Depths",
"enUS",
},
[208245] = {
"Skittering Swarmer",
"The Dread Pit",
"enUS",
},
[227180] = {
"Scourge Lord",
"Kalimdor",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[229995] = {
"Sureki Arbalest",
"Nerub-ar Palace",
"enUS",
},
[229739] = {
"Malfunctioning Pylon",
"Awakening The Machine",
"enUS",
},
[19306] = {
"Mana Leech",
"Auchindoun: Mana-Tombs",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
"enUS",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
"enUS",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[137625] = {
"Demolishing Terror",
"Siege of Boralus",
"enUS",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[199547] = {
"Frostforged Zealot",
"Vault of the Incarnates",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[138247] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[172312] = {
"Spinemaw Gorger",
"Mists of Tirna Scithe",
"enUS",
},
[137626] = {
"Demolishing Terror",
"Siege of Boralus",
"enUS",
},
[17771] = {
"Murkblood Oracle",
"Coilfang: The Underbog",
"enUS",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[137627] = {
"Constricting Terror",
"Siege of Boralus",
"enUS",
},
[207481] = {
"Spinshroom",
"Fungal Folly",
"enUS",
},
[199549] = {
"Flamesworn Herald",
"Vault of the Incarnates",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[18155] = {
"Bloodfalcon",
"Tempest Keep: The Botanica",
"enUS",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
"enUS",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
"enUS",
},
[18315] = {
"Ethereal Theurgist",
"Auchindoun: Mana-Tombs",
"enUS",
},
[28582] = {
"Stormforged Mender",
"Halls of Lightning",
"enUS",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[14327] = {
"Lethtendris",
"Dire Maul",
"enUS",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[210810] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[28838] = {
"Titanium Vanguard",
"Halls of Lightning",
"enUS",
},
[26727] = {
"Mage Hunter Ascendant",
"The Nexus",
"enUS",
},
[33288] = {
"Yogg-Saron",
"Ulduar",
"enUS",
},
[24744] = {
"Vexallus",
"Magisters' Terrace",
"enUS",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[24715] = {
"High Explosive Sheep",
"Magisters' Terrace",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[24683] = {
"Sunblade Mage Guard",
"Magisters' Terrace",
"enUS",
},
[10409] = {
"Rockwing Screecher",
"Stratholme",
"enUS",
},
[10425] = {
"Risen Battle Mage",
"Stratholme",
"enUS",
},
[29062] = {
"Anub'ar Champion",
"Azjol-Nerub",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
"enUS",
},
[222581] = {
"Ruptured Ooze",
"Nerub-ar Palace",
"enUS",
},
[222974] = {
"Hungry Scarab",
"City of Threads",
"enUS",
},
[233328] = {
"Savage Bloodhound Mastiff",
"Blackrock Depths",
"enUS",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[23337] = {
"Illidari Centurion",
"Black Temple",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[19307] = {
"Nexus Terror",
"Auchindoun: Mana-Tombs",
"enUS",
},
[36551] = {
"Spiteful Apparition",
"The Forge of Souls",
"enUS",
},
[10697] = {
"Bile Slime",
"Stratholme",
"enUS",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[17356] = {
"Creeping Ooze",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[17420] = {
"Shattered Hand Heathen",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[10809] = {
"Stonespine",
"Stratholme",
"enUS",
},
[26918] = {
"Chaotic Rift",
"The Nexus",
"enUS",
},
[214140] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[7606] = {
"Oro Eyegouge",
"Zul'Farrak",
"enUS",
},
[197509] = {
"Primal Thundercloud",
"Ruby Life Pools",
"enUS",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[162729] = {
"Patchwerk Soldier",
"The Necrotic Wake",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[28231] = {
"Crystalline Tender",
"The Nexus",
"enUS",
},
[184972] = {
"Eranog",
"Vault of the Incarnates",
"enUS",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[231557] = {
"Anvilrage Sapper",
"Blackrock Depths",
"enUS",
},
[173714] = {
"Mistveil Nightblossom",
"Mists of Tirna Scithe",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[28583] = {
"Blistering Steamrager",
"Halls of Lightning",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[24553] = {
"Apoko",
"Magisters' Terrace",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[26728] = {
"Mage Hunter Initiate",
"The Nexus",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[26792] = {
"Crystalline Protector",
"The Nexus",
"enUS",
},
[24777] = {
"Sunblade Sentinel",
"Magisters' Terrace",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[219006] = {
"Venommaster Nezarox",
"Nerub-ar Palace",
"enUS",
},
[29063] = {
"Anub'ar Crypt Fiend",
"Azjol-Nerub",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[11465] = {
"Warpwood Stomper",
"Dire Maul",
"enUS",
},
[22954] = {
"Illidari Fearbringer",
"Black Temple",
"enUS",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[223357] = {
"Sureki Conscript",
"City of Threads",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[232569] = {
"Shadowforge Senator",
"Blackrock Depths",
"enUS",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
"enUS",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[216329] = {
"Congealed Droplet",
"City of Threads",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
},
[17357] = {
"Creeping Oozeling",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
},
[232571] = {
"Pyromancer Loregrain",
"Blackrock Depths",
"enUS",
},
[231554] = {
"Shadowforge Flame Keeper",
"Blackrock Depths",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[213894] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
"enUS",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
},
[208521] = {
"Pumpkin Soldier",
"Scarlet Monastery",
"enUS",
},
[18317] = {
"Ethereal Priest",
"Auchindoun: Mana-Tombs",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[39625] = {
"General Umbriss",
"Grim Batol",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[29128] = {
"Anub'ar Prime Guard",
"Azjol-Nerub",
"enUS",
},
[213895] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[28584] = {
"Unbound Firestorm",
"Halls of Lightning",
"enUS",
},
[29096] = {
"Anub'ar Champion",
"Azjol-Nerub",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[26729] = {
"Steward",
"The Nexus",
"enUS",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
},
[26793] = {
"Crystalline Frayer",
"The Nexus",
"enUS",
},
[7246] = {
"Sandfury Shadowhunter",
"Zul'Farrak",
"enUS",
},
[223876] = {
"Impaling Spike",
"Nerub-ar Palace",
"enUS",
},
[214920] = {
"Tasting Room Attendant",
"Cinderbrew Meadery",
"enUS",
},
[10394] = {
"Black Guard Sentry",
"Stratholme",
"enUS",
},
[166304] = {
"Mistveil Stinger",
"Mists of Tirna Scithe",
"enUS",
},
[10426] = {
"Risen Inquisitor",
"Stratholme",
"enUS",
},
[29064] = {
"Anub'ar Necromancer",
"Azjol-Nerub",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[7286] = {
"Zul'Farrak Zombie",
"Zul'Farrak",
"enUS",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
"enUS",
},
[24554] = {
"Eramas Brightblaze",
"Magisters' Terrace",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
"enUS",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[220551] = {
"Sureki Ironweaver",
"Nerub-ar Palace",
"enUS",
},
[221896] = {
"Web General Ab'enar",
"Earthcrawl Mines",
"enUS",
},
[25354] = {
"Mutate Fleshlasher",
"Tempest Keep: The Botanica",
"enUS",
},
[23339] = {
"Illidari Heartseeker",
"Black Temple",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[167731] = {
"Separation Assistant",
"The Necrotic Wake",
"enUS",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[218316] = {
"Kaheti Vanguard",
"Nerub-ar Palace",
"enUS",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[231555] = {
"Anvilrage Officer",
"Blackrock Depths",
"enUS",
},
[215435] = {
"Foreseer Xix'amon",
"Nerub-ar Palace",
"enUS",
},
[129371] = {
"Riptide Shredder",
"Siege of Boralus",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
"enUS",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[214668] = {
"Venture Co. Patron",
"Cinderbrew Meadery",
"enUS",
},
[24745] = {
"Pure Energy",
"Magisters' Terrace",
"enUS",
},
[231556] = {
"Anvilrage Soldier",
"Blackrock Depths",
"enUS",
},
[83761] = {
"Ogron Laborer",
"Iron Docks",
},
[164517] = {
"Tred'ova",
"Mists of Tirna Scithe",
"enUS",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
"enUS",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[131823] = {
"Sister Malady",
"UNKNOWN",
"enUS",
},
[19949] = {
"Sapling",
"Tempest Keep: The Botanica",
"enUS",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[129372] = {
"Blacktar Bomber",
"Siege of Boralus",
"enUS",
},
[11082] = {
"Stratholme Courier",
"Stratholme",
"enUS",
},
[216205] = {
"Ravenous Spawn",
"Nerub-ar Palace",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[210108] = {
"E.D.N.A",
"The Stonevault",
"enUS",
},
[36620] = {
"Soulguard Adept",
"The Forge of Souls",
"enUS",
},
[28585] = {
"Slag",
"Halls of Lightning",
"enUS",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[26730] = {
"Mage Slayer",
"The Nexus",
"enUS",
},
[232327] = {
"Harbinger of Flames",
"Blackrock Depths",
"enUS",
},
[26794] = {
"Ormorok the Tree-Shaper",
"The Nexus",
"enUS",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[223372] = {
"Prime Slime",
"Nerub-ar Palace",
"enUS",
},
[229769] = {
"Medbot",
"Awakening The Machine",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[213905] = {
"Animated Darkness",
"The Dawnbreaker",
"enUS",
},
[29097] = {
"Anub'ar Crypt Fiend",
"Azjol-Nerub",
"enUS",
},
[18894] = {
"Felguard Brute",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[231561] = {
"Anvilrage Medic",
"Blackrock Depths",
"enUS",
},
[224368] = {
"Chamber Expeller",
"Nerub-ar Palace",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
},
[10424] = {
"Risen Gallant",
"Stratholme",
"enUS",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[231562] = {
"Anvilrage Dragoon",
"Blackrock Depths",
"enUS",
},
[217489] = {
"Anub'arash",
"Nerub-ar Palace",
"enUS",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[26737] = {
"Crazed Mana-Surge",
"The Nexus",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[231563] = {
"Anvilrage Rogue",
"Blackrock Depths",
"enUS",
},
[208244] = {
"Nerubian Threadmancer",
"Earthcrawl Mines",
"enUS",
},
[232552] = {
"Prototype Electric Golem",
"Blackrock Depths",
"enUS",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[232551] = {
"Prototype Fire Golem",
"Blackrock Depths",
"enUS",
},
[227177] = {
"Scourge Abomination",
"Kalimdor",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[227174] = {
"Scourge Soulbinder",
"Kalimdor",
"enUS",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[231565] = {
"Anvilrage Artillerist",
"Blackrock Depths",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[217748] = {
"Nexus-Princess Ky'veza",
"Nerub-ar Palace",
"enUS",
},
[33988] = {
"Immortal Guardian",
"Ulduar",
"enUS",
},
[7269] = {
"Scarab",
"Zul'Farrak",
"enUS",
},
[230798] = {
"Flamewalker",
"Blackrock Depths",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
"enUS",
},
[231566] = {
"Harbinger of Flames",
"Blackrock Depths",
"enUS",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[28586] = {
"General Bjarngrim",
"Halls of Lightning",
"enUS",
},
[204188] = {
"Tomb-Raider Drywhisker",
"Kriegval's Rest",
"enUS",
},
[24556] = {
"Zelfan",
"Magisters' Terrace",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[26731] = {
"Grand Magus Telestra",
"The Nexus",
"enUS",
},
[26763] = {
"Anomalus",
"The Nexus",
"enUS",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[219724] = {
"Court Attendant",
"Nerub-ar Palace",
"enUS",
},
[10411] = {
"Eye of Naxxramas",
"Stratholme",
"enUS",
},
[221845] = {
"Xur'khun the Defiled",
"Nerub-ar Palace",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[29098] = {
"Anub'ar Necromancer",
"Azjol-Nerub",
"enUS",
},
[28825] = {
"Cyclone",
"Halls of Lightning",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[229778] = {
"Automatic Ironstrider",
"Awakening The Machine",
"enUS",
},
[28835] = {
"Stormforged Construct",
"Halls of Lightning",
"enUS",
},
[207459] = {
"Fungal Rotcaster",
"Fungal Folly",
"enUS",
},
[232593] = {
"Phalanx",
"Blackrock Depths",
"enUS",
},
[28547] = {
"Storming Vortex",
"Halls of Lightning",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[219739] = {
"Infested Spawn",
"Nerub-ar Palace",
"enUS",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[233873] = {
"Fireling",
"Blackrock Depths",
"enUS",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[221986] = {
"Blood Horror",
"Nerub-ar Palace",
"enUS",
},
[231059] = {
"Tichondrius",
"Kalimdor",
"enUS",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[229695] = {
"Corrupted Machinist",
"Awakening The Machine",
"enUS",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[10811] = {
"Instructor Galford",
"Stratholme",
"enUS",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[10439] = {
"Ramstein the Gorger",
"Stratholme",
"enUS",
},
[10407] = {
"Fleshflayer Ghoul",
"Stratholme",
"enUS",
},
[8876] = {
"Sandfury Acolyte",
"Zul'Farrak",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[10955] = {
"Summoned Water Elemental",
"Stratholme",
"enUS",
},
[83578] = {
"Ogron Laborer",
"Iron Docks",
},
[19919] = {
"Thorn Lasher",
"Tempest Keep: The Botanica",
"enUS",
},
[231061] = {
"Phantasmal Bloodfang",
"Kalimdor",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[28730] = {
"Watcher Gashra",
"Azjol-Nerub",
"enUS",
},
[205218] = {
"Spitfire Totem",
"Blackrock Depths",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[212383] = {
"Kobold Taskworker",
"Darkflame Cleft",
"enUS",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
"enUS",
},
[232266] = {
"Doomforge Mechanic",
"Blackrock Depths",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[229783] = {
"Spawn of Bael'Gar",
"Blackrock Depths",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
"enUS",
},
[230807] = {
"Portal Anchor",
"Blackrock Depths",
"enUS",
},
[24557] = {
"Kagani Nightstrike",
"Magisters' Terrace",
"enUS",
},
[141939] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[219725] = {
"Chitin Knight",
"Nerub-ar Palace",
"enUS",
},
[24685] = {
"Sunblade Magister",
"Magisters' Terrace",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[26796] = {
"Commander Stoutbeard",
"The Nexus",
"enUS",
},
[16593] = {
"Shattered Hand Brawler",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[11451] = {
"Wildspawn Satyr",
"Dire Maul",
"enUS",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[224070] = {
"Remote-Controlled Golem",
"Deadmines",
"enUS",
},
[229918] = {
"Caustic Skyrazor",
"Nerub-ar Palace",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[226302] = {
"Ambassador Flamelash",
"Blackrock Depths",
"enUS",
},
[29216] = {
"Anub'ar Guardian",
"Azjol-Nerub",
"enUS",
},
[174773] = {
"Spiteful Shade",
"Algeth'ar Academy",
"enUS",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[10422] = {
"Risen Sorcerer",
"Stratholme",
"enUS",
},
[229441] = {
"Lesser Obsidian Elemental",
"Blackrock Depths",
"enUS",
},
[213577] = {
"Spitfire Charger",
"Kriegval's Rest",
"enUS",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[36497] = {
"Bronjahm",
"The Forge of Souls",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
"enUS",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[228538] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[231158] = {
"Ossirian the Unscarred",
"Kalimdor",
"enUS",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[10421] = {
"Risen Defender",
"Stratholme",
"enUS",
},
[221344] = {
"Gloom Hatchling",
"Nerub-ar Palace",
"enUS",
},
[33136] = {
"Guardian of Yogg-Saron",
"Ulduar",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[220065] = {
"Umbral Weave",
"City of Threads",
"enUS",
},
[222368] = {
"Exalted Priest",
"Nerub-ar Palace",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[23330] = {
"Dragonmaw Wind Reaver",
"Black Temple",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[28920] = {
"Stormforged Giant",
"Halls of Lightning",
"enUS",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[7272] = {
"Theka the Martyr",
"Zul'Farrak",
"enUS",
},
[226503] = {
"Qiraji Gladiator",
"Kalimdor",
"enUS",
},
[19920] = {
"Thorn Flayer",
"Tempest Keep: The Botanica",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[26125] = {
"Risen Ghoul",
"Stratholme",
"enUS",
},
[226757] = {
"Anubisath Conqueror",
"Kalimdor",
"enUS",
},
[10464] = {
"Wailing Banshee",
"Stratholme",
"enUS",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
"enUS",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[129640] = {
"Snarling Dockhound",
"Siege of Boralus",
"enUS",
},
[226485] = {
"Hive'Ashi Worker",
"Kalimdor",
"enUS",
},
[28926] = {
"Spark of Ionar",
"Halls of Lightning",
"enUS",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[226305] = {
"Emperor Dagran Thaurissan",
"Blackrock Depths",
"enUS",
},
[220976] = {
"Hollows Guard",
"Khaz Algar",
},
[232243] = {
"High Interrogator Gerstahn",
"Blackrock Depths",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[219045] = {
"Colossal Spider",
"Nerub-ar Palace",
"enUS",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[28734] = {
"Anub'ar Skirmisher",
"Azjol-Nerub",
"enUS",
},
[24686] = {
"Sunblade Warlock",
"Magisters' Terrace",
"enUS",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[16594] = {
"Shadowmoon Acolyte",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[229537] = {
"Void Emissary",
"Mists of Tirna Scithe",
"enUS",
},
[10412] = {
"Crypt Crawler",
"Stratholme",
"enUS",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[7271] = {
"Witch Doctor Zum'rah",
"Zul'Farrak",
"enUS",
},
[7267] = {
"Chief Ukorz Sandscalp",
"Zul'Farrak",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
"enUS",
},
[8477] = {
"Skeletal Servant",
"Stratholme",
"enUS",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[197298] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
"enUS",
},
[232443] = {
"Twilight Bodyguard",
"Blackrock Depths",
"enUS",
},
[23215] = {
"Ashtongue Sorcerer",
"Black Temple",
"enUS",
},
[189878] = {
"Nathrezim Infiltrator",
"Operation: Mechagon",
},
[622] = {
"Goblin Engineer",
"Deadmines",
"enUS",
},
[214801] = {
"Skipper",
"Nerub-ar Palace",
"enUS",
},
[10384] = {
"Spectral Citizen",
"Stratholme",
"enUS",
},
[36499] = {
"Soulguard Reaper",
"The Forge of Souls",
"enUS",
},
[221863] = {
"Summoned Acolyte",
"Nerub-ar Palace",
"enUS",
},
[172991] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[11460] = {
"Alzzin's Minion",
"Dire Maul",
"enUS",
},
[19505] = {
"Sunseeker Channeler",
"Tempest Keep: The Botanica",
"enUS",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[135245] = {
"Bilge Rat Demolisher",
"Siege of Boralus",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[19633] = {
"Bloodwarder Mender",
"Tempest Keep: The Botanica",
"enUS",
},
[4417] = {
"Defias Taskmaster",
"Deadmines",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[232459] = {
"Weapon Technician",
"Blackrock Depths",
"enUS",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[128551] = {
"Irontide Mastiff",
"Freehold",
"enUS",
},
[163122] = {
"Brittlebone Warrior",
"The Necrotic Wake",
"enUS",
},
[42975] = {
"Plague Ghoul",
"Stratholme",
"enUS",
},
[24722] = {
"Fel Crystal",
"Magisters' Terrace",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[647] = {
"Captain Greenskin",
"Deadmines",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[657] = {
"Defias Pirate",
"Deadmines",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[36564] = {
"Soulguard Bonecaster",
"The Forge of Souls",
"enUS",
},
[11453] = {
"Wildspawn Trickster",
"Dire Maul",
"enUS",
},
[226316] = {
"General Angerforge",
"Blackrock Depths",
"enUS",
},
[212400] = {
"Void Touched Elemental",
"The Stonevault",
"enUS",
},
[24559] = {
"Warlord Salaris",
"Magisters' Terrace",
"enUS",
},
[4418] = {
"Defias Wizard",
"Deadmines",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[229296] = {
"Orb of Ascendance",
"City of Threads",
"enUS",
},
[26734] = {
"Azure Enforcer",
"The Nexus",
"enUS",
},
[217126] = {
"Over-Indulged Patron",
"Cinderbrew Meadery",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[230687] = {
"Brackenhide Devourer",
"Kalimdor",
"enUS",
},
[24815] = {
"Sunblade Imp",
"Magisters' Terrace",
"enUS",
},
[598] = {
"Defias Miner",
"Deadmines",
"enUS",
},
[24761] = {
"Brightscale Wyrm",
"Magisters' Terrace",
"enUS",
},
[24696] = {
"Coilskar Witch",
"Magisters' Terrace",
"enUS",
},
[22896] = {
"Ashtongue Searing Totem",
"Black Temple",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[22960] = {
"Dragonmaw Wyrmcaller",
"Black Temple",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[231410] = {
"Fire Elemental",
"Blackrock Depths",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[226304] = {
"Lord Incendius",
"Blackrock Depths",
"enUS",
},
[18420] = {
"Sunseeker Geomancer",
"Tempest Keep: The Botanica",
"enUS",
},
[233205] = {
"Anvilrage Dragoon",
"Blackrock Depths",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[23216] = {
"Ashtongue Defender",
"Black Temple",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[28731] = {
"Watcher Silthik",
"Azjol-Nerub",
"enUS",
},
[223150] = {
"Ascended Voidspeaker",
"Nerub-ar Palace",
"enUS",
},
[19511] = {
"Nethervine Inciter",
"Tempest Keep: The Botanica",
"enUS",
},
[19865] = {
"Mutate Horror",
"Tempest Keep: The Botanica",
"enUS",
},
[17980] = {
"Laj",
"Tempest Keep: The Botanica",
"enUS",
},
[17977] = {
"Warp Splinter",
"Tempest Keep: The Botanica",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[17395] = {
"Shadowmoon Summoner",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[17427] = {
"Shattered Hand Archer",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[17727] = {
"Wrathfin Sentry",
"Coilfang: The Underbog",
"enUS",
},
[17491] = {
"Laughing Skull Rogue",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[213684] = {
"Void Chunk",
"The Rookery",
"enUS",
},
[232437] = {
"Shadowforge Peasant",
"Blackrock Depths",
"enUS",
},
[17397] = {
"Shadowmoon Adept",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[212405] = {
"Aspiring Forgehand",
"The Stonevault",
"enUS",
},
[17626] = {
"Laughing Skull Legionnaire",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[18105] = {
"Ghaz'an",
"Coilfang: The Underbog",
"enUS",
},
[17429] = {
"Fel Orc Neophyte",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[17695] = {
"Shattered Hand Assassin",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[167116] = {
"Spinemaw Reaver",
"Mists of Tirna Scithe",
"enUS",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[22875] = {
"Coilskar Sea-Caller",
"Black Temple",
"enUS",
},
[22877] = {
"Coilskar Wrangler",
"Black Temple",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[23028] = {
"Bonechewer Taskmaster",
"Black Temple",
"enUS",
},
[167117] = {
"Spinemaw Larva",
"Mists of Tirna Scithe",
"enUS",
},
[22898] = {
"Supremus",
"Black Temple",
"enUS",
},
[22869] = {
"Illidari Boneslicer",
"Black Temple",
"enUS",
},
[22845] = {
"Ashtongue Mystic",
"Black Temple",
"enUS",
},
[10400] = {
"Thuzadin Necromancer",
"Stratholme",
"enUS",
},
[36502] = {
"Devourer of Souls",
"The Forge of Souls",
"enUS",
},
[226314] = {
"Moira Bronzebeard",
"Blackrock Depths",
"enUS",
},
[22841] = {
"Shade of Akama",
"Black Temple",
"enUS",
},
},
["extra_icon_timer_decimals"] = true,
["indicator_anchor"] = {
["x"] = 2,
["side"] = 6,
},
["hide_name_on_game_objects"] = false,
["health_selection_overlay_alpha"] = 0,
["minor_height_scale"] = 0.99999994039536,
["aura_padding"] = 0,
["indicator_worldboss"] = false,
["script_banned_user"] = {
["Player-3674-08A5D7A3"] = true,
},
["cast_statusbar_fadeout_time"] = 0.49999997019768,
["aura_stack_size"] = 8,
["range_check_power_bar_alpha"] = 0.8999999761581421,
["range_check_health_bar_alpha"] = 0.8499999642372131,
["aura_show_crowdcontrol"] = true,
["cast_colors"] = {
[358320] = {
false,
"white",
"",
},
},
["extra_icon_timer_outline"] = "OUTLINE",
["aura_border_colors"] = {
["enrage"] = {
0.70196078431373,
0,
0.054901960784314,
},
["steal_or_purge"] = {
nil,
0.92549019607843,
1,
},
["offensive"] = {
nil,
0.65098039215686,
0.10196078431373,
0,
},
["crowdcontrol"] = {
1,
1,
1,
},
["is_show_all"] = {
0.70196080207825,
0.10196079313755,
0.10196079313755,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["cast_statusbar_color_channeling"] = {
1,
nil,
0.035294119268656,
0.96000000089407,
},
["extra_icon_anchor"] = {
["x"] = -1,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 0.8999999761581421,
["semver"] = "5.1.0",
["bossmod_aura_glow_expiring"] = false,
["aura_frame2_anchor"] = {
["y"] = 1.5,
["x"] = -1.199996948242188,
["side"] = 1,
},
["use_name_translit"] = true,
["aura_alpha"] = 1,
["auto_toggle_friendly"] = {
["arena"] = true,
},
["show_softinteract_icons"] = false,
["extra_icon_height"] = 21,
["transparency_behavior"] = 2,
["spell_animations"] = false,
["debuff_show_cc_border"] = {
1,
1,
1,
},
["aura_consolidate"] = true,
["extra_icon_width"] = 22,
["health_statusbar_texture"] = "1.Reee",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
["Extra Border"] = 2,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Combo Points"] = 6,
["Monk Statue"] = 2,
},
["extra_icon_border_color"] = {
1,
1,
1,
},
["minor_width_scale"] = 0.99999994039536,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 1.5,
["x"] = 1.199996948242188,
["side"] = 7,
},
["aura_timer_text_font"] = "1.Gilroy",
["cast_statusbar_color_finished"] = {
0.27843137254902,
0.75294117647059,
0.23529411764706,
},
["extra_icon_stack_font"] = "1.Gilroy",
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_bgtexture"] = "1.Reee",
["aura2_x_offset"] = -1.199996948242188,
["target_indicator"] = "Double Arrows",
["extra_icon_stack_size"] = 11,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateOverlapV"] = "1.5",
["nameplateLargeTopInset"] = "0.03999999910593",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateNotSelectedAlpha"] = "1",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "60",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "0.99779832363129",
["nameplateTargetBehindMaxDistance"] = "15",
["SoftTargetInteract"] = "0",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "1",
["nameplateMotionSpeed"] = "0.048449993133545",
["nameplateGlobalScale"] = "1",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "0.99656772613525",
["nameplateOverlapH"] = "0.75",
["nameplateSelfTopInset"] = "0.57",
["nameplateShowAll"] = "1",
["nameplateOccludedAlphaMult"] = "0.5",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMotion"] = "1",
["NamePlateHorizontalScale"] = "1",
["nameplateMinScale"] = "1",
["nameplateShowEnemyTotems"] = "1",
["nameplateOtherTopInset"] = "0.03999999910593",
["nameplateOtherAtBase"] = "0",
["nameplateSelfBottomInset"] = "0.37",
["SoftTargetNameplateInteract"] = "0",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateSelfAlpha"] = "0.89999997615814",
["nameplateShowFriends"] = "1",
["SoftTargetIconGameObject"] = "0",
["ShowNamePlateLoseAggroFlash"] = "1",
["ShowClassColorInNameplate"] = "1",
},
["login_counter"] = 53647,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
80,
1,
},
["bossmod_aura_height"] = 32.105155944824,
["aura_stack_font"] = "1.Gilroy",
["blizzard_nameplate_font"] = "1.Gilroy",
["range_check_buffs_alpha"] = 0.8999999761581421,
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.1000000238419,
},
},
["bossmod_cooldown_text_enabled"] = false,
["auras_per_row_amount"] = 4,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator2",
["blizzard_nameplate_large_font"] = "1.Gilroy",
["aura_stack_anchor"] = {
["y"] = 2.5,
["x"] = 8,
["side"] = 12,
},
["plate_config"] = {
["player"] = {
["spellpercent_text_font"] = "1.Gilroy",
["cast"] = {
170,
},
["castbar_enabled"] = false,
["module_enabled"] = false,
["mana_incombat"] = {
168,
4,
},
["healthbar_color"] = {
0,
0,
0,
},
["cast_incombat"] = {
170,
},
["percent_text_anchor"] = {
["y"] = 1.299999237060547,
},
["power_percent_text_size"] = 8,
["spellname_text_font"] = "1.Gilroy",
["mana"] = {
168,
4,
},
["power_percent_text_font"] = "1.Gilroy",
["castbar_offset"] = -55,
["percent_text_size"] = 9,
["percent_text_font"] = "1.Gilroy",
["healthbar_color_by_hp"] = true,
["health_incombat"] = {
168,
},
["health"] = {
168,
},
["percent_text_color"] = {
1,
1,
1,
},
},
["friendlyplayer"] = {
["spellpercent_text_font"] = "1.Gilroy",
["actorname_friend_color"] = {
0.70980392156863,
},
["actorname_use_class_color"] = true,
["cast"] = {
135,
7,
},
["level_text_font"] = "1.Gilroy",
["actorname_text_font"] = "1.Gilroy",
["actorname_text_spacing"] = 8,
["only_damaged"] = false,
["only_thename"] = true,
["cast_incombat"] = {
135,
7,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["percent_text_font"] = "1.Gilroy",
["actorname_guild_color"] = {
0.49803921568627,
},
["percent_show_percent"] = false,
["spellname_text_font"] = "1.Gilroy",
["health_incombat"] = {
135,
15,
},
["health"] = {
135,
15,
},
["actorname_text_size"] = 9,
},
["friendlynpc"] = {
["spellpercent_text_font"] = "1.Gilroy",
["level_text_size"] = 8,
["cast"] = {
135,
7,
},
["spellpercent_text_anchor"] = {
["x"] = 1,
["side"] = 5,
},
["enabled"] = false,
["spellname_text_outline"] = "OUTLINE",
["level_text_font"] = "1.Gilroy",
["actorname_text_font"] = "1.Gilroy",
["quest_color"] = {
1,
0.49803921568627,
},
["actorname_text_outline"] = "OUTLINE",
["big_actortitle_text_color"] = {
nil,
0.7843137254902,
nil,
1,
},
["actorname_text_spacing"] = 9,
["quest_color_enemy"] = {
1,
0.36862745098039,
0,
1,
},
["big_actortitle_text_font"] = "1.Gilroy",
["percent_text_ooc"] = true,
["big_actorname_text_color"] = {
0.25098039215686,
0.68627450980392,
0.20392156862745,
1,
},
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2.5,
["side"] = 10,
},
["cast_incombat"] = {
135,
7,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["spellname_text_font"] = "1.Gilroy",
["quest_color_neutral"] = {
1,
0.65,
0,
},
["big_actorname_text_font"] = "1.Gilroy",
["spellpercent_text_size"] = 9,
["big_actortitle_text_size"] = 9,
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["percent_text_font"] = "1.Gilroy",
["percent_show_health"] = true,
["health_incombat"] = {
135,
15,
},
["spellname_text_size"] = 9,
["health"] = {
135,
15,
},
["percent_text_enabled"] = true,
["percent_text_size"] = 10,
},
["global_health_height"] = 16,
["global_health_width"] = 132,
["enemyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "1.Gilroy",
["level_text_size"] = 8,
["cast"] = {
135,
7,
},
["fixed_class_color"] = {
0.69803921568627,
0.1921568627451,
0.11372549019608,
},
["spellpercent_text_anchor"] = {
["y"] = -1.5,
["x"] = 3,
["side"] = 5,
},
["spellname_text_outline"] = "OUTLINE",
["level_text_font"] = "1.Gilroy",
["actorname_text_font"] = "1.Gilroy",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["quest_color_enemy"] = {
1,
0.49803921568627,
0,
1,
},
["big_actortitle_text_font"] = "Expressway",
["spellpercent_text_size"] = 9,
["cast_incombat"] = {
135,
7,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["spellname_text_font"] = "1.Gilroy",
["quest_color_neutral"] = {
1,
0.49803921568627,
0,
1,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Expressway",
["big_actortitle_text_size"] = 10,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_font"] = "1.Gilroy",
["quest_enabled"] = true,
["quest_color_enabled"] = true,
["spellname_text_size"] = 9,
["health"] = {
135,
15,
},
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2,
["side"] = 10,
},
["health_incombat"] = {
135,
15,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["spellpercent_text_font"] = "1.Gilroy",
["cast"] = {
135,
7,
},
["spellpercent_text_anchor"] = {
["y"] = -1.5,
["x"] = 3,
["side"] = 5,
},
["level_text_font"] = "1.Gilroy",
["actorname_text_font"] = "1.Gilroy",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 8,
["quest_color_enemy"] = {
nil,
0.49803921568627,
},
["big_actortitle_text_font"] = "1.Gilroy",
["cast_incombat"] = {
135,
7,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["spellname_text_font"] = "1.Gilroy",
["quest_color_neutral"] = {
nil,
0.49803921568627,
},
["big_actorname_text_font"] = "1.Gilroy",
["spellpercent_text_size"] = 9,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_font"] = "1.Gilroy",
["health_incombat"] = {
135,
15,
},
["health"] = {
135,
15,
},
["actorname_text_size"] = 9,
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2,
["side"] = 10,
},
["spellname_text_size"] = 9,
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 1.5,
["bossmod_aura_glow_important_only"] = false,
["cast_statusbar_bgcolor"] = {
0.21176470588235,
0.21176470588235,
0.21176470588235,
0.90000000596046,
},
["bossmod_aura_width"] = 33,
["indicator_spec"] = false,
["resources_settings"] = {
["global_settings"] = {
["anchor"] = {
["y"] = 9.709999084472656,
},
["show_depleted"] = false,
["scale"] = 0.80000001192093,
},
["chr"] = {
["Player-4184-004EAE08"] = "ArcaneCharges",
["Player-3674-0898468A"] = "SoulShards",
["Player-11-0E82EBCD"] = "ArcaneCharges",
["Player-3678-0D4F17CA"] = "ComboPoints",
["Player-11-0E5C6A6B"] = "ComboPoints",
["Player-970-00B46921"] = "ComboPoints",
["Player-11-0E5C6A2D"] = "ComboPoints",
["Player-3674-09CBAF8C"] = "ArcaneCharges",
["Player-3678-0D7BB774"] = "ComboPoints",
["Player-2073-09AF21B0"] = "ComboPoints",
["Player-5764-00018799"] = "ComboPoints",
["Player-4184-00C60F8C"] = "ArcaneCharges",
["Player-5764-0008F0CD"] = "ComboPoints",
["Player-3684-091919FE"] = "HolyPower",
["Player-4184-0021692E"] = "ComboPoints",
["Player-3296-00945C33"] = "ComboPoints",
["Player-5764-0008EBB9"] = "ComboPoints",
["Player-970-006B99B8"] = "ComboPoints",
["Player-3678-0D8642EB"] = "ComboPoints",
["Player-3678-0D4C07B5"] = "ComboPoints",
["Player-4184-00CB2DE1"] = "ComboPoints",
["Player-3678-0D44FD01"] = "ComboPoints",
["Player-3391-0C8D299C"] = "SoulShards",
["Player-4184-008FBEFA"] = "ComboPoints",
["Player-3674-096625B1"] = "Chi",
["Player-970-00B2046C"] = "ComboPoints",
["Player-3676-0DBAB9E1"] = "ComboPoints",
["Player-3391-0CE9D30D"] = "Runes",
["Player-970-00B49A85"] = "ComboPoints",
["Player-3296-00936CF9"] = "ComboPoints",
["Player-11-0E89E36C"] = "ComboPoints",
["Player-970-0065C1C7"] = "ComboPoints",
["Player-3391-0B94A9F7"] = "HolyPower",
["Player-4604-00325132"] = "ComboPoints",
["Player-3391-0C85C8E4"] = "ComboPoints",
["Player-4184-00C7C500"] = "HolyPower",
["Player-4184-00C8CB6C"] = "ComboPoints",
},
},
["spell_animation_list"] = {
[27285] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[188443] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[46968] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.1,
["frequency"] = 120,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.1,
["frequency"] = 120,
},
},
[275779] = {
["1"] = {
["scaleY"] = -1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[11366] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[228354] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[32645] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
["4"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
},
[189112] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.34999999403954,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.8799999952316,
["fade_in"] = 0,
["duration"] = 0.40000000596046,
["cooldown"] = 0.5,
["frequency"] = 51.979999542236,
},
},
[187874] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 100,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 100,
},
},
[185763] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.25999999046326,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.15999999642372,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.25999999046326,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.15999999642372,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[31661] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[203782] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = true,
["scaleY"] = -1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = true,
["scaleY"] = -1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[100784] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[31935] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[53351] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[257045] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[107270] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 200,
},
},
[17364] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.02,
["scale_upY"] = 1.02,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.02,
["scale_upY"] = 1.02,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.11,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.11,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[49998] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["enabled"] = true,
["amplitude"] = 1.0330086946487,
["fade_in"] = 0.01,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[7268] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[206930] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[196278] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.05,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.05,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[162243] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[196819] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1999999284744,
["scale_upY"] = 1.2999999523163,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1999999284744,
["scale_upY"] = 1.2999999523163,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
["4"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
},
[264178] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.08,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.08,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.25,
["frequency"] = 20,
},
},
[199804] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 0.88999938964844,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.1699999570847,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 23.525676727295,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0499999523163,
["scale_upY"] = 1.0499999523163,
["scale_downX"] = 1,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[187708] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[185438] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.19999998807907,
["absolute_sineX"] = false,
["scaleY"] = -1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 6.460000038147,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.19999998807907,
["absolute_sineX"] = false,
["scaleY"] = -1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 6.460000038147,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[86040] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 2,
["fade_in"] = 0.05,
["duration"] = 0.15,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 2,
["fade_in"] = 0.05,
["duration"] = 0.15,
["cooldown"] = 0.25,
["frequency"] = 20,
},
},
[52174] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.2,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.3,
["cooldown"] = 0.5,
["frequency"] = 50,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.2,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.3,
["cooldown"] = 0.5,
["frequency"] = 50,
},
},
[2643] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[324540] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[53595] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[108853] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[204157] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 6,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 6,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[228478] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[148135] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
},
[199547] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.039999961853,
["scale_upY"] = 1.039999961853,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.039999961853,
["scale_upY"] = 1.039999961853,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[117418] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1799999922514,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1799999922514,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
},
[222024] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["3"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1,
["amplitude"] = 1.7999999523163,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1,
["amplitude"] = 1.7999999523163,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
},
[155166] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[8042] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.05,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.05,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
},
["indicator_scale"] = 0.99999994039536,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
0.49306830763817,
},
["castbar_icon_size"] = "same as castbar plus healthbar",
["npc_colors"] = {
[99358] = {
true,
false,
"fuchsia",
},
[198716] = {
true,
false,
"blue",
},
[196798] = {
true,
false,
"deepskyblue",
},
[186696] = {
true,
false,
"fuchsia",
},
[194241] = {
true,
false,
"blue",
},
[205622] = {
true,
false,
"mediumpurple",
},
[207796] = {
true,
false,
"fuchsia",
},
[196671] = {
true,
false,
"mediumpurple",
},
[180431] = {
true,
false,
"deepskyblue",
},
[115407] = {
true,
false,
"blue",
},
[150253] = {
true,
false,
"mediumpurple",
},
[184140] = {
true,
false,
"fuchsia",
},
[99359] = {
true,
false,
"mediumpurple",
},
[180432] = {
true,
false,
"blue",
},
[216621] = {
true,
false,
"fuchsia",
},
[173016] = {
true,
false,
"deepskyblue",
},
[129602] = {
true,
false,
"mediumpurple",
},
[180433] = {
true,
false,
"fuchsia",
},
[200126] = {
true,
false,
"blue",
},
[120651] = {
true,
false,
"gold",
},
[212786] = {
true,
false,
"fuchsia",
},
[197697] = {
true,
false,
"fuchsia",
},
[176598] = {
true,
false,
"blue",
},
[164578] = {
true,
false,
"mediumpurple",
},
[214066] = {
true,
false,
"blue",
},
[131587] = {
true,
false,
"mediumpurple",
},
[199233] = {
true,
false,
"mediumpurple",
},
[126918] = {
true,
false,
"blue",
},
[196548] = {
true,
false,
"deepskyblue",
},
[135552] = {
true,
false,
"blue",
},
[218671] = {
true,
false,
"deepskyblue",
},
[84400] = {
true,
false,
"mediumpurple",
},
[186191] = {
true,
false,
"blue",
},
[135169] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[83761] = {
true,
false,
"mediumpurple",
},
[178008] = {
true,
false,
"yellow",
},
[221102] = {
true,
false,
"deepskyblue",
},
[178392] = {
true,
false,
"fuchsia",
},
[168418] = {
true,
false,
"deepskyblue",
},
[200387] = {
true,
false,
"mediumpurple",
},
[221103] = {
true,
false,
"mediumpurple",
},
[199748] = {
true,
false,
"deepskyblue",
},
[165222] = {
true,
false,
"blue",
},
[198214] = {
true,
false,
"fuchsia",
},
[184020] = {
true,
false,
"mediumpurple",
},
[220976] = {
true,
false,
"fuchsia",
},
[223150] = {
true,
false,
"deepskyblue",
},
[199749] = {
true,
false,
"mediumpurple",
},
[168420] = {
true,
false,
"blue",
},
[165479] = {
true,
false,
"mediumpurple",
},
[192333] = {
true,
false,
"mediumpurple",
},
[178139] = {
true,
false,
"mediumpurple",
},
[83763] = {
true,
false,
"deepskyblue",
},
[184022] = {
true,
false,
"deepskyblue",
},
[189265] = {
true,
false,
"blue",
},
[75899] = {
true,
false,
"fuchsia",
},
[210109] = {
true,
false,
"mediumpurple",
},
[212411] = {
true,
false,
"mediumpurple",
},
[184023] = {
true,
false,
"blue",
},
[168934] = {
true,
false,
"fuchsia",
},
[211261] = {
true,
false,
"fuchsia",
},
[196044] = {
true,
false,
"fuchsia",
},
[190034] = {
true,
false,
"mediumpurple",
},
[160495] = {
true,
false,
"deepskyblue",
},
[188244] = {
true,
false,
"mediumpurple",
},
[178142] = {
true,
false,
"deepskyblue",
},
[157810] = {
true,
false,
"deepskyblue",
},
[194894] = {
true,
false,
"blue",
},
[196045] = {
true,
false,
"deepskyblue",
},
[201288] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"deepskyblue",
},
[168425] = {
true,
false,
"fuchsia",
},
[208450] = {
true,
false,
"mediumpurple",
},
[83893] = {
true,
false,
"blue",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"blue",
},
[227632] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"deepskyblue",
},
[217658] = {
true,
false,
"mediumpurple",
},
[177889] = {
true,
false,
"fuchsia",
},
[187224] = {
true,
false,
"blue",
},
[211904] = {
true,
false,
"fuchsia",
},
[154744] = {
true,
false,
"fuchsia",
},
[194897] = {
true,
false,
"fuchsia",
},
[217531] = {
true,
false,
"fuchsia",
},
[164463] = {
true,
false,
"deepskyblue",
},
[83894] = {
true,
false,
"mediumpurple",
},
[98280] = {
true,
false,
"deepskyblue",
},
[150142] = {
true,
false,
"deepskyblue",
},
[212673] = {
true,
false,
"fuchsia",
},
[172265] = {
true,
false,
"deepskyblue",
},
[227635] = {
true,
false,
"deepskyblue",
},
[217533] = {
true,
false,
"fuchsia",
},
[150143] = {
true,
false,
"blue",
},
[177892] = {
true,
false,
"blue",
},
[220986] = {
true,
false,
"fuchsia",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"deepskyblue",
},
[131858] = {
true,
false,
"mediumpurple",
},
[168942] = {
true,
false,
"blue",
},
[45912] = {
true,
false,
"deepskyblue",
},
[207177] = {
true,
false,
"mediumpurple",
},
[127757] = {
true,
false,
"mediumpurple",
},
[208456] = {
true,
false,
"blue",
},
[220988] = {
true,
false,
"fuchsia",
},
[190426] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"blue",
},
[162038] = {
true,
false,
"mediumpurple",
},
[98538] = {
true,
false,
"fuchsia",
},
[150146] = {
true,
false,
"fuchsia",
},
[137103] = {
true,
false,
"fuchsia",
},
[101991] = {
true,
false,
"blue",
},
[162039] = {
true,
false,
"deepskyblue",
},
[97068] = {
true,
false,
"mediumpurple",
},
[75713] = {
true,
false,
"deepskyblue",
},
[180070] = {
true,
false,
"fuchsia",
},
[198868] = {
true,
false,
"deepskyblue",
},
[195927] = {
true,
false,
"mediumpurple",
},
[170480] = {
true,
false,
"mediumpurple",
},
[208459] = {
true,
false,
"deepskyblue",
},
[52019] = {
true,
false,
"fuchsia",
},
[83578] = {
true,
false,
"mediumpurple",
},
[198869] = {
true,
false,
"deepskyblue",
},
[171376] = {
true,
false,
"blue",
},
[190174] = {
true,
false,
"fuchsia",
},
[203857] = {
true,
false,
"deepskyblue",
},
[227514] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"mediumpurple",
},
[221760] = {
true,
false,
"blue",
},
[223423] = {
true,
false,
"mediumpurple",
},
[118489] = {
true,
false,
"fuchsia",
},
[170483] = {
true,
false,
"fuchsia",
},
[39392] = {
true,
false,
"mediumpurple",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"deepskyblue",
},
[168310] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"blue",
},
[114334] = {
true,
false,
"mediumpurple",
},
[208208] = {
true,
false,
"mediumpurple",
},
[75652] = {
true,
false,
"fuchsia",
},
[197595] = {
true,
false,
"mediumpurple",
},
[203861] = {
true,
false,
"mediumpurple",
},
[155908] = {
true,
false,
"fuchsia",
},
[179821] = {
true,
false,
"fuchsia",
},
[83389] = {
true,
false,
"mediumpurple",
},
[157571] = {
true,
false,
"deepskyblue",
},
[173044] = {
true,
false,
"deepskyblue",
},
[154758] = {
true,
false,
"fuchsia",
},
[193760] = {
true,
false,
"mediumpurple",
},
[118491] = {
true,
false,
"deepskyblue",
},
[115486] = {
true,
false,
"mediumpurple",
},
[220742] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"deepskyblue",
},
[157572] = {
true,
false,
"deepskyblue",
},
[164861] = {
true,
false,
"blue",
},
[114783] = {
true,
false,
"deepskyblue",
},
[105704] = {
true,
false,
"blue",
},
[166396] = {
true,
false,
"blue",
},
[215756] = {
true,
false,
"fuchsia",
},
[187240] = {
true,
false,
"mediumpurple",
},
[129553] = {
true,
false,
"fuchsia",
},
[174197] = {
true,
false,
"deepskyblue",
},
[202969] = {
true,
false,
"fuchsia",
},
[214350] = {
true,
false,
"deepskyblue",
},
[168443] = {
true,
false,
"blue",
},
[77700] = {
true,
false,
"deepskyblue",
},
[84989] = {
true,
false,
"deepskyblue",
},
[184300] = {
true,
false,
"mediumpurple",
},
[180336] = {
true,
false,
"deepskyblue",
},
[170490] = {
true,
false,
"deepskyblue",
},
[168572] = {
true,
false,
"blue",
},
[175861] = {
true,
false,
"fuchsia",
},
[184301] = {
true,
false,
"deepskyblue",
},
[202971] = {
true,
false,
"deepskyblue",
},
[225605] = {
true,
false,
"deepskyblue",
},
[115488] = {
true,
false,
"blue",
},
[163458] = {
true,
false,
"deepskyblue",
},
[164737] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"deepskyblue",
},
[122969] = {
true,
false,
"deepskyblue",
},
[40577] = {
true,
false,
"mediumpurple",
},
[168318] = {
true,
false,
"mediumpurple",
},
[150160] = {
true,
false,
"mediumpurple",
},
[178165] = {
true,
false,
"fuchsia",
},
[225479] = {
true,
false,
"blue",
},
[104300] = {
true,
false,
"deepskyblue",
},
[175992] = {
true,
false,
"fuchsia",
},
[122970] = {
true,
false,
"fuchsia",
},
[131492] = {
true,
false,
"blue",
},
[203230] = {
true,
false,
"blue",
},
[86526] = {
true,
false,
"blue",
},
[135329] = {
true,
false,
"fuchsia",
},
[81603] = {
true,
false,
"mediumpurple",
},
[166275] = {
true,
false,
"deepskyblue",
},
[196198] = {
true,
false,
"blue",
},
[174843] = {
true,
false,
"mediumpurple",
},
[198500] = {
true,
false,
"deepskyblue",
},
[122971] = {
true,
false,
"mediumpurple",
},
[166276] = {
true,
false,
"mediumpurple",
},
[168578] = {
true,
false,
"deepskyblue",
},
[150292] = {
true,
false,
"blue",
},
[218961] = {
true,
false,
"fuchsia",
},
[45917] = {
true,
false,
"mediumpurple",
},
[220368] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"fuchsia",
},
[150165] = {
true,
false,
"deepskyblue",
},
[186226] = {
true,
false,
"fuchsia",
},
[122972] = {
true,
false,
"deepskyblue",
},
[207198] = {
true,
false,
"deepskyblue",
},
[92538] = {
true,
false,
"fuchsia",
},
[170882] = {
true,
false,
"blue",
},
[178171] = {
true,
false,
"fuchsia",
},
[180473] = {
true,
false,
"blue",
},
[211291] = {
true,
false,
"mediumpurple",
},
[196202] = {
true,
false,
"blue",
},
[212826] = {
true,
false,
"mediumpurple",
},
[164873] = {
true,
false,
"fuchsia",
},
[122973] = {
true,
false,
"blue",
},
[75979] = {
true,
false,
"fuchsia",
},
[183671] = {
true,
false,
"fuchsia",
},
[150168] = {
true,
false,
"fuchsia",
},
[212827] = {
true,
false,
"fuchsia",
},
[129559] = {
true,
false,
"fuchsia",
},
[186741] = {
true,
false,
"deepskyblue",
},
[150169] = {
true,
false,
"mediumpurple",
},
[183033] = {
true,
false,
"mediumpurple",
},
[180348] = {
true,
false,
"blue",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"deepskyblue",
},
[182778] = {
true,
false,
"fuchsia",
},
[163086] = {
true,
false,
"blue",
},
[91006] = {
true,
false,
"deepskyblue",
},
[173189] = {
true,
false,
"deepskyblue",
},
[205158] = {
true,
false,
"fuchsia",
},
[129369] = {
true,
false,
"fuchsia",
},
[97720] = {
true,
false,
"fuchsia",
},
[212831] = {
true,
false,
"mediumpurple",
},
[195696] = {
true,
false,
"fuchsia",
},
[213343] = {
true,
false,
"mediumpurple",
},
[222167] = {
true,
false,
"deepskyblue",
},
[153882] = {
true,
false,
"deepskyblue",
},
[187897] = {
true,
false,
"fuchsia",
},
[179841] = {
true,
false,
"deepskyblue",
},
[151325] = {
true,
false,
"fuchsia",
},
[189816] = {
true,
false,
"deepskyblue",
},
[188026] = {
true,
false,
"fuchsia",
},
[168717] = {
true,
false,
"deepskyblue",
},
[144293] = {
true,
false,
"mediumpurple",
},
[183423] = {
true,
false,
"deepskyblue",
},
[165137] = {
true,
false,
"mediumpurple",
},
[187771] = {
true,
false,
"blue",
},
[168718] = {
true,
false,
"blue",
},
[206697] = {
true,
false,
"deepskyblue",
},
[184319] = {
true,
false,
"blue",
},
[165010] = {
true,
false,
"mediumpurple",
},
[200943] = {
true,
false,
"mediumpurple",
},
[191225] = {
true,
false,
"mediumpurple",
},
[206698] = {
true,
false,
"blue",
},
[183425] = {
true,
false,
"blue",
},
[154014] = {
true,
false,
"deepskyblue",
},
[212453] = {
true,
false,
"deepskyblue",
},
[40166] = {
true,
false,
"mediumpurple",
},
[144296] = {
true,
false,
"mediumpurple",
},
[205804] = {
true,
false,
"mediumpurple",
},
[179334] = {
true,
false,
"fuchsia",
},
[176521] = {
true,
false,
"blue",
},
[163862] = {
true,
false,
"blue",
},
[190588] = {
true,
false,
"mediumpurple",
},
[191739] = {
true,
false,
"mediumpurple",
},
[168594] = {
true,
false,
"mediumpurple",
},
[144298] = {
true,
false,
"blue",
},
[176523] = {
true,
false,
"mediumpurple",
},
[224732] = {
true,
false,
"deepskyblue",
},
[190206] = {
true,
false,
"blue",
},
[180104] = {
true,
false,
"deepskyblue",
},
[224221] = {
true,
false,
"mediumpurple",
},
[114796] = {
true,
false,
"blue",
},
[196856] = {
true,
false,
"mediumpurple",
},
[96574] = {
true,
false,
"mediumpurple",
},
[210539] = {
true,
false,
"mediumpurple",
},
[191230] = {
true,
false,
"fuchsia",
},
[188673] = {
true,
false,
"mediumpurple",
},
[104247] = {
true,
false,
"deepskyblue",
},
[130909] = {
true,
false,
"fuchsia",
},
[85194] = {
true,
false,
"fuchsia",
},
[154020] = {
true,
false,
"deepskyblue",
},
[165529] = {
true,
false,
"blue",
},
[191232] = {
true,
false,
"blue",
},
[98813] = {
true,
false,
"deepskyblue",
},
[165913] = {
true,
false,
"fuchsia",
},
[45922] = {
true,
false,
"deepskyblue",
},
[192767] = {
true,
false,
"mediumpurple",
},
[216364] = {
true,
false,
"fuchsia",
},
[221667] = {
true,
false,
"deepskyblue",
},
[179852] = {
true,
false,
"blue",
},
[214762] = {
true,
false,
"fuchsia",
},
[186246] = {
true,
false,
"deepskyblue",
},
[115757] = {
true,
false,
"mediumpurple",
},
[155812] = {
true,
false,
"blue",
},
[80816] = {
true,
false,
"deepskyblue",
},
[224609] = {
true,
false,
"fuchsia",
},
[211121] = {
true,
false,
"mediumpurple",
},
[220730] = {
true,
false,
"mediumpurple",
},
[186208] = {
true,
false,
"mediumpurple",
},
[168153] = {
true,
false,
"fuchsia",
},
[217039] = {
true,
false,
"mediumpurple",
},
[190403] = {
true,
false,
"mediumpurple",
},
[205623] = {
true,
false,
"mediumpurple",
},
[166299] = {
true,
false,
"blue",
},
[150250] = {
true,
false,
"deepskyblue",
},
[56792] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"deepskyblue",
},
[190340] = {
true,
false,
"blue",
},
[198870] = {
true,
false,
"blue",
},
[204918] = {
true,
false,
"blue",
},
[220974] = {
true,
false,
"fuchsia",
},
[183497] = {
true,
false,
"blue",
},
[213954] = {
true,
false,
"mediumpurple",
},
[223844] = {
true,
false,
"deepskyblue",
},
[171799] = {
true,
false,
"fuchsia",
},
[95842] = {
true,
false,
"deepskyblue",
},
[167963] = {
true,
false,
"blue",
},
[214608] = {
true,
false,
"deepskyblue",
},
[180495] = {
true,
false,
"fuchsia",
},
[166301] = {
true,
false,
"fuchsia",
},
[84990] = {
true,
false,
"blue",
},
[114544] = {
true,
false,
"fuchsia",
},
[205363] = {
true,
false,
"deepskyblue",
},
[190342] = {
true,
false,
"fuchsia",
},
[167964] = {
true,
false,
"fuchsia",
},
[122984] = {
true,
false,
"fuchsia",
},
[41096] = {
true,
false,
"blue",
},
[166302] = {
true,
false,
"deepskyblue",
},
[163459] = {
true,
false,
"blue",
},
[221863] = {
true,
false,
"deepskyblue",
},
[191206] = {
true,
false,
"deepskyblue",
},
[168156] = {
true,
false,
"fuchsia",
},
[165919] = {
true,
false,
"mediumpurple",
},
[164506] = {
true,
false,
"blue",
},
[195842] = {
true,
false,
"blue",
},
[205618] = {
true,
false,
"mediumpurple",
},
[104251] = {
true,
false,
"fuchsia",
},
[169861] = {
true,
false,
"blue",
},
[163618] = {
true,
false,
"blue",
},
[200137] = {
true,
false,
"deepskyblue",
},
[227300] = {
true,
false,
"mediumpurple",
},
[40634] = {
true,
false,
"deepskyblue",
},
[208438] = {
true,
false,
"mediumpurple",
},
[218324] = {
true,
false,
"fuchsia",
},
[208440] = {
true,
false,
"mediumpurple",
},
[198503] = {
true,
false,
"deepskyblue",
},
[186125] = {
true,
false,
"deepskyblue",
},
[213338] = {
true,
false,
"deepskyblue",
},
[184335] = {
true,
false,
"deepskyblue",
},
[191847] = {
true,
false,
"deepskyblue",
},
[206074] = {
true,
false,
"deepskyblue",
},
[114584] = {
true,
false,
"mediumpurple",
},
[165410] = {
true,
false,
"mediumpurple",
},
[205435] = {
true,
false,
"mediumpurple",
},
[163620] = {
true,
false,
"mediumpurple",
},
[205691] = {
true,
false,
"blue",
},
[220141] = {
true,
false,
"deepskyblue",
},
[229537] = {
true,
false,
"yellow",
},
[165471] = {
true,
false,
"blue",
},
[196576] = {
true,
false,
"blue",
},
[179733] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"mediumpurple",
},
[171805] = {
true,
false,
"blue",
},
[150297] = {
true,
false,
"deepskyblue",
},
[168992] = {
true,
false,
"deepskyblue",
},
[212403] = {
true,
false,
"blue",
},
[115020] = {
true,
false,
"mediumpurple",
},
[223774] = {
true,
false,
"blue",
},
[196102] = {
true,
false,
"deepskyblue",
},
[177816] = {
true,
false,
"deepskyblue",
},
[98243] = {
true,
false,
"mediumpurple",
},
[188302] = {
true,
false,
"yellow",
},
[83026] = {
true,
false,
"mediumpurple",
},
[114803] = {
true,
false,
"deepskyblue",
},
[197985] = {
true,
false,
"deepskyblue",
},
[186220] = {
true,
false,
"deepskyblue",
},
[81236] = {
true,
false,
"deepskyblue",
},
[177817] = {
true,
false,
"blue",
},
[187768] = {
true,
false,
"deepskyblue",
},
[144294] = {
true,
false,
"deepskyblue",
},
[131586] = {
true,
false,
"mediumpurple",
},
[82579] = {
true,
false,
"deepskyblue",
},
[44404] = {
true,
false,
"deepskyblue",
},
[164567] = {
true,
false,
"deepskyblue",
},
[165414] = {
true,
false,
"deepskyblue",
},
[223773] = {
true,
false,
"blue",
},
[193291] = {
true,
false,
"fuchsia",
},
[151476] = {
true,
false,
"mediumpurple",
},
[228540] = {
true,
false,
"deepskyblue",
},
[155824] = {
true,
false,
"blue",
},
[220401] = {
true,
false,
"fuchsia",
},
[175517] = {
true,
false,
"blue",
},
[162057] = {
true,
false,
"mediumpurple",
},
[187154] = {
true,
false,
"fuchsia",
},
[194315] = {
true,
false,
"mediumpurple",
},
[213806] = {
true,
false,
"deepskyblue",
},
[180429] = {
true,
false,
"mediumpurple",
},
[135365] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"deepskyblue",
},
[168658] = {
true,
false,
"fuchsia",
},
[115019] = {
true,
false,
"deepskyblue",
},
[129372] = {
true,
false,
"blue",
},
[187155] = {
true,
false,
"blue",
},
[210812] = {
true,
false,
"deepskyblue",
},
[163882] = {
true,
false,
"mediumpurple",
},
[180474] = {
true,
false,
"fuchsia",
},
[212412] = {
true,
false,
"fuchsia",
},
[224219] = {
true,
false,
"deepskyblue",
},
[201222] = {
true,
false,
"mediumpurple",
},
[173729] = {
true,
false,
"fuchsia",
},
[194317] = {
true,
false,
"mediumpurple",
},
[84499] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"mediumpurple",
},
[196203] = {
true,
false,
"deepskyblue",
},
[98275] = {
true,
false,
"blue",
},
[207199] = {
true,
false,
"blue",
},
[201223] = {
true,
false,
"blue",
},
[204206] = {
true,
false,
"blue",
},
[95779] = {
true,
false,
"mediumpurple",
},
[100527] = {
true,
false,
"deepskyblue",
},
[115765] = {
true,
false,
"fuchsia",
},
[200840] = {
true,
false,
"mediumpurple",
},
[171384] = {
true,
false,
"blue",
},
[194487] = {
true,
false,
"blue",
},
[156212] = {
true,
false,
"deepskyblue",
},
[174210] = {
true,
false,
"deepskyblue",
},
[40936] = {
true,
false,
"mediumpurple",
},
[178630] = {
true,
false,
"deepskyblue",
},
[135241] = {
true,
false,
"deepskyblue",
},
[214140] = {
true,
false,
"mediumpurple",
},
[212389] = {
true,
false,
"blue",
},
[216293] = {
true,
false,
"blue",
},
[177891] = {
true,
false,
"mediumpurple",
},
[133835] = {
true,
false,
"blue",
},
[222964] = {
true,
false,
"blue",
},
[213885] = {
true,
false,
"fuchsia",
},
[199124] = {
true,
false,
"deepskyblue",
},
[100485] = {
true,
false,
"mediumpurple",
},
[105715] = {
true,
false,
"blue",
},
[183707] = {
true,
false,
"deepskyblue",
},
[184331] = {
true,
false,
"mediumpurple",
},
[198502] = {
true,
false,
"deepskyblue",
},
[182045] = {
true,
false,
"fuchsia",
},
[81432] = {
true,
false,
"deepskyblue",
},
[208193] = {
true,
false,
"blue",
},
[155831] = {
true,
false,
"fuchsia",
},
[177808] = {
true,
false,
"mediumpurple",
},
[206214] = {
true,
false,
"mediumpurple",
},
[164510] = {
true,
false,
"fuchsia",
},
[187033] = {
true,
false,
"mediumpurple",
},
[168747] = {
true,
false,
"fuchsia",
},
[102404] = {
true,
false,
"mediumpurple",
},
[211262] = {
true,
false,
"fuchsia",
},
[100486] = {
true,
false,
"deepskyblue",
},
[192788] = {
true,
false,
"fuchsia",
},
[101637] = {
true,
false,
"mediumpurple",
},
[156157] = {
true,
false,
"blue",
},
[102788] = {
true,
false,
"blue",
},
[178141] = {
true,
false,
"blue",
},
[189464] = {
true,
false,
"blue",
},
[135245] = {
true,
false,
"mediumpurple",
},
[168109] = {
true,
false,
"deepskyblue",
},
[162099] = {
true,
false,
"fuchsia",
},
[165805] = {
true,
false,
"mediumpurple",
},
[129367] = {
true,
false,
"blue",
},
[83892] = {
true,
false,
"deepskyblue",
},
[221945] = {
true,
false,
"fuchsia",
},
[138187] = {
true,
false,
"fuchsia",
},
[157017] = {
true,
false,
"blue",
},
[197905] = {
true,
false,
"blue",
},
[87252] = {
true,
false,
"mediumpurple",
},
[96587] = {
true,
false,
"deepskyblue",
},
[131666] = {
true,
false,
"blue",
},
[167967] = {
true,
false,
"blue",
},
[212739] = {
true,
false,
"mediumpurple",
},
[227573] = {
true,
false,
"mediumpurple",
},
[189466] = {
true,
false,
"mediumpurple",
},
[45928] = {
true,
false,
"mediumpurple",
},
[192791] = {
true,
false,
"fuchsia",
},
[176551] = {
true,
false,
"deepskyblue",
},
[114804] = {
true,
false,
"blue",
},
[144071] = {
true,
false,
"deepskyblue",
},
[190207] = {
true,
false,
"deepskyblue",
},
[190362] = {
true,
false,
"blue",
},
[224249] = {
true,
false,
"fuchsia",
},
[98370] = {
true,
false,
"deepskyblue",
},
[135474] = {
true,
false,
"blue",
},
[59547] = {
true,
false,
"mediumpurple",
},
[196117] = {
true,
false,
"mediumpurple",
},
[196115] = {
true,
false,
"fuchsia",
},
[223994] = {
true,
false,
"deepskyblue",
},
[213892] = {
true,
false,
"deepskyblue",
},
[199037] = {
true,
false,
"deepskyblue",
},
[163126] = {
true,
false,
"deepskyblue",
},
[227575] = {
true,
false,
"blue",
},
[193944] = {
true,
false,
"blue",
},
[213893] = {
true,
false,
"deepskyblue",
},
[81819] = {
true,
false,
"blue",
},
[115642] = {
true,
false,
"blue",
},
[209801] = {
true,
false,
"mediumpurple",
},
[163894] = {
true,
false,
"blue",
},
[173190] = {
true,
false,
"deepskyblue",
},
[90998] = {
true,
false,
"blue",
},
[211263] = {
true,
false,
"fuchsia",
},
[101438] = {
true,
false,
"blue",
},
[188703] = {
true,
false,
"yellow",
},
[163128] = {
true,
false,
"deepskyblue",
},
[168882] = {
true,
false,
"fuchsia",
},
[189470] = {
true,
false,
"deepskyblue",
},
[171184] = {
true,
false,
"mediumpurple",
},
[152898] = {
true,
false,
"fuchsia",
},
[205384] = {
true,
false,
"deepskyblue",
},
[81820] = {
true,
false,
"deepskyblue",
},
[168627] = {
true,
false,
"deepskyblue",
},
[204560] = {
true,
false,
"yellow",
},
[94224] = {
true,
false,
"fuchsia",
},
[114542] = {
true,
false,
"blue",
},
[227578] = {
true,
false,
"deepskyblue",
},
[186658] = {
true,
false,
"deepskyblue",
},
[165763] = {
true,
false,
"deepskyblue",
},
[206351] = {
true,
false,
"deepskyblue",
},
[40167] = {
true,
false,
"blue",
},
[215755] = {
true,
false,
"fuchsia",
},
[223253] = {
true,
false,
"deepskyblue",
},
[194316] = {
true,
false,
"mediumpurple",
},
[216326] = {
true,
false,
"deepskyblue",
},
[115388] = {
true,
false,
"fuchsia",
},
[165556] = {
true,
false,
"fuchsia",
},
[197145] = {
true,
false,
"mediumpurple",
},
[218884] = {
true,
false,
"fuchsia",
},
[198424] = {
true,
false,
"blue",
},
[190368] = {
true,
false,
"fuchsia",
},
[199703] = {
true,
false,
"fuchsia",
},
[167607] = {
true,
false,
"mediumpurple",
},
[197146] = {
true,
false,
"mediumpurple",
},
[153285] = {
false,
false,
"yellow",
},
[156226] = {
true,
false,
"deepskyblue",
},
[188067] = {
true,
false,
"deepskyblue",
},
[167965] = {
true,
false,
"blue",
},
[168886] = {
true,
false,
"deepskyblue",
},
[80936] = {
true,
false,
"blue",
},
[45930] = {
true,
false,
"fuchsia",
},
[216328] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"mediumpurple",
},
[59873] = {
true,
false,
"mediumpurple",
},
[40943] = {
true,
false,
"deepskyblue",
},
[131821] = {
true,
false,
"blue",
},
[190370] = {
true,
false,
"mediumpurple",
},
[166969] = {
true,
false,
"deepskyblue",
},
[116549] = {
true,
false,
"deepskyblue",
},
[192800] = {
true,
false,
"deepskyblue",
},
[163621] = {
true,
false,
"mediumpurple",
},
[184107] = {
true,
false,
"mediumpurple",
},
[197149] = {
true,
false,
"deepskyblue",
},
[155221] = {
true,
false,
"deepskyblue",
},
[169927] = {
true,
false,
"fuchsia",
},
[166970] = {
true,
false,
"blue",
},
[82590] = {
true,
false,
"blue",
},
[197406] = {
true,
false,
"fuchsia",
},
[163520] = {
true,
false,
"mediumpurple",
},
[131677] = {
true,
false,
"fuchsia",
},
[156244] = {
true,
false,
"mediumpurple",
},
[59553] = {
true,
false,
"mediumpurple",
},
[172981] = {
true,
false,
"mediumpurple",
},
[166971] = {
true,
false,
"fuchsia",
},
[128434] = {
true,
false,
"blue",
},
[152905] = {
true,
false,
"fuchsia",
},
[167113] = {
true,
false,
"blue",
},
[164414] = {
true,
false,
"deepskyblue",
},
[166589] = {
true,
false,
"fuchsia",
},
[180015] = {
true,
false,
"blue",
},
[190373] = {
true,
false,
"deepskyblue",
},
[164926] = {
true,
false,
"fuchsia",
},
[113537] = {
true,
false,
"mediumpurple",
},
[189235] = {
true,
false,
"mediumpurple",
},
[206230] = {
true,
false,
"fuchsia",
},
[84957] = {
true,
false,
"fuchsia",
},
[167612] = {
true,
false,
"blue",
},
[114624] = {
true,
false,
"mediumpurple",
},
[197535] = {
true,
false,
"fuchsia",
},
[179842] = {
true,
false,
"fuchsia",
},
[195928] = {
true,
false,
"mediumpurple",
},
[214287] = {
true,
false,
"yellow",
},
[198047] = {
true,
false,
"blue",
},
[205152] = {
true,
false,
"mediumpurple",
},
[82597] = {
true,
false,
"fuchsia",
},
[203812] = {
true,
false,
"fuchsia",
},
[180864] = {
true,
false,
"fuchsia",
},
[177716] = {
true,
false,
"deepskyblue",
},
[86684] = {
true,
false,
"deepskyblue",
},
[76518] = {
true,
false,
"fuchsia",
},
[176565] = {
true,
false,
"deepskyblue",
},
[205337] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"blue",
},
[101326] = {
true,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[167998] = {
true,
false,
"mediumpurple",
},
[155830] = {
true,
false,
"deepskyblue",
},
[81984] = {
true,
false,
"mediumpurple",
},
[192934] = {
true,
false,
"blue",
},
[180335] = {
true,
false,
"deepskyblue",
},
[214673] = {
true,
false,
"blue",
},
[114626] = {
true,
false,
"fuchsia",
},
[190377] = {
true,
false,
"blue",
},
[224271] = {
true,
false,
"deepskyblue",
},
[213913] = {
true,
false,
"deepskyblue",
},
[195876] = {
true,
false,
"deepskyblue",
},
[84767] = {
true,
false,
"fuchsia",
},
[114629] = {
true,
false,
"blue",
},
[163524] = {
true,
false,
"fuchsia",
},
[189227] = {
true,
false,
"fuchsia",
},
[168384] = {
true,
false,
"blue",
},
[210966] = {
true,
false,
"blue",
},
[98706] = {
true,
false,
"mediumpurple",
},
[195877] = {
true,
false,
"fuchsia",
},
[214419] = {
true,
false,
"mediumpurple",
},
[176573] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"blue",
},
[75459] = {
true,
false,
"deepskyblue",
},
[216338] = {
true,
false,
"mediumpurple",
},
[101008] = {
true,
false,
"fuchsia",
},
[102095] = {
true,
false,
"blue",
},
[190688] = {
true,
false,
"mediumpurple",
},
[131685] = {
true,
false,
"deepskyblue",
},
[102287] = {
true,
false,
"mediumpurple",
},
[114627] = {
true,
false,
"blue",
},
[126919] = {
true,
false,
"deepskyblue",
},
[170690] = {
true,
false,
"blue",
},
[186229] = {
true,
false,
"mediumpurple",
},
[216339] = {
true,
false,
"blue",
},
[214421] = {
true,
false,
"blue",
},
[196263] = {
true,
false,
"deepskyblue",
},
[220815] = {
true,
false,
"blue",
},
[180091] = {
true,
false,
"mediumpurple",
},
[190381] = {
true,
false,
"fuchsia",
},
[115395] = {
true,
false,
"mediumpurple",
},
[197671] = {
true,
false,
"blue",
},
[216340] = {
true,
false,
"fuchsia",
},
[167876] = {
true,
false,
"fuchsia",
},
[104270] = {
true,
false,
"mediumpurple",
},
[80805] = {
true,
false,
"mediumpurple",
},
[130400] = {
true,
false,
"mediumpurple",
},
[205727] = {
true,
false,
"blue",
},
[199717] = {
true,
false,
"mediumpurple",
},
[197799] = {
true,
false,
"deepskyblue",
},
[157634] = {
true,
false,
"blue",
},
[59552] = {
true,
false,
"blue",
},
[45704] = {
true,
false,
"dimgray",
},
[198311] = {
true,
false,
"mediumpurple",
},
[129552] = {
true,
false,
"mediumpurple",
},
[198308] = {
true,
false,
"mediumpurple",
},
[162047] = {
true,
false,
"mediumpurple",
},
[165762] = {
true,
false,
"fuchsia",
},
[132126] = {
true,
false,
"blue",
},
[155090] = {
true,
false,
"deepskyblue",
},
[175550] = {
true,
false,
"fuchsia",
},
[205212] = {
true,
false,
"fuchsia",
},
[220946] = {
true,
false,
"mediumpurple",
},
[169924] = {
true,
false,
"mediumpurple",
},
[186420] = {
true,
false,
"deepskyblue",
},
[167111] = {
true,
false,
"deepskyblue",
},
[211228] = {
true,
false,
"blue",
},
[197219] = {
true,
false,
"mediumpurple",
},
[151127] = {
true,
false,
"fuchsia",
},
[99891] = {
true,
false,
"mediumpurple",
},
[189234] = {
true,
false,
"fuchsia",
},
[129527] = {
true,
false,
"blue",
},
[168007] = {
true,
false,
"blue",
},
[179388] = {
true,
false,
"deepskyblue",
},
[101075] = {
true,
false,
"fuchsia",
},
[176575] = {
true,
false,
"deepskyblue",
},
[91000] = {
true,
false,
"mediumpurple",
},
[131819] = {
true,
false,
"deepskyblue",
},
[176959] = {
true,
false,
"deepskyblue",
},
[80935] = {
true,
false,
"deepskyblue",
},
[199325] = {
true,
false,
"deepskyblue",
},
[169159] = {
true,
false,
"gold",
},
[131436] = {
true,
false,
"mediumpurple",
},
[194990] = {
true,
false,
"deepskyblue",
},
[137830] = {
true,
false,
"blue",
},
[96664] = {
true,
false,
"blue",
},
[212765] = {
true,
false,
"mediumpurple",
},
[95769] = {
true,
false,
"deepskyblue",
},
[41139] = {
true,
false,
"blue",
},
[185528] = {
true,
false,
"deepskyblue",
},
[185656] = {
true,
false,
"deepskyblue",
},
[76104] = {
true,
false,
"blue",
},
[156245] = {
true,
false,
"mediumpurple",
},
[164557] = {
true,
false,
"mediumpurple",
},
[162040] = {
true,
false,
"fuchsia",
},
[199595] = {
true,
false,
"mediumpurple",
},
[227581] = {
true,
false,
"deepskyblue",
},
[185529] = {
true,
false,
"fuchsia",
},
[165197] = {
true,
false,
"fuchsia",
},
[40925] = {
true,
false,
"mediumpurple",
},
[164921] = {
true,
false,
"deepskyblue",
},
[192796] = {
true,
false,
"blue",
},
[200836] = {
true,
false,
"mediumpurple",
},
[129529] = {
true,
false,
"fuchsia",
},
[95834] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"deepskyblue",
},
[114266] = {
true,
false,
"deepskyblue",
},
[189878] = {
true,
false,
"yellow",
},
[83025] = {
true,
false,
"blue",
},
[92610] = {
true,
false,
"fuchsia",
},
[114632] = {
true,
false,
"deepskyblue",
},
[205735] = {
true,
false,
"blue",
},
[198702] = {
true,
false,
"mediumpurple",
},
[169905] = {
true,
false,
"blue",
},
[208165] = {
true,
false,
"deepskyblue",
},
[168396] = {
true,
false,
"mediumpurple",
},
[86372] = {
true,
false,
"mediumpurple",
},
[133870] = {
true,
false,
"deepskyblue",
},
[179010] = {
true,
false,
"deepskyblue",
},
[95771] = {
true,
false,
"blue",
},
[134284] = {
true,
false,
"deepskyblue",
},
[151773] = {
true,
false,
"blue",
},
[59546] = {
true,
false,
"blue",
},
[179847] = {
true,
false,
"fuchsia",
},
[98810] = {
true,
false,
"mediumpurple",
},
[189706] = {
true,
false,
"yellow",
},
[114633] = {
true,
false,
"mediumpurple",
},
[80938] = {
true,
false,
"mediumpurple",
},
[88163] = {
true,
false,
"fuchsia",
},
[198263] = {
true,
false,
"mediumpurple",
},
[98521] = {
true,
false,
"fuchsia",
},
[115640] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"blue",
},
[164562] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"blue",
},
[198577] = {
true,
false,
"blue",
},
[211290] = {
true,
false,
"mediumpurple",
},
[163121] = {
true,
false,
"blue",
},
[162133] = {
true,
false,
"fuchsia",
},
[199549] = {
true,
false,
"fuchsia",
},
[208244] = {
true,
false,
"deepskyblue",
},
[164563] = {
true,
false,
"blue",
},
[221979] = {
true,
false,
"fuchsia",
},
[198501] = {
true,
false,
"deepskyblue",
},
[179269] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"deepskyblue",
},
[171341] = {
true,
false,
"deepskyblue",
},
[59555] = {
true,
false,
"fuchsia",
},
[223770] = {
true,
false,
"blue",
},
[214012] = {
true,
false,
"mediumpurple",
},
[197698] = {
true,
false,
"fuchsia",
},
[84520] = {
true,
false,
"mediumpurple",
},
[208698] = {
true,
false,
"fuchsia",
},
[165076] = {
true,
false,
"blue",
},
[180323] = {
true,
false,
"fuchsia",
},
[129788] = {
true,
false,
"deepskyblue",
},
[214761] = {
true,
false,
"mediumpurple",
},
[211816] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"blue",
},
[133685] = {
true,
false,
"fuchsia",
},
[83390] = {
true,
false,
"deepskyblue",
},
[185537] = {
true,
false,
"blue",
},
[171343] = {
true,
false,
"fuchsia",
},
[199547] = {
true,
false,
"fuchsia",
},
[223772] = {
true,
false,
"blue",
},
[191164] = {
true,
false,
"fuchsia",
},
[184131] = {
true,
false,
"fuchsia",
},
[190690] = {
true,
false,
"mediumpurple",
},
[198709] = {
true,
false,
"mediumpurple",
},
[114316] = {
true,
false,
"deepskyblue",
},
[75506] = {
true,
false,
"deepskyblue",
},
[102232] = {
true,
false,
"blue",
},
[104278] = {
true,
false,
"fuchsia",
},
[198326] = {
true,
false,
"mediumpurple",
},
[184132] = {
true,
false,
"blue",
},
[45919] = {
true,
false,
"mediumpurple",
},
[190686] = {
true,
false,
"blue",
},
[195930] = {
true,
false,
"mediumpurple",
},
[130404] = {
true,
false,
"mediumpurple",
},
[227513] = {
true,
false,
"deepskyblue",
},
[187969] = {
true,
false,
"blue",
},
[65317] = {
true,
false,
"mediumpurple",
},
[45915] = {
true,
false,
"mediumpurple",
},
[206064] = {
true,
false,
"blue",
},
[129374] = {
true,
false,
"mediumpurple",
},
[114317] = {
true,
false,
"deepskyblue",
},
[189555] = {
true,
false,
"deepskyblue",
},
[184580] = {
true,
false,
"deepskyblue",
},
[223775] = {
true,
false,
"blue",
},
[164702] = {
true,
false,
"fuchsia",
},
[98368] = {
true,
false,
"mediumpurple",
},
[199368] = {
true,
false,
"fuchsia",
},
[220195] = {
true,
false,
"deepskyblue",
},
[183495] = {
true,
false,
"mediumpurple",
},
[127111] = {
true,
false,
"blue",
},
[214441] = {
true,
false,
"fuchsia",
},
[223776] = {
true,
false,
"blue",
},
[214697] = {
true,
false,
"fuchsia",
},
[176974] = {
true,
false,
"fuchsia",
},
[81212] = {
true,
false,
"mediumpurple",
},
[220196] = {
true,
false,
"fuchsia",
},
[220978] = {
true,
false,
"fuchsia",
},
[175576] = {
true,
false,
"fuchsia",
},
[40357] = {
true,
false,
"fuchsia",
},
[223777] = {
true,
false,
"blue",
},
[129370] = {
true,
false,
"deepskyblue",
},
[205619] = {
true,
false,
"mediumpurple",
},
[219046] = {
true,
false,
"deepskyblue",
},
[220197] = {
true,
false,
"mediumpurple",
},
[127106] = {
true,
false,
"fuchsia",
},
[98081] = {
true,
false,
"fuchsia",
},
[165483] = {
true,
false,
"fuchsia",
},
[210269] = {
true,
false,
"mediumpurple",
},
[185032] = {
true,
false,
"mediumpurple",
},
[205620] = {
true,
false,
"mediumpurple",
},
[213932] = {
true,
false,
"mediumpurple",
},
[129600] = {
true,
false,
"deepskyblue",
},
[114319] = {
true,
false,
"blue",
},
[115406] = {
true,
false,
"deepskyblue",
},
[164707] = {
true,
false,
"mediumpurple",
},
[195135] = {
true,
false,
"fuchsia",
},
[150251] = {
true,
false,
"blue",
},
[164461] = {
true,
false,
"blue",
},
},
["extra_icon_show_enrage_border"] = {
0.85098039215686,
0,
0.074509803921569,
},
["auto_inside_raid_dungeon"] = {
["hide_enemy_player_pets"] = true,
["hide_enemy_player_totems"] = true,
},
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        --Priest\n        [\"Vampiric Touch\"] = 21,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 25,\n        \n        --Rogue\n        [\"Deathstalker's Mark\"] = 102,\n        [\"Marked for Death\"] = 101,\n        [\"Ghostly Strike\"] = 100,\n        [\"Vendetta\"] = 98,\n        [\"Shiv\"] = 97,\n        [\"Flagellation\"] = 96,\n        [\"Garrote\"] = 95,\n        [\"Rupture\"] = 94,\n        [\"Caustic Spatter\"] = 92,\n        [\"Find Weakness\"] = 93,\n        [\"Crimson Tempest\"] = 85,\n        [\"Between the Eyes\"] = 83,\n        [\"Pistol Shot\"] = 82,\n        -- [\"Se\"] =\n        [\"Serrated Bone Spike\"] = 0,\n        \n        --Druid\n        [\"Sunfire\"] = 100,\n        [\"Moonfire\"] = 99,\n        \n        --Monk\n        [\"Mark of the Crane\"] = 59,\n        \n        --Dungeon Debuffs\n        [\"Droman's Wrath\"] = 1001,\n        \n        --Dungeon Buffs\n        [\"Bolstering\"] = 2001,\n        [\"Slime Coated\"] = 2002,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1726954906,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 580,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder - Jundies",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Double Arrows\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_double_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 17,\n        height = 13,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color = \"white\",\n    }    \n    \nend\n\n\n",
},
["Time"] = 1726954889,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Url"] = "https://wago.io/f5itAXjQq/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_double_right_64",
["Enabled"] = true,
["Revision"] = 207,
["Options"] = {
},
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Adds double arrow as a target indicators option",
["Prio"] = 99,
["Name"] = "Double Arrow Target",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
["SPglowfreq"] = 0.59999990463257,
["SPglowxoff"] = 0.5,
["doNotPurge"] = {
},
["SPglowyoff"] = 0.5,
["SPglowcolor"] = {
1,
1,
0.45490199327469,
1,
},
["SPglowparticle"] = 5,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    local options1 = {\n        glowType = \"button\",\n        frequency = modTable.config.SPglowfreq\n    }\n    \n    local options2 = {\n        glowType = \"pixel\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        length = modTable.config.SPpixellength,\n        th = modTable.config.SPpixelth,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff,\n        border = modTable.config.SPpixelborder\n    }\n    \n    local options3 = {\n        glowType = \"ants\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        scale = modTable.config.SPantsscale,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff\n    }\n    \n    modTable.options =\n    (modTable.config.SPglownum == 1 and options1) or (modTable.config.SPglownum == 2 and options2) or\n    (modTable.config.SPglownum == 3 and options3)\n    \n    local doNotPurgeList = {\n        [385063] = true, -- Burning Ambition, Ruby Life Pools\n        [392454] = true, -- Burning Veins, Ruby Life Pools\n        [396020] = true, -- Golden Barrier, Temple of the Jade Serpent\n        [383161] = true -- Decay Infusion, Brackenhide Hollow\n    }\n    \n    for _, id in pairs(modTable.config.doNotPurge) do\n        doNotPurgeList[tonumber(id)] = true\n    end\n    \n    modTable.doNotPurge = function(id)\n        return doNotPurgeList[id] ~= nil\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitFrame.healthBar:IsShown() then\n        return\n    end\n    \n    local buffSpecialGlow = true\n    local color = modTable.config.SPglowcolor\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers[2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers[containerID]\n        \n        for _, auraIcon in ipairs(auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge and not modTable.doNotPurge(auraIcon.SpellId)) then\n                Plater.StartGlow(auraIcon, nil, modTable.options)\n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs(unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon.canStealOrPurge and not modTable.doNotPurge(auraIcon.SpellId)) then\n                    Plater.StartGlow(auraIcon, nil, modTable.options)\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end\n            end\n        end\n    end\nend",
},
["Time"] = 1726352819,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 132096,
["Enabled"] = true,
["Revision"] = 1059,
["semver"] = "",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Steal/Purge Aura Glow",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Common Options",
["Name"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "1(Button) / 2(Pixel) / 3(Ants) ",
["Min"] = 1,
["Key"] = "SPglownum",
["Value"] = 2,
["Name"] = "Glow Type",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Set to negative to inverse direction of rotation",
["Min"] = -2,
["Key"] = "SPglowfreq",
["Value"] = 0.5,
["Name"] = "Glow Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "SPglowcolor",
["Value"] = {
1,
1,
0.45490196078431,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set glow color",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel & Ants Glow",
["Name"] = "Options for Pixel & Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Set number of lines",
["Min"] = 1,
["Key"] = "SPglowparticle",
["Value"] = 6,
["Name"] = "Number of Particles",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowxoff",
["Value"] = 1.2,
["Name"] = "X-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowyoff",
["Value"] = 1.2,
["Name"] = "Y-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel Glow",
["Name"] = "Options for Pixel Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "SPpixelborder",
["Value"] = false,
["Name"] = "Pixel Add Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable to true to create border under lines",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set pixel line length",
["Min"] = 0.01,
["Key"] = "SPpixellength",
["Value"] = 6,
["Name"] = "Pixel Line Length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Set pixel line thickness",
["Min"] = 0.01,
["Key"] = "SPpixelth",
["Value"] = 2,
["Name"] = "Pixel Line Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Ants Glow",
["Name"] = "Options for Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Set ants glow scale",
["Min"] = 0.01,
["Key"] = "SPantsscale",
["Value"] = 0.8,
["Name"] = "Ants Glow Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "doNotPurge",
["Value"] = {
},
["Name"] = "Do Not Purge",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "List of spells you may not want to purge for whichever reason",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit is a player, ignore\n        if (UnitPlayerControlled(unitFrame.unit)) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1726956793,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 118,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color NPC",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["UID"] = "0x62f9521d664ad",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    if not Plater.AddPerformanceUnits then\n        return\n    end\n    \n    local units = {\n        \n        -- Raids\n        [189706] = true, -- Chaotic Essence\n        [189707] = true, -- Chaotic mote\n        [176920] = true, -- Domination Arrow -- Sylv\n        [196679] = true, -- Frozen Shroud -- Broodkeeper\n        [194999] = true, -- Volatile Spark -- Raszageth\n        [191714] = true, -- Seeking Stormling -- Raszageth\n        [210231] = true, -- Tainted Lasher -- Gnarlroot\n        [211306] = true, -- Fiery vines -- Tindral\n        [219746] = true, --Tomb - Ansurek\n        \n        -- Dungeons\n        [196642] = true, -- Hungry Lasher (Boss add)\n        [197398] = true, -- Hungry Lasher\n        [208994] = true, -- Infected Lasher\n        [189363] = true, -- Infected Lasher\n        [96247] = true, -- Vileshard Crawler\n        [100529] = true, -- Hatespawn Slime\n        [84401] = true, -- Swift Sproutling (boss add)\n        \n        --Testing\n        [198594] = false, -- Testing target dummy\n        [87329] = false, -- testing\n    }\n    \n    for unit, flag in pairs(units) do\n        if flag and modTable.config.performance then\n            Plater.AddPerformanceUnits(unit)\n        else\n            Plater.RemovePerformanceUnits(unit)\n        end\n        if flag and modTable.config.forceBlizz then\n            Plater.AddForceBlizzardNameplateUnits(unit)\n        else\n            Plater.RemoveForceBlizzardNameplateUnits(unit)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1727053490,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
["HEALER"] = true,
["DAMAGER"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 458228,
["Enabled"] = true,
["Revision"] = 383,
["semver"] = "",
["Author"] = "Viashi-Argent Dawn",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "performance",
["Value"] = true,
["Name"] = "Performance",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "forceBlizz",
["Value"] = false,
["Name"] = "Force Blizzard",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["Name"] = "Performance Units - Jundies",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local vt = Plater.NameplateHasAura(unitFrame, \"Vampiric Touch\")\n    \n    if vt then\n        Plater.SetNameplateColor(unitFrame)\n    else\n        Plater.SetNameplateColor(unitFrame, \"#7FFFD4\")\n        \n        return\n    end\nend",
},
["Time"] = 1727078598,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["PRIEST"] = true,
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["DAMAGER"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Enabled"] = false,
["Revision"] = 103,
["semver"] = "",
["Author"] = "Эллинойз-Ревущий фьорд",
["Desc"] = "Changing Colors on doted targets",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "ShadowDotsColors [Old]",
["LastHookEdited"] = "Nameplate Updated",
["Options"] = {
},
},
{
["OptionsValues"] = {
["colour_names"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1727078539,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/vmszcNe2o/4",
["Icon"] = "INTERFACE\\ICONS\\Ability_Monk_Ascension",
["Enabled"] = true,
["Revision"] = 307,
["semver"] = "1.0.3",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "Aimed at making calls in dungeons simpler by using the last name of a mob or first name of certains ones i.e Jessie Howlis -> Jessie",
["Prio"] = 98,
["version"] = 4,
["PlaterCore"] = 1,
["Name"] = "Short Names",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "short_names",
["Value"] = true,
["Name"] = "Shorten Names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Key"] = "colour_names",
["Value"] = true,
["Name"] = "Colour by Raidmark",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateBorder (unitFrame, false)\nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    envTable.UpdateBorder (unitFrame, true)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    --self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = Plater.db.profile.castbar_icon_show --true\n    --anchor icon on what side\n    envTable.IconAnchor = \"left\" --accep 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    envTable.moveCastIcon = not Plater.db.profile.castbar_icon_customization_enabled --false\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = false\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        if not envTable.moveCastIcon then return end\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:ClearAllPoints()\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", 0, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", 0, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:ClearAllPoints()\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 0, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 0, 0)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\n    \n    function envTable.UpdateBorder (unitFrame, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        --casting = not casting == false or  ((castBar.casting or castBar.channeling) and not (castBar.interrupted or castBar.failed))\n        \n        if casting then\n            if envTable.ShowIcon and castBar.Icon:IsShown() then\n                if envTable.IconAnchor == \"left\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPLEFT\", castBar.Icon, \"TOPLEFT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMRIGHT\", castBar, \"BOTTOMRIGHT\", 0, 0)\n                elseif envTable.IconAnchor == \"right\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPRIGHT\", castBar.Icon, \"TOPRIGHT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMLEFT\", castBar, \"BOTTOMLEFT\", 0, 0) \n                end\n            else\n                if envTable.IconAnchor == \"left\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPLEFT\", healthBar, \"TOPLEFT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMRIGHT\", castBar, \"BOTTOMRIGHT\", 0, 0)\n                elseif envTable.IconAnchor == \"right\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPRIGHT\", healthBar, \"TOPRIGHT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMLEFT\", castBar, \"BOTTOMLEFT\", 0, 0) \n                end\n            end\n        else\n            if envTable.IconAnchor == \"left\" then\n                healthBar.border:ClearAllPoints()\n                PixelUtil.SetPoint(healthBar.border, \"TOPLEFT\", healthBar, \"TOPLEFT\", 0, 0)\n                PixelUtil.SetPoint(healthBar.border, \"BOTTOMRIGHT\", healthBar, \"BOTTOMRIGHT\", 0, 0)\n            elseif envTable.IconAnchor == \"right\" then\n                healthBar.border:ClearAllPoints()\n                PixelUtil.SetPoint(healthBar.border, \"TOPRIGHT\", healthBar, \"TOPRIGHT\", 0, 0)\n                PixelUtil.SetPoint(healthBar.border, \"BOTTOMLEFT\", healthBar, \"BOTTOMLEFT\", 0, 0) \n            end\n        end\n    end\n    \n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(unitFrame.castBar, \"Hide\", function() envTable.UpdateBorder(unitFrame, false) end)\n        unitFrame.castBar.borderChangeHooked = true\n    end\n    \nend",
},
["Time"] = 1726267217,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mEN8Q6zUa/12",
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["Enabled"] = true,
["Revision"] = 510,
["semver"] = "1.0.11",
["Author"] = "Viash-Thrall",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon + cast bar.",
["Prio"] = 99,
["version"] = 12,
["PlaterCore"] = 1,
["Name"] = "Cast Icon Anchor + Border",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.ttdTextFrame:SetText(\"\")\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateUnit(unitId, unitFrame.namePlateNpcId)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateUnit(unitId)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    -- Credit to Aethys for the algorithm: https://github.com/herotc/hero-lib\n    \n    --general settings:\n    envTable.onlyShowOnBoss = false\n    envTable.includeShields = true\n    \n    --custom health% for specific units:\n    envTable.customPercent = {\n        --Dawnbreaker \n        [213937] = 59.5, --Rasha'nan\n        --Darkflame Cleft\n        [210797] = 44.5, --The Darkness\n        -- City of Threads\n        [219984] = 50, -- Xeph'itik\n        ----- Shadowlands\n        -- Sanguine Depths\n        [162099] = 50, -- General Kaal\n        --- De Other Side\n        [166608] = 10, --Mueh'Zala\n        --- Mists of Tirna Scithe\n        [164929] = 20, -- Tirnenn Villager\n        [164804] = 20, -- Droman Oulfarran\n        ----- Draenor\n        --- Shadowmoon Burial Ground\n        [76057] = 20.5, -- Carrion Worm\n        ----- Legion\n        -- Halls of Valor\n        [95674] = 60, -- Fenryr P1\n        [95676] = 80, -- Odyn\n        [94960] = 10, -- Hymdall\n        -- Court of Stars\n        [104215] = 20, -- Patrol Captain Gerdo\n        ----- Mists of Pandaria\n        -- Temple of the Jade Serpent\n        [56732] = 30, -- Liu Flameheart,\n        ----- Dragonflight\n        -- Brackenhide Hollow\n        [186121] = 4, -- Decatriarch Wratheye\n        -- Uldaman\n        [184580] = 10, -- Olaf\n        [184581] = 10, -- Baelog\n        [184582] = 10, -- Eric \"The Swift\"\n        [184125] = 1, -- Chrono-Lord Deios,\n        -- Doti lower\n        [198933] = 90, -- Iridikron, technically 85 but you care only until 90\n        [207638] = 80, -- Blight of Galakrond\n        [201792] = 60, -- Ahnzon\n    }\n    \n    -- text settings:\n    local textColor = \"white\"\n    local textSize = 12\n    local textFont = \"2002\"\n    local textOutline = \"NONE\" --\"OUTLINE\"\n    --local textShadowColor = \"green\"\n    \n    -- positioning\n    local anchor = {\n        side = 3, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 2, --x offset\n        y = -3, --y offset\n    }\n    \n    -- TTD calculation config\n    envTable.config = {\n        historyCount = 100,\n        historyTime = 10,\n        duration = 600,\n        pctHP = 0,\n    }\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    --frames:\n    \n    --create the text frame that will show the TTD\n    if not unitFrame.healthBar.ttdTextFrame then\n        envTable.ttdTextFrame = Plater:CreateLabel(unitFrame.healthBar, \"\", textSize, textColor)\n        unitFrame.healthBar.ttdTextFrame = envTable.ttdTextFrame\n        envTable.ttdTextFrame:SetText(\"\")\n    end\n    \n    Plater.SetAnchor(unitFrame.healthBar.ttdTextFrame, anchor)\n    \n    if textFont then\n        DetailsFramework:SetFontFace(unitFrame.healthBar.ttdTextFrame, textFont)\n    end\n    if textSize then\n        DetailsFramework:SetFontSize(unitFrame.healthBar.ttdTextFrame, textSize)\n    end\n    if textOutline then\n        DetailsFramework:SetFontOutline(unitFrame.healthBar.ttdTextFrame, textOutline)\n    end\n    if textColor then\n        local r, g, b, a = DetailsFramework:ParseColors(textColor)\n        unitFrame.healthBar.ttdTextFrame:SetTextColor(r, g, b, a)\n    end\n    if textShadowColor then\n        local r, g, b, a = DetailsFramework:ParseColors(textShadowColor)\n        DetailsFramework:SetFontShadow(unitFrame.healthBar.ttdTextFrame, r, g, b, a, 1, -1)\n    end\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    --functions\n    \n    envTable.cache = {}\n    envTable.units = {}\n    \n    function envTable.TTDRefresh(unit)\n        local currentTime = GetTime()\n        local historyCount = envTable.config.historyCount\n        local historyTime = envTable.config.historyTime\n        \n        if not UnitExists(unit) then\n            return\n        end\n        \n        local GUID = UnitGUID(unit)\n        \n        if not GUID then\n            return\n        end\n        \n        local health = UnitHealth(unit)\n        local maxHealth = UnitHealthMax(unit)\n        local absorbsPercent = 0\n        \n        if UnitGetTotalAbsorbs and envTable.includeShields then\n            local absorbs = UnitGetTotalAbsorbs(unit)\n            health = health + absorbs\n            absorbsPercent = absorbs ~= -1 and maxHealth ~= -1 and absorbs / maxHealth * 100 or 0\n        end\n        \n        local healthPercentage = health ~= -1 and maxHealth ~= -1 and health / maxHealth * 100\n        -- Check if it's a valid unit\n        if UnitCanAttack(\"player\", unit) and healthPercentage < (100 + absorbsPercent) then\n            local unitTable = envTable.units[GUID]\n            -- Check if we have seen one time this unit, if we don't then initialize it.\n            if not unitTable or healthPercentage > unitTable[1][1][2] then\n                unitTable = { {}, currentTime }\n                envTable.units[GUID] = unitTable\n            end\n            \n            local values = unitTable[1]\n            local time = currentTime - unitTable[2]\n            -- Check if the % HP changed since the last check (or if there were none)\n            if #values == 0 or healthPercentage ~= values[1][2] then\n                local value\n                local lastIndex = #envTable.cache\n                -- Check if we can re-use a table from the cache -- Buds: i have doubt on the value of reusing table, with the high cost of tinsert on 1st index\n                if lastIndex == 0 then\n                    value = { time, healthPercentage }\n                else\n                    value = envTable.cache[lastIndex]\n                    envTable.cache[lastIndex] = nil\n                    value[1] = time\n                    value[2] = healthPercentage\n                end\n                table.insert(values, 1, value)\n                local n = #values\n                -- Delete values that are no longer valid\n                while (n > historyCount) or (time - values[n][1] > historyTime) do\n                    envTable.cache[#envTable.cache + 1] = values[n]\n                    values[n] = nil\n                    n = n - 1\n                end\n            end\n        end\n    end\n    \n    function envTable.TimeToX(guid, percentage, minSamples)\n        local seconds = 8888\n        local unitTable = envTable.units[guid]\n        -- Simple linear regression\n        -- ( E(x^2)  E(x) )  ( a )  ( E(xy) )\n        -- ( E(x)     n  )  ( b ) = ( E(y)  )\n        -- Format of the above: ( 2x2 Matrix ) * ( 2x1 Vector ) = ( 2x1 Vector )\n        -- Solve to find a and b, satisfying y = a + bx\n        -- Matrix arithmetic has been expanded and solved to make the following operation as fast as possible\n        if unitTable then\n            local values = unitTable[1]\n            local n = #values\n            if n > minSamples then\n                local a, b = 0, 0\n                local Ex2, Ex, Exy, Ey = 0, 0, 0, 0\n                \n                local value, x, y\n                for i = 1, n do\n                    value = values[i]\n                    x, y = value[1], value[2]\n                    \n                    Ex2 = Ex2 + x * x\n                    Ex = Ex + x\n                    Exy = Exy + x * y\n                    Ey = Ey + y\n                end\n                -- invariant to find matrix inverse\n                local invariant = 1 / (Ex2 * n - Ex * Ex)\n                -- Solve for a and b\n                a = (-Ex * Exy * invariant) + (Ex2 * Ey * invariant)\n                b = (n * Exy * invariant) - (Ex * Ey * invariant)\n                if b ~= 0 then\n                    -- Use best fit line to calculate estimated time to reach target health\n                    seconds = (percentage - a) / b\n                    -- Subtract current time to obtain \"time remaining\"\n                    seconds = math.min(7777, seconds - (GetTime() - unitTable[2]))\n                    if seconds < 0 then\n                        seconds = 9999\n                    end\n                end\n            end\n        end\n        \n        return seconds\n    end\n    \n    function envTable.updateUnit(unitId, npcId)\n        if UnitExists(unitId) and (not envTable.onlyShowOnBoss or UnitLevel(unitId) == -1) then\n            envTable.TTDRefresh(unitId)\n            local GUID = UnitGUID(unitId)\n            local customPercent = envTable.customPercent[npcId] or nil\n            envTable.TTD = envTable.TimeToX(GUID, customPercent or envTable.config.pctHP, 3)\n            if envTable.TTD < 7777 and envTable.TTD < envTable.config.duration then\n                envTable.show = true\n                envTable.updateText()\n            end\n        end\n    end\n    \n    function envTable.updateText()\n        ---@type string|number\n        local ret = \"\"\n        \n        local number = envTable.TTD\n        \n        if not number or number == 0 or not envTable.show then\n            unitFrame.healthBar.ttdTextFrame:SetText(\"\")\n            return\n        end\n        \n        local H = floor(number / 3600)\n        local M = floor((number - (floor(number / 3600) * 3600)) / 60)\n        local S = number - math.floor(number / 60) * 60\n        if H > 0 then\n            ret = (\"%02d:%02d:%02d\"):format(H, M, S)\n        elseif M > 0 then\n            ret = (\"%02d:%02d\"):format(M, S)\n        else\n            ret = floor(S)\n        end\n        \n        unitFrame.healthBar.ttdTextFrame:SetText(ret)\n    end\nend",
},
["Time"] = 1726956727,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 2125377,
["Enabled"] = false,
["Revision"] = 210,
["semver"] = "",
["Author"] = "Viash-Thrall",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Time to Die (TTD)",
["LastHookEdited"] = "Nameplate Updated",
["Options"] = {
},
},
{
["OptionsValues"] = {
["lowScale"] = 0.79999995231628,
["midScale"] = 0.89999997615814,
},
["HooksTemp"] = {
},
["UID"] = "0x6366dbeb1fda6285",
["Hooks"] = {
["Leave Combat"] = "function (_, unitId, unitFrame, _, modTable)\n    -- do nothing while spiteful is disabled\n    -- when updating this, also update Init and Nameplate Updated\n    \n    if not modTable.config.scale then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID or not modTable.isSpiteful(npcID) then\n        return\n    end\n    \n    Plater.SetNameplateScale(\n        unitFrame,\n        modTable.spitefulTargetsPlayer(unitId) and modTable.config.higherScale or modTable.config.extraLowScale\n    )\nend",
["Nameplate Updated"] = "function (_, unitId, unitFrame, _, modTable)\n    -- do nothing while spiteful is disabled\n    -- when updating this, also update Init and Leave Combat\n    \n    if not modTable.config.scale then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID or not modTable.isSpiteful(npcID) then\n        return\n    end\n    \n    Plater.SetNameplateScale(\n        unitFrame,\n        modTable.spitefulTargetsPlayer(unitId) and modTable.config.higherScale or modTable.config.extraLowScale\n    )\nend",
["Initialization"] = "function (modTable)\n    local medium = modTable.config.midScale -- 0.90\n    local small = modTable.config.lowScale -- 0.80\n    local extrasmall = modTable.config.extraLowScale -- 0.70,\n    local larger = modTable.config.higherScale -- 1.1\n    \n    --[[\n    GUIDELINES\n    - use LARGER for enemies with great situational importance that need extra attention\n        ex: totems at the end of Stonevault, Spiteful targeting you\n    - use MEDIUM for enemies that do little to nothing but melee the tank and have average health\n        OR casters without mandatory kick\n        ex: Patchwerk Soldier, Necrotic Wake | Tainted Lashers, Gnarlroot\n        ex: Primalist Galesinger, Halls of Infusion\n    - use SMALL for enemies that do nothing but melee the tank and have less than average health\n        -- ex: Jagged Hound, Waycrest Manor\n    - use EXTRA SMALL for enemies that do nothing at all AND/OR there's so many on the screen, you have no choice\n        ex: Fiery Vines, Tindral | Hungry Lashers, Academy\n    ]]\n    --\n    \n    modTable.npcIDs = {}\n    \n    local test = {\n        --[87329] = extrasmall, -- test dummy    \n    }\n    -- raids\n    local nerubarPalace = {\n        [219739] = small, -- Infested Spawn\n        --[220626] = small, -- Blood Parasite - \n        [223674] = small, --Skitterer - Ansurek\n        [219746] = small, -- Tomb - Ansurek\n        [221344] = medium, -- Gloom Hatchling - Ansurek\n    }\n    local amirdrassil = {\n        [210231] = medium, -- Tainted Lasher, Gnarlroot\n        [211306] = extrasmall, -- Fiery Vines, Tindral\n    }\n    local vault = {\n        [194991] = medium, -- Oathsworn Vanguard\n        [191714] = small, -- Seeking Stormling\n    }\n    local sepulcher = {\n        [183669] = small, -- Fiendish Soul\n    }\n    local nathria = {\n        [169925] = small, -- Begrudging Waiter\n    }\n    \n    -- War Within dungeons\n    \n    local prioryOfTheSacredFlame = {\n        [212838] = small, --Arathi Neophyte\n        [207943] = small, --Arathi Neophyte\n    }\n    \n    local darkflameCleft = {\n        [210148] = small, -- Menial Laborer\n        [210810] = small, -- Menial Laborer\n        [208457] = small, -- Skittering Darkness\n    }\n    \n    local cinderbrewMeadery = {\n        [217126] = extrasmall, --Over-indulged Patron\n        [214668] = small, -- Patron\n        [218865] = small, --Bee-let\n        [210270] = small, --Brew Drop\n        [223562] = small, --Brew Drop #2\n    }\n    \n    local stoneVault = {\n        [214287] = larger, --Earth Burst Totem\n    }\n    \n    local araKara = {\n        [216336] = medium, --Ravenous Crawler\n        [216341] = medium, --Jabbing Flyer\n        [218325] = small, --Swarming Flyer\n        [216337] = small, --Bloodworker\n    }\n    \n    local cityOfThreads = {\n        [220199] = small, --Battle Scarab\n        [216363] = medium, --Reenforced drone\n        [216365] = medium, --Carrier\n        [223357] = medium, --Conscript\n        [216329] = small, --Droplet\n        [220065] = small, --Umbral Weave\n        [222700] = small, --Umbral Weave\n        [219198] = medium, --Ravenous Scarab\n    }\n    \n    local theDawnbreaker = {\n        --[225601] = extrasmall, --Webbed Victim\n        [224616] = small, --Animated Shadow\n    }\n    \n    -- DF Dungeons\n    \n    local murozondsRise = {\n        [205151] = small, -- Tyr's Vanguard\n    }\n    \n    local galakrondsFall = {\n        [204536] = extrasmall, -- Blight Chunk\n        [206065] = extrasmall, -- Interval\n    }\n    \n    local hallsOfInfusion = {\n        [190923] = small, -- Zephyrling\n    }\n    \n    local neltharus = {\n        [192781] = small, -- Ore Elemental\n        [194389] = small, -- Lava Spawn\n    }\n    \n    local uldaman = {\n        [184134] = small, -- Scavenging Leaper\n        [186696] = larger, -- Quaking Totem\n    }\n    \n    local brackenhideHollow = {\n        [189299] = small, -- Decaying Slime\n        [192481] = small, -- Decaying Slime (boss adds)\n        [194330] = small, -- Decaying Slime (from big slime split)\n        [199916] = small, -- Decaying Slime\n        [194273] = small, -- Witherling\n        [187238] = small, -- Witherling\n        [189363] = extrasmall, -- Infected Lasher\n        [208994] = extrasmall, -- Infected Lasher\n        [194373] = small, -- Witherling\n        [190381] = larger, -- Rotburst Totem\n    }\n    \n    local algetharAcademy = {\n        [196642] = extrasmall, -- Hungry Lasher\n        [197398] = extrasmall, -- Hungry Lasher\n        [192329] = small, -- Territorial Eagle\n        [196694] = medium, -- Arcane Forager\n    }\n    \n    local azureVault = {\n        [191313] = extrasmall, -- Bubbling Sapling\n        [196559] = extrasmall, -- Volatile Sapling\n        [187246] = medium, -- Nullmagic Hornswog\n        [187242] = medium, -- Tarasek Looter\n        [187159] = small, -- Whelp\n    }\n    \n    local rubyLifePools = {\n        [189893] = extrasmall, -- Infused Whelp\n        [187894] = extrasmall, -- Infused Whelp\n        [194622] = extrasmall, -- Scorchling\n        [190205] = extrasmall, -- Scorchling\n        [197509] = extrasmall, -- Primal Thundercloud\n    }\n    \n    local nokhudOffensive = {\n        [195855] = small, -- Risen Warrior\n        [195875] = small, -- Desecrated Bakar\n        [196645] = small, -- Desecrated Bakar\n    }\n    \n    -- Shadowlands Dungeons\n    \n    local tazavesh = {\n        [178163] = small, -- Murkbrine Shorerunner\n    }\n    \n    local theaterOfPain = {\n        [163089] = small, -- Disgusting Refuse\n    }\n    \n    local necroticWake = {\n        [166264] = small, -- Spare Parts\n        [166266] = small, -- Spare Parts #2\n        [171500] = small, -- Shuffling Corpse\n        [165138] = small, -- Blight bag\n        [162729] = medium, -- Patchwerk Soldier\n    }\n    \n    local mistsOfTirnaScithe = {\n        [165111] = medium, -- Drust Spiteclaw\n        [167117] = small, -- Larva\n    }\n    \n    local hallsOfAtonement = {\n        [167892] = medium, -- Tormented Soul\n    }\n    \n    local deOtherSide = {\n        [168986] = small, -- Skeletal Raptor\n    }\n    \n    local plaguefall = {\n        [168969] = small, -- Gushing Slime\n    }\n    \n    local sanguineDepths = {\n        [171455] = small, -- Stonewall Gargon\n        [168457] = small, -- Stonewall Gargon\n        [166589] = small, -- Animate Weapon\n    }\n    \n    --BFA Dungeons\n    \n    local mechagon = {\n        [144300] = small, -- Mechagon Citizen\n    }\n    \n    local siegeOfBoralus = {\n        [133990] = medium, -- Scrimshaw Gutter\n        [138002] = medium, -- Scrimshaw Gutter\n        [135258] = medium, -- Curseblade\n    }\n    \n    local atalDazar = {\n        [128435] = extrasmall, -- saurid\n    }\n    \n    local waycrestManor = {\n        [131669] = small, -- Jagged Hound\n    }\n    \n    local underrot = {\n        [131402] = extrasmall, -- Underrot Tick\n    }\n    \n    local freehold = {\n        [130024] = small, -- Soggy Shiprat\n    }\n    \n    -- Legion Dungeons\n    \n    local hallsOfValor = {\n        [97087] = medium, -- Valajar Champion\n        [96640] = medium, -- Valajar Marksman\n        [99922] = small, -- Ebonclaw Packmate\n        [96608] = medium, -- Ebonclaw Worg\n        [96609] = medium, -- Gildedfur Stag\n    }\n    \n    local darkheartThicket = {\n        [100529] = small, -- Hatespawn Slime\n        [101074] = small, -- Hatespawn Whelpling\n        [100991] = small, -- Strangling Roots\n        [107288] = small, -- Vilethorn Sapling\n    }\n    \n    local blackRookHold = {\n        [98677] = small, -- Rook Spiderling\n        [98900] = medium, -- Wyrmtongue Trickster\n        [102781] = extrasmall, -- Fel Bat Pup\n    }\n    \n    local courtOfStars = {\n        [105703] = small, -- Mana Wyrm,\n        [104295] = small, -- Blazing Imp\n    }\n    \n    local neltharionsLair = {\n        [96247] = extrasmall, -- Vileshard Crawler\n        [102430] = small, -- Tarspitter Slug\n    }\n    \n    -- WoD Dungeons\n    \n    local everbloom = {\n        [81864] = small, -- Dreadpetal\n        [84401] = small, -- Swift Sproutling\n    }\n    \n    local shadowmoonBurialGrounds = {\n        [75451] = small, -- Defiled Spirit (non-casting)\n        [77006] = small, -- Corpse Skitterling\n        [76444] = small, -- Subjugated Soul\n    }\n    -- MoP Dungeons\n    local templeOfTheJadeSerpent = {\n        [62358] = small, -- Corrupt Droplet\n        [58319] = small, -- Lesser Sha\n        [59598] = small, -- Lesser Sha\n    }\n    \n    -- Cata Dungeons\n    \n    local throneOfTheTides = {\n        [40923] = extrasmall, -- Unstable Corruption\n    }\n    \n    local vortexPinnacle = {\n        [205326] = medium, -- Gust Soldier\n        [45477] = medium, -- Gust Soldier\n        [45704] = small, -- Lurking Tempest\n        [204337] = small, -- Lurking Tempest\n        [45924] = medium, -- Turbulent Squall\n        [45922] = medium, -- Empyrean Assassin\n        [45926] = medium, -- Servant of Asaad\n        [45932] = small, -- Skyfall Star\n    }\n    \n    local grimBatol = {\n        [224853] = small, -- Hatchling\n        [39388] = medium, -- Boss Hatchling\n    }\n    \n    local misc = {\n        -- Fodder to the Flame demons\n        [169428] = small,\n        [169430] = small,\n        [169429] = small,\n        [169426] = small,\n        [169421] = small,\n        [169425] = small,\n        [168932] = small,\n        -- Misc\n        [189707] = small, -- Chaotic Motes, SL Fated affix\n        [229537] = larger, -- Void Emissary\n        [229296] = small, -- Orb of Ascendance\n    }\n    \n    local maps = {\n        test,\n        prioryOfTheSacredFlame,\n        darkflameCleft,\n        cinderbrewMeadery,\n        theDawnbreaker,\n        stoneVault,\n        amirdrassil,\n        atalDazar,\n        waycrestManor,\n        darkheartThicket,\n        everbloom,\n        blackRookHold,\n        galakrondsFall,\n        throneOfTheTides,\n        templeOfTheJadeSerpent,\n        nokhudOffensive,\n        courtOfStars,\n        shadowmoonBurialGrounds,\n        algetharAcademy,\n        azureVault,\n        hallsOfValor,\n        rubyLifePools,\n        underrot,\n        freehold,\n        neltharionsLair,\n        vortexPinnacle,\n        hallsOfInfusion,\n        neltharus,\n        uldaman,\n        brackenhideHollow,\n        murozondsRise,\n        misc,\n        vault,\n        sepulcher,\n        nathria,\n        nerubarPalace,\n        araKara,\n        cityOfThreads,\n        tazavesh,\n        theaterOfPain,\n        necroticWake,\n        mistsOfTirnaScithe,\n        hallsOfAtonement,\n        deOtherSide,\n        plaguefall,\n        sanguineDepths,\n        grimBatol,\n        siegeOfBoralus,\n        mechagon,\n    }\n    \n    for i = 1, #maps do\n        local map = maps[i]\n        \n        for id, priority in pairs(map) do\n            modTable.npcIDs[id] = priority\n        end\n    end\n    \n    ---@param unit string\n    ---@return number|nil\n    function modTable.parseGUID(unit)\n        local guid = UnitGUID(unit)\n        \n        if not guid then\n            return nil\n        end\n        \n        local id = select(6, strsplit(\"-\", guid))\n        \n        return id and tonumber(id) or nil\n    end\n    \n    -- do nothing while spiteful is disabled\n    -- when updating this, also update Nameplate Updated and Leave Combat\n    \n    ---@param id number\n    ---@return boolean\n    function modTable.isSpiteful(id)\n        return tonumber(id) == 220626 --Blood Parasite\n    end\n    \n    ---@param unitId string\n    ---@return boolean\n    function modTable.spitefulTargetsPlayer(unitId)\n        local targetName = UnitName(unitId .. \"target\")\n        \n        if not targetName then\n            return false\n        end\n        \n        return UnitIsUnit(targetName, \"player\")\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not modTable.config.scale then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID then\n        return\n    end\n    \n    local scale = modTable.npcIDs[npcID]\n    \n    if scale then\n        Plater.SetNameplateScale(unitFrame, scale)\n    end\nend",
},
["Time"] = 1727078854,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1041231,
["Enabled"] = true,
["Revision"] = 2234,
["semver"] = "",
["Author"] = "Causese-Valdrakken",
["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "Initialization",
["Options"] = {
{
["Type"] = 4,
["Key"] = "scale",
["Value"] = true,
["Name"] = "Enable Scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Allows nameplates to scale based on priority.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for mid priority.",
["Min"] = 0,
["Key"] = "midScale",
["Value"] = 0.9,
["Name"] = "Mid prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for low priority.",
["Min"] = 0,
["Key"] = "lowScale",
["Value"] = 0.8,
["Name"] = "Low prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for extra low scale",
["Min"] = 0,
["Key"] = "extraLowScale",
["Value"] = 0.7,
["Name"] = "Very Low Prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Set scaling value for higher priority",
["Min"] = 0,
["Key"] = "higherScale",
["Value"] = 1.1,
["Name"] = "Higher Priority",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Name"] = "Priority based scaling - Jundies",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    function Plater.UpdateLifePercentText(healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        --get the cached health amount for performance\n        local currentHealth, maxHealth = healthBar.CurrentHealth, healthBar.CurrentHealthMax\n        \n        if showHealthAmount and showPercentAmount then\n            local percent = maxHealth == 0 and 100 or (currentHealth / maxHealth * 100)\n            \n            if showDecimals then\n                if percent < 10 then\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. format(\" %.2f%%\", percent))\n                elseif percent < 99.9 then\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. format(\" %.1f%%\", percent))\n                else\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. \" 100%\")\n                end\n            else\n                healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. format(\" %d%%\", percent))\n            end\n        elseif showHealthAmount then\n            healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth))\n        elseif showPercentAmount then\n            local percent = maxHealth == 0 and 100 or (currentHealth / maxHealth * 100)\n            \n            if showDecimals then\n                if percent < 10 then\n                    healthBar.lifePercent:SetText(format(\"%.2f%%\", percent))\n                elseif percent < 99.9 then\n                    healthBar.lifePercent:SetText(format(\"%.1f%%\", percent))\n                else\n                    healthBar.lifePercent:SetText(\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText(format(\"%d%%\", percent))\n            end\n        else\n            healthBar.lifePercent:SetText(\"\")\n        end\n    end\nend\n\n\n\n\n",
},
["Time"] = 1726954896,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 237031,
["Enabled"] = true,
["Revision"] = 167,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the total health and percent in the health amount text. See the constructor code to change options.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Health Formatting",
["LastHookEdited"] = "Initialization",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    \n    --init\n    local hb = unitFrame.healthBar\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture(hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture(hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if hb.isCustomShieldHook then\n            return\n        end\n        --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n        hb.UpdateHealPrediction = function(self)\n            local currentHealth = self.currentHealth\n            local currentHealthMax = self.currentHealthMax\n            local healthPercent = currentHealth / currentHealthMax\n            \n            if not currentHealthMax or currentHealthMax <= 0 then\n                return\n            end\n            \n            --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n            local width = self:GetWidth()\n            \n            hb.shieldAbsorbIndicator:Hide()\n            hb.shieldAbsorbGlow:Hide()\n            \n            if not self.displayedUnit then\n                return\n            end\n            \n            if self.Settings.ShowHealingPrediction then\n                --incoming heal on the unit from all sources\n                local unitHealIncoming = UnitGetIncomingHeals(self.displayedUnit) or 0\n                --heal absorbs\n                local unitHealAbsorb = UnitGetTotalHealAbsorbs(self.displayedUnit) or 0\n                \n                if unitHealIncoming > 0 then\n                    --calculate what is the percent of health incoming based on the max health the player has\n                    local incomingPercent = unitHealIncoming / currentHealthMax\n                    self.incomingHealIndicator:Show()\n                    self.incomingHealIndicator:SetWidth(\n                        max(1, min(width * incomingPercent, abs(healthPercent - 1) * width))\n                    )\n                    self.incomingHealIndicator:SetPoint(\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                    self.incomingHealIndicator:SetPoint(\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                else\n                    self.incomingHealIndicator:Hide()\n                end\n                \n                if unitHealAbsorb > 0 then\n                    local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                    self.healAbsorbIndicator:Show()\n                    self.healAbsorbIndicator:SetWidth(\n                        max(1, min(width * healAbsorbPercent, abs(healthPercent - 1) * width))\n                    )\n                    self.healAbsorbIndicator:SetPoint(\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                    self.healAbsorbIndicator:SetPoint(\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                else\n                    self.healAbsorbIndicator:Hide()\n                end\n            end\n            \n            if self.Settings.ShowShields then\n                --damage absorbs\n                local unitDamageAbsorb = UnitGetTotalAbsorbs(self.displayedUnit) or 0\n                self.currentAbsorb = unitDamageAbsorb\n                \n                if unitDamageAbsorb > 0 then\n                    local curHealthTotal = unitDamageAbsorb + currentHealth\n                    local damageAbsorbPercent\n                    local healthPercentAbsorb\n                    local isHalfBar = false\n                    if curHealthTotal > currentHealthMax then\n                        if useHalfBar then\n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            if damageAbsorbPercent > 1 then\n                                damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                            end\n                            healthPercentAbsorb = 1 - damageAbsorbPercent\n                            self:SetMinMaxValues(0, currentHealthMax)\n                            \n                            isHalfBar = true\n                        else\n                            damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                            healthPercentAbsorb = currentHealth / curHealthTotal\n                            self:SetMinMaxValues(0, curHealthTotal)\n                        end\n                    else\n                        damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                        healthPercentAbsorb = currentHealth / currentHealthMax\n                        self:SetMinMaxValues(0, currentHealthMax)\n                    end\n                    --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                    \n                    self.shieldAbsorbIndicator:SetWidth(width * damageAbsorbPercent)\n                    self.shieldAbsorbIndicator:SetPoint(\n                        \"topleft\",\n                        self,\n                        \"topleft\",\n                        width * healthPercentAbsorb,\n                        (isHalfBar and (-self:GetHeight() / 2)) or 0\n                    )\n                    self.shieldAbsorbIndicator:SetPoint(\n                        \"bottomleft\",\n                        self,\n                        \"bottomleft\",\n                        width * healthPercentAbsorb,\n                        0\n                    )\n                    \n                    self.shieldAbsorbIndicator:Show()\n                else\n                    self.shieldAbsorbIndicator:Hide()\n                end\n            end\n            \n            hb.isCustomShieldHook = true\n        end\n        \n        if hb.displayedUnit then\n            hb.shieldAbsorbIndicator:Hide()\n            hb.shieldAbsorbGlow:Hide()\n            hb:UNIT_MAXHEALTH()\n        else\n            hb.customShieldHookNeedsUpdate = true\n        end\n    end\nend",
},
["Time"] = 1726955149,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135940,
["Enabled"] = true,
["Revision"] = 1263,
["semver"] = "",
["Author"] = "Elaiana-Proudmoore",
["Desc"] = "Adds absorbs to the health bar as full health value.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Absorb Shields in Healthbar",
["LastHookEdited"] = "Constructor",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options For @scriptname",
["Name"] = "Options Intro",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = "",
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
["nameColor"] = {
0,
1,
0.011764707043767,
1,
},
["useNameplateColor"] = false,
["useNameColor"] = true,
["borderColor"] = {
0,
1,
0.011764707043767,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x669ff67a1d2afb0",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.maybeUpdateColor(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.maybeUpdateColor(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    -- Populated with root immune npcIds from MDT.\n    local immuneMap = {\n        -- not stun immune in MDT\n        [205408] = true, -- Infinite Timeslicer\n    }\n    \n    local hasMDT = false\n    \n    if MDT and MDT.dungeonEnemies then\n        hasMDT = true\n        \n        for _, dungeon in pairs(MDT.dungeonEnemies) do\n            for _, npc in pairs(dungeon) do\n                if npc.characteristics and npc.characteristics and not npc.characteristics[\"Stun\"] then\n                    immuneMap[npc.id] = true\n                end\n            end\n        end\n    end\n    \n    function modTable.maybeUpdateColor(unitFrame)\n        if not hasMDT then\n            return\n        end\n        \n        if immuneMap[unitFrame.namePlateNpcId] == nil then\n            return\n        end\n        \n        if modTable.config.useNameplateColor then\n            Plater.SetNameplateColor(unitFrame, modTable.config.healthBarColor)\n            Plater.DenyColorChange(unitFrame, true)\n        end\n        \n        if modTable.config.useBorderColor then\n            Plater.SetBorderColor(unitFrame, modTable.config.borderColor)\n            Plater.DenyColorChange(unitFrame, true)\n        end\n        \n        if modTable.config.useNameColor then\n            Plater:SetFontColor(unitFrame.unitName, modTable.config.nameColor)\n            Plater.DenyColorChange(unitFrame, true)\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.maybeUpdateColor(unitFrame)\nend",
},
["Time"] = 1724700828,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["Enabled"] = true,
["64"] = true,
},
},
["url"] = "",
["Icon"] = 135848,
["Enabled"] = false,
["Revision"] = 617,
["semver"] = "",
["Author"] = "Aparratchic-Ragnaros",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Activate Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
0,
0.34117648005486,
1,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBorderColor",
["Value"] = false,
["Name"] = "Activate Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "borderColor",
["Value"] = {
0,
1,
0.011764707043767,
1,
},
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameColor",
["Value"] = false,
["Name"] = "Activate Name Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "nameColor",
["Value"] = {
0,
1,
0.26666668057442,
1,
},
["Name"] = "Name Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Name"] = "Freeze Immune NPC's [MDT]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#5d00ff\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1726865575,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/ZqU9hBu43/3",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 114,
["semver"] = "1.0.2",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 99,
["version"] = 3,
["PlaterCore"] = 1,
["Name"] = "Pet Threat Highlighter",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if unitFrame.healthBar.questProgressTextFrame then\n        unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateText(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateText(unitFrame)\nend",
["Constructor"] = "function(self, unitId, unitFrame, envTable)\n    local textColor = \"orange\"\n    local textSize = 12\n    \n    -- positioning\n    local anchor = {\n        side = 2, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = -15, --x offset\n        y = 0, --y offset\n    }\n    \n    function envTable.updateText(unitFrame)\n        if not unitFrame or not unitFrame.namePlateIsQuestObjective or not unitFrame.QuestAmountCurrent then\n            if unitFrame.healthBar.questProgressTextFrame and unitFrame.healthBar.questProgressTextFrame:IsShown() then\n                unitFrame.healthBar.questProgressTextFrame:Hide()\n            end\n            \n            return\n        end\n        \n        local text = unitFrame.QuestAmountTotal and unitFrame.QuestAmountTotal - unitFrame.QuestAmountCurrent\n        or unitFrame.QuestAmountCurrent .. \"%\"\n        \n        local currentText = unitFrame.healthBar.questProgressTextFrame\n        and unitFrame.healthBar.questProgressTextFrame:GetText()\n        or nil\n        \n        if currentText == text then\n            return\n        end\n        \n        --create the text frame that will show the quest progress\n        if not unitFrame.healthBar.questProgressTextFrame then\n            envTable.questProgressTextFrame = Plater:CreateLabel(unitFrame.healthBar, \"\", textSize, textColor)\n            Plater.SetAnchor(envTable.questProgressTextFrame, anchor)\n            unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n        end\n        \n        if not unitFrame.healthBar.questProgressTextFrame:IsVisible() then\n            unitFrame.healthBar.questProgressTextFrame:Show()\n        end\n        \n        unitFrame.healthBar.questProgressTextFrame:SetText(text)\n    end\nend",
},
["Time"] = 1726955721,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "236671",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a text indicator for quest progress to show how many times the objective has to be completed.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "QuestProgress",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["targetColor"] = {
1,
1,
1,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x669565071fdad90",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local targetBorderColor = modTable.config.targetColor\n    local focusBorderColor = modTable.config.focusColor\n    \n    modTable.target = nil\n    modTable.focus = nil\n    \n    local function holdsSameColor(frame, nextColor)\n        local currentR, currentG, currentB, currentA =\n        unpack(frame.customBorderColor and frame.customBorderColor or Plater.db.profile.border_color)\n        local nextR, nextG, nextB, nextA = unpack(nextColor or Plater.db.profile.border_color)\n        \n        return currentR == nextR and currentG == nextG and currentB == nextB and currentA == nextA\n    end\n    \n    function envTable.updateBorderColor(frame)\n        if unitFrame.namePlateIsTarget then\n            if holdsSameColor(unitFrame, targetBorderColor) then\n                return\n            end\n            \n            Plater.SetBorderColor(unitFrame, targetBorderColor)\n            modTable.target = unitFrame\n        elseif unitFrame.IsFocus then\n            if holdsSameColor(unitFrame, focusBorderColor) then\n                return\n            end\n            \n            Plater.SetBorderColor(unitFrame, focusBorderColor)\n            modTable.focus = unitFrame\n        else\n            if not UnitExists(\"target\") then\n                modTable.target = nil\n            end\n            \n            if not UnitExists(\"focus\") or UnitIsFriend(\"focus\", \"player\") then\n                modTable.focus = nil\n            else\n                local plate = C_NamePlate.GetNamePlateForUnit(\"focus\")\n                \n                if plate and plate.unitFrame then\n                    modTable.focus = plate.unitFrame\n                end\n            end\n            \n            if modTable.target ~= unitFrame and modTable.focus ~= unitFrame and not holdsSameColor(unitFrame) then\n                Plater.SetBorderColor(unitFrame)\n            end\n        end\n    end\nend",
},
["Time"] = 1726956735,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "132212",
["Enabled"] = true,
["Revision"] = 336,
["semver"] = "",
["Author"] = "Xephunt-These Go To Eleven",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "Target Changed",
["Options"] = {
{
["Type"] = 1,
["Key"] = "targetColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Target Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes target border color",
},
{
["Type"] = 1,
["Key"] = "focusColor",
["Value"] = {
0,
1,
0.94117653369904,
1,
},
["Name"] = "Focus Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes Focus border color",
},
},
["Name"] = "Target Border Color",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["UID"] = "0x66e5810079f372",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.EnhancedCastBar(unitId, unitFrame)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable) end",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)    \n    modTable.EnhancedCastBar(unitId, unitFrame)\nend",
["Initialization"] = "function (modTable)\n    modTable.reflectableSpells = {}\n    \n    local playerClass = select(3, UnitClass(\"player\"))\n    \n    ---@param spellId number\n    ---@return number, number, boolean, number\n    local function CompatGetSpellCooldown(spellId)\n        if C_Spell.GetSpellCooldown then\n            local info = C_Spell.GetSpellCooldown(spellId)\n            return info.startTime, info.duration, info.isEnabled, info.modRate\n        end\n        \n        return GetSpellCooldown(spellId)\n    end\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    ---@param spellID number\n    ---@return boolean\n    local function IsSpellOnCooldown_IgnoreGCD(spellID)\n        local gcdSTART, gcdDUR = CompatGetSpellCooldown(61304) -- GCD\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local spellStart, spellDuration = CompatGetSpellCooldown(spellID)\n        local spellReadyTime = spellStart + spellDuration\n        return spellReadyTime > GCD_expirationTime\n    end\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    local function MaybeCreateTickTexture(castBar)\n        if not castBar.tick then\n            castBar.tick = castBar:CreateTexture(nil, \"overlay\")\n            castBar.tick:SetDrawLayer(\"overlay\", 4)\n            castBar.tick:SetBlendMode(\"DISABLE\")\n            --castBar.tick:SetHeight(castBar:GetHeight())\n            castBar.tick:SetHeight(8)\n            castBar.tick:SetTexture(Plater.SparkTextures[8])\n            castBar.tick:SetWidth(2)\n            castBar.tick:SetVertexColor(Plater:ParseColors(modTable.config.colorTick))\n        end\n    end\n    \n    ---@param unitId string\n    ---@return boolean\n    local function UnitIsStillCasting(unitId)\n        if UnitCastingInfo(unitId) ~= nil then\n            return true\n        end\n        \n        if UnitChannelInfo(unitId) ~= nil then\n            return true\n        end\n        \n        return false\n    end\n    \n    local function DetermineInterruptId()\n        if playerClass == 1 then -- Warrior\n            return function()\n                return 6552 -- Pummel\n            end\n        end\n        \n        if playerClass == 2 then -- Paladin\n            return function()\n                return 96231 -- Rebuke\n            end\n        end\n        \n        if playerClass == 3 then -- Hunter\n            return function()\n                local spec = GetSpecialization()\n                \n                if spec == 3 then -- survival\n                    return 187707 -- muzzle\n                end\n                \n                return 147362 -- counter shot\n            end\n        end\n        \n        if playerClass == 4 then -- rogue\n            return function()\n                return 1766 -- kick\n            end\n        end\n        \n        if playerClass == 5 then -- priest\n            return function()\n                local spec = GetSpecialization()\n                \n                if spec == 3 then -- shadow\n                    return 15487 -- silence\n                end\n                \n                return nil\n            end\n        end\n        \n        if playerClass == 6 then -- death knight\n            return function()\n                return 47528 -- mind freeze\n            end\n        end\n        \n        if playerClass == 7 then -- shaman\n            return function()\n                return 57994\n            end\n        end\n        \n        if playerClass == 8 then -- mage\n            return function()\n                return 2139 -- counterspell\n            end\n        end\n        \n        if playerClass == 9 then -- warlock\n            return function()\n                if IsSpellKnown(89766, true) then -- felguard: axe toss\n                    return 89766\n                end\n                \n                if IsSpellKnown(19647, true) then -- felhunter: spell lock\n                    return 19647\n                end\n                \n                if C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then -- spell lock via grimoire of sacrifice\n                    return 132409\n                end\n                \n                return nil\n            end\n        end\n        \n        if playerClass == 10 then -- monk\n            return function()\n                return 116705 -- spear hand strike\n            end\n        end\n        \n        if playerClass == 11 then -- druid\n            return function()\n                local spec = GetSpecialization()\n                \n                if spec == 1 then -- balance\n                    return 78675 -- soalr beam\n                end\n                \n                return 106839 -- skull bash\n            end\n        end\n        \n        if playerClass == 12 then -- demon hunter\n            return function()\n                return 183752 -- disrupt\n            end\n        end\n        \n        if playerClass == 13 then -- evoker\n            return function()\n                return 351338 -- quell\n            end\n        end\n    end\n    \n    local GetInterruptID = DetermineInterruptId()\n    \n    ---@param unitId string\n    ---@param unitFrame Frame\n    function modTable.EnhancedCastBar(unitId, unitFrame)\n        local castBar = unitFrame.castBar\n        \n        if castBar.tick ~= nil then\n            castBar.tick:Hide()\n        end\n        \n        if castBar.IsInterrupted or castBar.interrupted or not UnitIsStillCasting(unitId) then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if not UnitExists(targetUnitId) then\n            return\n        end\n        \n        local targetName = UnitName(targetUnitId)\n        local isTargettingMe = targetName == UnitName(\"player\")\n        castBar.Text:SetText(castBar.SpellName)\n        \n        -- Cast is targetting a specific unit\n        if targetName then\n            -- Nameplate flash options\n            if isTargettingMe and modTable.config.nameplateFlash then\n                -- Default value of true since it is turned on in the options\n                local showNameplateFlash = true\n                \n                if\n                modTable.config.hideNameplateFlashSolo\n                and not UnitInParty(\"player\")\n                and not UnitInRaid(\"player\")\n                then\n                    showNameplateFlash = false\n                end\n                \n                if modTable.config.hideFlashAsTank and GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                    showNameplateFlash = false\n                end\n                \n                -- Show nameplate flash if conditions met\n                if showNameplateFlash then\n                    Plater.FlashNameplateBody(unitFrame)\n                end\n            end\n            \n            -- Target name in cast bar options\n            if modTable.config.showTargetName then\n                if modTable.config.replaceName and isTargettingMe then\n                    targetName = \"Me\"\n                end\n                \n                local castBarWidth = castBar:GetWidth()\n                DetailsFramework:TruncateText(castBar.Text, castBarWidth * (modTable.config.castNameSize / 100))\n                \n                local currentText = castBar.Text:GetText()\n                if currentText ~= nil and currentText ~= \"\" then\n                    local castText = currentText .. \" \" .. Plater.SetTextColorByClass(targetUnitId, targetName)\n                    \n                    if\n                    modTable.config.hideNameSolo\n                    and not UnitInParty(\"player\")\n                    and not UnitInRaid(\"player\")\n                    and isTargettingMe\n                    then\n                        castText = currentText\n                    end\n                    \n                    castBar.Text:SetText(castText)\n                    DetailsFramework:TruncateText(castBar.Text, castBarWidth)\n                end\n            end\n        end\n        \n        if not modTable.config.showInterruptColor then\n            return\n        end\n        \n        -- Interrupt bar color options\n        local canInterrupt = castBar.canInterrupt\n        local castEndTime = castBar.spellEndTime\n        local interruptReadyTime = 0\n        local start\n        local duration\n        local interruptID = GetInterruptID()\n        \n        if interruptID ~= nil then\n            start, duration = CompatGetSpellCooldown(interruptID) --local\n            interruptReadyTime = start + duration\n        end\n        \n        local nextColor = modTable.config.colorProtected\n        \n        if canInterrupt and interruptID ~= nil then\n            local playerIsWarlock = playerClass == 9\n            \n            -- Check to see if the spell is known/talented\n            if IsSpellKnown(interruptID, playerIsWarlock) then\n                if interruptReadyTime == 0 then\n                    nextColor = modTable.config.colorInterruptAvailable\n                elseif\n                modTable.config.showSecondaryInterrupts\n                and playerClass == 2 -- paladin\n                and IsSpellKnown(31935) -- avenger's shield\n                and not IsSpellOnCooldown_IgnoreGCD(31935)\n                then\n                    nextColor = modTable.config.colorSecondaryInterrupt\n                elseif interruptReadyTime < (castEndTime - 0.25) then\n                    MaybeCreateTickTexture(castBar)\n                    castBar.tick:Show()\n                    local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue -- castBar.spellStartTime + 0.25\n                    if castBar.channeling then\n                        tickLocation = 1 - tickLocation\n                    end\n                    castBar.tick:SetPoint(\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                    \n                    nextColor = modTable.config.colorInterruptSoon\n                elseif interruptReadyTime >= (castEndTime - 0.25) then\n                    nextColor = modTable.config.colorNoInterrupt\n                end\n            else\n                nextColor = modTable.config.colorNoInterrupt\n            end\n        end\n        \n        -- Spell Reflection coloring\n        if\n        modTable.config.showSecondaryInterrupts\n        and isTargettingMe\n        and playerClass == 1\n        and IsSpellKnown(23920) -- spell reflect\n        and not IsSpellOnCooldown_IgnoreGCD(23920)\n        and modTable.reflectableSpells[castBar.SpellID] == true\n        then\n            -- Color the bar if the spell is reflectable\n            nextColor = modTable.config.colorSecondaryInterrupt\n        end\n        \n        local currentR, currentG, currentB, currentA = castBar:GetColor()\n        local nextR, nextG, nextB, nextA = unpack(nextColor)\n        \n        if currentR ~= nextR or currentG ~= nextG or currentB ~= nextB or currentA ~= nextA then\n            Plater.SetCastBarColor(unitFrame, nextColor)\n        end\n    end\n    \n    if playerClass == 1 then\n        --TWW Dungeons \n        local araKara = {\n            436322, -- Poison bolt - atik\n            434786, -- Web bolt\n        }\n        \n        local cityOfThreads = {\n            442536, -- Grimweave Blast\n            443427, -- Web Bolt\n            439341, -- Splice - Izo\n            446717, -- Umbral Weave\n            438860, -- Umbral Weave - Izo\n        }\n        \n        local theDawnbreaker = {\n            428086, -- Shadow bolt\n            451114, -- Congealed Shadow\n            432448, -- Stygian Seed\n            431495, -- Black Edge\n            451113, -- Web Bolt\n            431303, -- Night Bolt\n            431494, -- Black Edge\n        }\n        \n        local theStonevault = {\n            429422, -- Stone Bolt\n            426283, -- Arcing Void\n            429110, --Alloy Bolt\n            429545, -- Censoring Gear\n            459210, -- Shadow Claw\n            430097, -- Molten Metal - Speaker Brokk\n        }\n        \n        local cinderbrewMeadery = {\n            \n        }\n        \n        local darkflameCleft = { \n            \n        }\n        \n        local prioryOfTheSacredFlame = {\n            \n        }\n        \n        local theRookery = {\n            \n        }\n        \n        \n        \n        --DF Dungeons\n        \n        local murozondsRise = {\n            400165, -- Epoch Bolt\n            413607, -- Corroding Volley\n            418202, -- Temporal Blast\n            417030, -- Fireball\n            411763, -- Infinite Blast\n            407121, -- Immolate\n        }\n        \n        local galakrondsFall = {\n            415435, -- Infinite Bolt\n            413590, -- Noxious Ejection\n            411958, -- Stonebolt\n        }\n        \n        local rubyLifePools = {\n            373803, -- Cold Claws boss adds\n            372683, -- Cold Claws trash\n            372808, -- Frigid Shard\n            373693, -- Living Bomb\n            371984, -- Icebolt\n            384197, -- Cinderbolt\n            384194, -- Cinderbolt\n            392576, -- Thunderbolt\n            385310, -- Lightning Bolt\n            385536, -- Flame Dance\n        }\n        \n        local azureVault = {\n            374789, -- Infused Strike\n            373932, -- Illusionary Bolt\n            384978, -- Dragon Strike\n            377503, -- Condensed Frost\n            389804, -- Heavy Tome\n            371306, -- Arcane Bolt\n        }\n        \n        local brackenhideHollow = {\n            382249, -- Earth Bolt\n            381694, -- Decayed Senses\n            378155, -- Earth Bolt (boss)\n            382474, -- Decay Surge\n        }\n        \n        local hallsOfInfusion = {\n            374020, -- Containment Beam\n            389443, -- Purifying Blast\n            374706, -- Pyretic Burst\n            375950, -- Ice Shard\n            385963, -- Frost Shock\n            395690, -- Lightning Blast\n            387504, -- Squall Buffet\n            387571, -- Focused Deluge\n        }\n        \n        local uldaman = {\n            369674, -- Stone Spike\n            369675, -- Chain Lightning\n            372718, -- Earthen Shards\n            369399, -- Stone Bolt\n            369365, -- Curse of Stone\n            377395, -- Time Sink\n        }\n        \n        local neltharus = {\n            378818, -- Magma Conflagration\n            372538, -- Melt\n            383231, -- Lava Bolt\n        }\n        \n        local nokhudOffensive = {\n            387125, -- Thunderstrike\n            387127, -- Chain Lightning\n            386012, -- Stormbolt\n            387613, -- Death Bolt\n            382670, -- Gale Arrow\n            376827, -- Conductive Strike\n            384761, -- Wind Burst\n            396206, -- Storm Shock\n            381530, -- Storm Shock\n        }\n        \n        local algetharAcademy = {\n            388862, -- Surge\n            377991, -- Storm Slash\n            387975, -- Arcane Missiles\n        }\n        \n        --Shadowlands Dungeons\n        \n        local mistsOfTirnaScithe = {\n            332767, --Spirit Bolt\n            323057, --Spirit Bolt - Boss\n            332557, --Soul Split\n            463217, --Anima Slash\n            325223, --Anima Injection\n            332486, --Overgrowth\n        }\n        \n        local theNecroticWake = {\n            328667, --Frostbolt Volley\n            333623, --Frostbolt Volley\n            326574, --Noxious Fog\n            320788, --Frozen Binds\n            322274, --Enfeeble\n            334748, --Drain Fluids\n            320462, --Necrotic Bolt\n            333479, --Spew Disease\n            323347, --Clinging Darkness\n            333602, --Frostbolt\n        }\n        \n        \n        \n        --BFA Dungeons\n        \n        local siegeOfBoralus = {\n            272581, -- Water bolt\n            257063, -- Brackish bolt\n        }\n        \n        local waycrestManor = {\n            265372, -- Shadow Cleave\n            263943, -- Etch\n            264105, -- Runic Mark\n            260701, -- Bramble Bolt\n            260699, -- Soul Bolt\n            260700, -- Ruinous Bolt\n            266036, -- Drain Essence\n            264024, -- Soul Bolt\n            426541, -- Runic Bolt\n            264556, -- Tearing Strike\n            264153, -- Spit\n            278444, -- Infest\n            265881, -- Decaying Touch\n            265880, -- Dread Mark\n            268278, -- Wracking Chord\n            261438, -- Wasting Strike\n            261440, -- Virulent Pathogen\n        }\n        \n        local atalDazar = {\n            253562, -- Wildfire\n            254959, -- Soul Burn\n            252923, -- Venom Blast\n            252687, -- Venomfang Strike\n            250096, -- Wracking Pain\n        }\n        \n        local underrot = {\n            265084, -- Blood Bolt\n            260879, -- Blood Bolt (boss)\n            278961, -- Decaying Mind\n            266265, -- Wicked Embrace\n            272180, -- Void Spit\n        }\n        \n        local freehold = {\n            259092, -- Lightning Bolt\n            257908, -- Oiled Blade\n            281420, -- Water Bolt\n        }\n        \n        \n        --Legion Dungeons\n        \n        local darkheartThicket = {\n            204243, -- Tormenting Eye\n            200238, -- Feed on the Weak\n            200185, -- Nightmare Bolt\n            200684, -- Nightmare Toxin\n            200642, -- Despair\n            201411, -- Firebolt\n            201837, -- Shadow Bolt\n        }\n        \n        local blackRookHold = {\n            199663, -- Soul Blast\n            200248, -- Arcane Blitz\n        }\n        \n        local neltharionsLair = {\n            186269, -- Stone Bolt\n            198496, -- Sunder\n            210150, -- Toxic Retch\n            200732, -- Molten Crash\n        }\n        \n        local hallsOfValor = {\n            198595, -- Thunderous Bolt\n            198962, -- Shattered Rune\n            198959, -- Etch\n            191976, -- Arcing Bolt\n            192288, -- Searing Light\n        }\n        \n        local courtOfStars = {\n            209036, -- Throw Torch\n            209413, -- Suppress\n            211406, -- Firebolt\n            211473, -- Shadow Slash\n            373364, -- Vampiric Claws\n        }\n        \n        \n        --WoD Dungeons\n        \n        local everbloom = {\n            169657, -- Poisonous Claws\n            168040, -- Nature's Wrath\n            168092, -- Water Bolt\n            169840, -- Frostbolt\n            169841, -- Arcane Blast\n            169839, -- Pyroblast\n            427858, -- Fireball\n            164965, -- Choking Vines\n        }\n        \n        local shadowmoonBurialGrounds = {\n            152814, -- Shadow Bolt\n            152819, -- Shadow Word: Frailty\n            156776, -- Rending Voidlash\n            398206, -- Death Blast\n            153067, -- Void Devastation\n            153524, -- Plague Spit\n        }\n        \n        --MoP Dungeons\n        \n        local templeOfTheJadeSerpent = {\n            397888, -- Hydrolance\n            114803, -- Throw Torch\n            114571, -- Agony\n            397914, -- Defiling Mist\n            397931, -- Dark Claw\n            106823, -- Serpent Strike\n        }\n        \n        \n        --Cata Dungeons\n        \n        local throneOfTheTides = {\n            426731, -- Water Bolt\n            428542, -- Crushing Depths\n            426768, -- Lightning Bolt\n            75992, -- Lightning Surge\n            428374, -- Focused Tempest\n            426783, -- Mind Flay\n            429048, -- Flame Shock\n            429173, -- Mind Rot\n            429176, -- Aquablast\n            428526, -- Ink Blast\n            428889, -- Foul Bolt\n        }\n        \n        local vortexPinnacle = {\n            410873, -- Rushing Wind\n            86331, -- Lightning Bolt\n            411019, -- Starlight\n            87762, -- Lightning Lash\n            87622, -- Chain Lightning\n        }\n        \n        local grimBatol = { \n            447966, --Shadowflame bolt (Boss)\n            76369, --Shadowflame bolt (adds)\n            450087, --Depth's Grasp\n            451971, --Lava Fist\n            451241, --Shadowflame Slash\n        }\n        \n        \n        \n        -- Raids\n        local nerubarPalace = {\n            438807, --Vicious Bite - Broodtwister\n            441362, --Volatile Concoction - Broodtwister\n            441772, --Void Bolt - Silken Court\n            438200, --Poison Bolt - Silken Court\n        }\n        \n        local amidrassil = {\n            431302, -- Fyr'alath's Flame, Fyrakk\n            421284, -- Coiling Flames, Volcoross\n        }\n        \n        local aberrus = {\n            403203, -- Flame Slash, Amalgamation Chamber\n            403699, -- Shadow Spike\n            397386, -- Lava Bolt, trash\n            410351, -- Flaming Cudgel, Assault\n        }\n        \n        local vault = {\n            396040, -- Pyroblast, Eranog\n            372394, -- Lightning Bolt, Council\n            372315, -- Frost Spike\n            372275, -- Chain Lightning\n            385812, -- Aerial Slash, Dathea\n            375716, -- Ice Barrage, Diurna\n            385553, -- Storm Bolt\n            375653, -- Static Jolt\n        }\n        \n        local zones = {\n            nerubarPalace,\n            araKara,\n            cityOfThreads,\n            grimBatol,\n            mistsOfTirnaScithe,\n            siegeOfBoralus,\n            theDawnbreaker,\n            theNecroticWake,\n            theStonevault,\n            cinderbrewMeadery,\n            darkflameCleft,\n            prioryOfTheSacredFlame,\n            theRookery,\n            rubyLifePools,\n            azureVault,\n            brackenhideHollow,\n            uldaman,\n            neltharus,\n            algetharAcademy,\n            nokhudOffensive,\n            hallsOfInfusion,\n            darkheartThicket,\n            everbloom,\n            throneOfTheTides,\n            waycrestManor,\n            atalDazar,\n            blackRookHold,\n            vortexPinnacle,\n            underrot,\n            freehold,\n            neltharionsLair,\n            templeOfTheJadeSerpent,\n            courtOfStars,\n            shadowmoonBurialGrounds,\n            hallsOfValor,\n            murozondsRise,\n            galakrondsFall,\n            amidrassil,\n            aberrus,\n            vault,\n        }\n        \n        for i = 1, #zones do\n            local zone = zones[i]\n            \n            for k = 1, #zone do\n                local id = zone[k]\n                modTable.reflectableSpells[id] = true\n            end\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
},
["Time"] = 1727078625,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1797,
["semver"] = "",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "Initialization",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Feature - Custom cast bar coloring:",
["Name"] = "CUSTOM CAST BAR COLORS",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showInterruptColor",
["Value"] = true,
["Name"] = "Enable custom colored enemy cast bars.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Key"] = "showSecondaryInterrupts",
["Value"] = true,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Key"] = "colorInterruptAvailable",
["Value"] = {
1,
0.96078437566757,
0.070588238537312,
1,
},
["Name"] = "Color when my primary interrupt is available.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorInterruptSoon",
["Value"] = {
1,
0.96078437566757,
0.070588238537312,
1,
},
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorNoInterrupt",
["Value"] = {
1,
0.49411767721176,
0.13725490868092,
1,
},
["Name"] = "Color when my primary interrupt is unavailable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Key"] = "colorSecondaryInterrupt",
["Value"] = {
1,
0.0078431377187371,
0.78431379795074,
1,
},
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Key"] = "colorProtected",
["Value"] = {
0.80784320831299,
0.29411765933037,
0.28627452254295,
1,
},
["Name"] = "Color for casts that are protected/un-interruptable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Key"] = "colorTick",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Feature - Show name of target in the cast bar:",
["Name"] = "Settings Target Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTargetName",
["Value"] = true,
["Name"] = "Show the name of cast targets in the cast bar.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "hideNameSolo",
["Value"] = false,
["Name"] = "Hide my name when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "replaceName",
["Value"] = false,
["Name"] = "Show \"Me\" instead of my character name.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Key"] = "castNameSize",
["Value"] = 60,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 5,
["Key"] = "option8",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Name"] = "Settings Border Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Key"] = "nameplateFlash",
["Value"] = false,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Key"] = "hideNameplateFlashSolo",
["Value"] = true,
["Name"] = "Hide flash effect when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Key"] = "hideFlashAsTank",
["Value"] = true,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["Name"] = "Enhanced Castbar - Jundies",
},
},
["auras_per_row_auto"] = false,
["auras_per_row_amount2"] = 2,
["disable_omnicc_on_auras"] = true,
["bossmod_castrename_enabled"] = false,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
},
},
["blizzard_nameplate_large_font_size"] = 9,
["range_check_enabled"] = false,
["indicator_rare"] = false,
["extra_icon_timer_size"] = 11,
["target_highlight_color"] = {
0.9921568627451,
1,
0.97254901960784,
},
["first_run3"] = true,
["extra_icon_stack_outline"] = "OUTLINE",
["resources"] = {
["y_offset"] = 51.58999633789063,
["y_offset_target"] = 0,
["scale"] = 0.75,
},
["click_space"] = {
141,
21,
},
["extra_icon_auras"] = {
328501,
328986,
204490,
"Rescind",
409463,
"Breath of Eons",
278431,
323059,
438706,
372824,
388523,
114404,
22703,
164275,
77505,
255941,
200672,
377014,
451026,
440179,
456235,
273721,
76151,
},
["aura2_grow_direction"] = 3,
["castbar_target_font"] = "1.Gilroy",
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["pet_width_scale"] = 0.99999994039536,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark2",
["version"] = 110,
["health_animation_time_dilatation"] = 1.6699999570847,
["color_override_colors"] = {
[3] = {
0.74509803921569,
0.18823529411765,
0.11372549019608,
},
[4] = {
1,
0.79607850313187,
0.20784315466881,
},
},
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 1.199996948242188,
["range_check_alpha_friendlies"] = 1,
["cast_statusbar_use_fade_effects"] = false,
["target_shady_enabled"] = false,
["aura_stack_color"] = {
nil,
0,
0.062745098039216,
},
["health_statusbar_bgtexture"] = "1.Reee",
["indicator_raidmark_anchor"] = {
["y"] = 7.819999694824219,
["x"] = 0,
["side"] = 12,
},
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.54117647058824,
0.43137254901961,
},
["anothertank"] = {
0.50196078431373,
0.50196078431373,
},
["aggro"] = {
0.74509805440903,
0.18823531270027,
0.11372549831867,
},
["noaggro"] = {
0.8666667342186,
0.43529415130615,
},
["nocombat"] = {
0.74509803921569,
0.18823529411765,
0.11372549019608,
},
["pulling"] = {
nil,
0.91372549019608,
0.22745098039216,
},
},
},
["aura_tracker"] = {
["buff_tracked"] = {
["227931"] = true,
["438706"] = true,
["365338"] = true,
["368364"] = true,
["389808"] = true,
["297133"] = true,
["343502"] = false,
["209859"] = true,
["385528"] = true,
["440177"] = false,
["343503"] = true,
["163689"] = true,
["233210"] = true,
["338510"] = false,
},
["buff"] = {
273607,
283928,
311975,
343208,
197862,
66235,
344548,
189949,
343196,
317929,
259895,
290494,
327993,
322540,
332672,
321708,
305395,
41450,
200327,
290583,
320407,
236801,
194223,
333920,
74001,
212753,
175395,
197874,
200816,
196718,
173898,
315948,
122783,
322108,
343150,
296497,
344363,
205202,
255016,
289626,
337851,
228048,
341857,
23333,
198144,
292152,
321702,
29166,
197061,
215776,
209194,
272682,
212640,
216451,
79542,
187827,
124974,
207812,
212295,
34976,
196555,
129035,
316849,
265314,
69369,
321745,
316828,
278454,
285272,
279043,
203048,
198817,
316834,
344878,
320379,
335255,
231627,
328767,
198111,
125174,
317138,
322110,
284508,
236439,
328682,
325208,
185422,
317138,
213602,
323048,
},
["debuff"] = {
315341,
207756,
280322,
340075,
316220,
280321,
319504,
256495,
190533,
345569,
347037,
},
["debuff_tracked"] = {
["409990"] = true,
["335372"] = false,
["323059"] = false,
},
["debuff_banned"] = {
["353354"] = true,
["444736"] = true,
["461498"] = false,
["444834"] = false,
["374557"] = false,
["331016"] = false,
["392388"] = true,
["443404"] = false,
["458169"] = false,
["295367"] = true,
["204167"] = false,
["331653"] = true,
["424965"] = true,
["453599"] = false,
["370898"] = false,
["417490"] = true,
["394021"] = true,
["394453"] = false,
["394255"] = true,
["273836"] = true,
["452229"] = false,
["314113"] = true,
["294909"] = true,
["281242"] = true,
["206760"] = true,
["443934"] = true,
["279416"] = true,
["390271"] = false,
["321330"] = true,
["294934"] = true,
["388550"] = true,
["324260"] = true,
["204206"] = false,
["426339"] = true,
["391568"] = true,
["454025"] = false,
["356372"] = false,
["360277"] = true,
["403391"] = true,
["345466"] = true,
["382426"] = true,
["378983"] = true,
["211793"] = false,
["255909"] = true,
["389788"] = false,
["354052"] = true,
["461981"] = false,
["5760"] = true,
["356995"] = false,
["410790"] = false,
["397712"] = true,
["455366"] = true,
["429750"] = true,
["381628"] = true,
["420144"] = true,
["256148"] = true,
["397478"] = true,
["204242"] = true,
["457928"] = false,
["449217"] = true,
["205027"] = false,
["358379"] = true,
["394328"] = true,
["356329"] = true,
["169623"] = true,
["286581"] = true,
["463192"] = true,
["406770"] = true,
["244813"] = false,
["443541"] = true,
["373281"] = false,
["392490"] = false,
["6343"] = true,
["352534"] = true,
["269576"] = true,
["457133"] = false,
["377359"] = false,
},
["buff_banned"] = {
["318486"] = true,
["323961"] = true,
["333553"] = true,
["396113"] = true,
["396106"] = true,
["236502"] = true,
["5760"] = true,
["396098"] = true,
["286145"] = true,
["396109"] = true,
["343613"] = false,
["284471"] = true,
["327416"] = false,
["302564"] = true,
["422067"] = false,
["292664"] = true,
["61574"] = true,
["303380"] = true,
["343553"] = true,
["216777"] = true,
["317602"] = true,
["333579"] = true,
["417039"] = false,
["61573"] = true,
["206150"] = true,
["209746"] = true,
["284882"] = true,
["333575"] = true,
["311571"] = true,
["266499"] = true,
["268710"] = true,
},
},
["extra_icon_caster_font"] = "1.Gilroy",
["cast_statusbar_color"] = {
nil,
1,
nil,
1,
},
["update_throttle"] = 0.33000001311302,
["tocversion"] = 110002,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["extra_icon_use_blizzard_border_color"] = false,
["aura_show_debuffs_personal"] = false,
["extra_icon_timer_font"] = "1.Gilroy",
["not_affecting_combat_alpha"] = 1,
["target_highlight_alpha"] = 1,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["extra_icon_show_offensive_border"] = {
nil,
0.65098039215686,
0.10196078431373,
},
["focus_as_target_alpha"] = true,
["aura_sort"] = true,
["hover_highlight_alpha"] = 0.5,
["target_shady_alpha"] = 0,
["cast_statusbar_spark_alpha"] = 1,
["tap_denied_color"] = {
0.46666666666667,
0.46666666666667,
0.46666666666667,
},
["target_highlight_height"] = 10,
["aura_grow_direction"] = 1,
["last_news_time"] = 1726162226,
["show_health_prediction"] = false,
["aura_width2"] = 19,
["health_statusbar_bgcolor"] = {
0.21176472306252,
0.21176472306252,
0.21176472306252,
1,
},
["show_healthbars_on_softinteract"] = false,
["castbar_target_anchor"] = {
["y"] = -1.5,
["x"] = -13,
},
["extra_icon_auras_mine"] = {
["Plague Bomb"] = false,
["209859"] = false,
["Serrated Bone Spike"] = true,
["Violent Detonation"] = false,
},
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Unit - Show Energy"] = 11,
["Blink by Time Left"] = 1,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Cast - Shining Green [P]"] = 3,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - On Going Cast [P]"] = 2,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Fixate"] = 11,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Voidzone [P]"] = 2,
["Add - Tag Number [P]"] = 2,
["Unit Power"] = 1,
["Cast - AoE With Range [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Cast - Stop Casting"] = 4,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Very Important"] = 15,
["Cast - Important Target [P]"] = 2,
["Spiteful Affix"] = 3,
["Cast - Quick Flash"] = 2,
["Auto Set Skull"] = 11,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Add - Warning [P]"] = 5,
["Cast - Watch Step [P]"] = 1,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Important by Color [P]"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Aura - Buff Alert"] = 15,
["Color Change"] = 1,
["Cast - AoE Hit All [P]"] = 3,
["Add - Non Elite Trash [P]"] = 4,
["Unit - Important"] = 11,
["Aura Border Color"] = 1,
["Countdown"] = 11,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Tank Interrupt"] = 12,
["Cast - Glowing [P]"] = 10,
["Explosion Affix M+"] = 14,
["Fixate On You"] = 11,
},
["cast_statusbar_color_interrupted"] = {
0.8,
0.30196078431373,
0.30196078431373,
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 9,
["cast_statusbar_texture"] = "1.Reee",
["number_region_first_run"] = true,
["indicator_elite"] = false,
["indicator_faction"] = false,
["aura_show_enrage"] = true,
["aura_width"] = 19,
["auto_toggle_stacking"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
["dps"] = {
["colors"] = {
["notontank"] = {
0.50196078431373,
0.50196078431373,
},
["aggro"] = {
0.86666666666667,
0.43529411764706,
},
["noaggro"] = {
0.74509805440903,
0.18823531270027,
0.11372549831867,
},
},
},
["castbar_target_text_size"] = 9,
["patch_version"] = 37,
["target_shady_combat_only"] = false,
["range_check_cast_bar_alpha"] = 0.8999999761581421,
["extra_icon_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\cooldown_edge_1",
["extra_icon_show_purge_border"] = {
nil,
0.92549019607843,
},
["auto_toggle_friendly_enabled"] = true,
["cast_statusbar_spark_width"] = 8,
["auto_toggle_enemy"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
},
["Quazii TWW Plater S1"] = {
["plater_resources_show_depleted"] = false,
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734826,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["Revision"] = 663,
["semver"] = "",
["Name"] = "Cast - Small Alert [Plater]",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["SpellIds"] = {
376851,
396044,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
377991,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
},
["PlaterCore"] = 1,
["Enabled"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1711469681,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 112,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Prio"] = 99,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
["PlaterCore"] = 1,
["SpellIds"] = {
261265,
261266,
271590,
},
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["Enabled"] = true,
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1711469713,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "Add the buff name in the trigger box.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 635,
["semver"] = "",
["Name"] = "Aura - Buff Alert [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
398151,
375596,
377738,
378149,
},
["PlaterCore"] = 1,
["Enabled"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
["castBarColor"] = {
0.4117647058823529,
1,
0,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1702402951,
["semver"] = "",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Enabled"] = false,
["Revision"] = 838,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
387145,
384365,
152964,
398150,
152801,
397878,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
253517,
377488,
},
["Prio"] = 91,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Name"] = "Cast - Very Important [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1711469714,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 371,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["SpellIds"] = {
},
["Author"] = "Tercioo-Sylvanas",
["Prio"] = 99,
["Desc"] = "Add the debuff name in the trigger box.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
["animSpeed"] = 0.199999988079071,
["arrowAlpha"] = 1,
["desaturateArrow"] = false,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1726216146,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Revision"] = 917,
["semver"] = "",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Name"] = "Quazii FRONTALS",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
426893,
427616,
445457,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
427869,
},
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Icon"] = 1958262,
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 269,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["Icon"] = 1029718,
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Fixate [Plater]",
["SpellIds"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1711469721,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["Icon"] = 136048,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 140,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Prio"] = 99,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Name"] = "UnitPower [Plater]",
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Desc"] = "Show the energy amount above the nameplate",
["Enabled"] = true,
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1721885424,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = false,
["Revision"] = 268,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["version"] = -1,
["Author"] = "Tecno-Azralon",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["Name"] = "Fixate On You [Plater]",
["Prio"] = 99,
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Options"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Time"] = 1541606626,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["Icon"] = "INTERFACE\\ICONS\\Achievement_PVP_P_01",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 45,
["Options"] = {
},
["Author"] = "抹了油的大叔-白银之手",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Name"] = "NameplaterColor with Special Buff ID",
["PlaterCore"] = 1,
["NpcNames"] = {
},
["Enabled"] = false,
["Desc"] = "NameplaterColor with Special Buff ID",
["SpellIds"] = {
277242,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castBarHeight"] = 6,
["useNameplateColor"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1721885422,
["semver"] = "",
["url"] = "",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["Enabled"] = false,
["Revision"] = 551,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
273577,
382712,
389446,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Explosion Affix M+ [Plater]",
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Icon"] = 2175503,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Time"] = 1694734704,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["NpcNames"] = {
"141851",
},
["Enabled"] = false,
["Revision"] = 72,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a unitID or unit name in 'Add Trigger' entry. See the constructor script for options.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Color Change [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["Icon"] = 135024,
},
{
["ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Time"] = 1620152446,
["Temp_ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 48,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a border to an aura icon. Add the aura into the Add Trigger entry. You can customize the icon color at the constructor script.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Border Color [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["Icon"] = 133006,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 375,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeleftToBlink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkSpeed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkMaxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftWarning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftCritical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["Name"] = "Aura - Blink by Time Left [Plater]",
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local isTanking = UnitDetailedThreatSituation (\"player\", unitId)\n    if (not isTanking) then \n        Plater.SetNameplateColor (unitFrame, \"pink\") \n    end\n    \nend\n\n\n\n\n",
["Time"] = 1550589160,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
"surf darter",
},
["Temp_OnHideCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["Revision"] = 5,
["Options"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local isTanking = UnitDetailedThreatSituation (\"player\", unitId)\n    if (not isTanking) then \n        Plater.SetNameplateColor (unitFrame, \"pink\") \n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Enabled"] = false,
["OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["Name"] = "New Script",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1721885421,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 1385,
["Options"] = {
},
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Prio"] = 99,
["SpellIds"] = {
258153,
258313,
274569,
278020,
261635,
272700,
268030,
265368,
264520,
265407,
278567,
278602,
258128,
257791,
258938,
265089,
272183,
256060,
257397,
269972,
270901,
270492,
263215,
268797,
262554,
255041,
252781,
250368,
258777,
278504,
266106,
257732,
268309,
269302,
263202,
257784,
278755,
272180,
263066,
267273,
265912,
274438,
268317,
268375,
276767,
264105,
265876,
270464,
278961,
265468,
256897,
280604,
268702,
255824,
253583,
250096,
278456,
262092,
257270,
267818,
265091,
262540,
263318,
263959,
257069,
256849,
267459,
253544,
268008,
267981,
272659,
264396,
257736,
264390,
257426,
274400,
272609,
269843,
269029,
272827,
269266,
263912,
264923,
258864,
256955,
265540,
260793,
270003,
270507,
257337,
268415,
275907,
268865,
260669,
260280,
253239,
265541,
250258,
256709,
277596,
276268,
265372,
263905,
265781,
257170,
268846,
270514,
258622,
258199,
256627,
257870,
259711,
258917,
263891,
268027,
268348,
269313,
272711,
271174,
268260,
269399,
268239,
264574,
261563,
257288,
257757,
267899,
255741,
264757,
260894,
263583,
276292,
272874,
264101,
264407,
271456,
262515,
275192,
270084,
257785,
267237,
266951,
267433,
255577,
255371,
270891,
267357,
258338,
257169,
270927,
273995,
260926,
264027,
267257,
253721,
265019,
260924,
263309,
266206,
268187,
260067,
274507,
276068,
263278,
258317,
256594,
268391,
268230,
260852,
267763,
268706,
264734,
288693,
288694,
270590,
290787,
72286,
},
["PlaterCore"] = 1,
["Name"] = "M+ Important Spells [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "INTERFACE\\ICONS\\Spell_Fire_FelFlameStrike",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734765,
["semver"] = "",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 695,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
211464,
361180,
156718,
358320,
386757,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
426905,
253544,
},
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Name"] = "Cast - Ultra Important [P]",
["PlaterCore"] = 1,
["Enabled"] = false,
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1694734910,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Desc"] = "Auto set skull marker",
["Enabled"] = false,
["Revision"] = 67,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Name"] = "Auto Set Skull",
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1694734694,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["Enabled"] = false,
["Revision"] = 212,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Countdown",
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1721885435,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["Icon"] = 136048,
["Desc"] = "Show the energy amount above the nameplate.",
["Enabled"] = true,
["Revision"] = 246,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Name"] = "Unit - Show Energy [Plater]",
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["timerList"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1694734898,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = false,
["Revision"] = 1216,
["semver"] = "",
["SpellIds"] = {
},
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Alert + Timer [P]",
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734852,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["NpcNames"] = {
},
["Desc"] = "Highlight the target name",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["Revision"] = 885,
["semver"] = "",
["Name"] = "Cast - Important Target [P]",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Enabled"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 33,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["Name"] = "Fixate by Unit Buff [P]",
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734860,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Revision"] = 549,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["Name"] = "Cast - Glowing [P]",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["SpellIds"] = {
376644,
386781,
384823,
385536,
392398,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
373201,
384353,
265376,
193941,
411002,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Enabled"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1694734866,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["Icon"] = 134229,
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["Revision"] = 39,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
191284,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Cast - Effect After Cast [P]",
["PlaterCore"] = 1,
["Enabled"] = false,
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1694734891,
["semver"] = "",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["Revision"] = 163,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.15,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "rotationDuration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.3,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureScale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
},
["Prio"] = 99,
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Name"] = "Cast - Circle AoE [P]",
["Temp_UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["version"] = -1,
["PlaterCore"] = 1,
["Enabled"] = false,
["NpcNames"] = {
},
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = false,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
194745,
190426,
},
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Nameplate Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameplateSizeOffset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Name"] = "Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullAlpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Key"] = "skullScale",
["Value"] = 0.6,
["Name"] = "Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["Name"] = "Add - Important [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["Name"] = "Add - Tag Number [P]",
["PlaterCore"] = 1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1694734836,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "Play a very fast flash when the cast start",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["Revision"] = 888,
["semver"] = "",
["Name"] = "Cast - Quick Flash [P]",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
392640,
397888,
381517,
209033,
385029,
374563,
377341,
369675,
369411,
278961,
202108,
88186,
},
["PlaterCore"] = 1,
["Enabled"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
["npcColor"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1721885429,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = false,
["Revision"] = 163,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["Name"] = "Add - Warning [P]",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1694740636,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["Icon"] = "interface/addons/plater/media/duck_64",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["Revision"] = 113,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Key"] = "scale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Scale",
},
},
["SpellIds"] = {
},
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["Name"] = "Add - Non Elite Trash [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Enabled"] = false,
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1721885427,
["Options"] = {
},
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["Revision"] = 103,
["semver"] = "",
["Name"] = "Cast - Shield Interrupt [P]",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
373688,
391050,
},
["PlaterCore"] = 1,
["Enabled"] = false,
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734893,
["semver"] = "",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["Revision"] = 508,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["Name"] = "Cast - Stop Casting [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Enabled"] = false,
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
},
["Enabled"] = false,
["Revision"] = 106,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["Icon"] = "interface/addons/plater/media/radio_64",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "",
["Name"] = "Add - Explode on Die [P]",
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1721885432,
["Options"] = {
},
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["Enabled"] = true,
["Revision"] = 25,
["semver"] = "",
["SpellIds"] = {
372743,
372749,
384933,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Aura While Casting [P]",
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["Icon"] = 236209,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734841,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["Icon"] = 4038101,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["Revision"] = 74,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Name"] = "Dots X Offset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Fraction"] = true,
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Min Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Max Alpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "maxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["Name"] = "Cast - On Going Cast [P]",
["Prio"] = 99,
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["SpellIds"] = {
388886,
209676,
377912,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Enabled"] = false,
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1726635479,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 1673,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Prio"] = 99,
["Name"] = "Quazii MUST INTERRUPT",
["PlaterCore"] = 1,
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
215433,
392924,
397889,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
450756,
451097,
431333,
426283,
449455,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
424419,
424420,
423051,
444743,
437721,
440687,
441627,
430805,
432959,
426295,
426145,
427157,
448248,
334748,
442210,
338353,
328667,
},
["Icon"] = 1305153,
["UID"] = "0x6602f3de1af11f4f",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = false,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 6,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Important by Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = false,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Shining Green [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = false,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 1,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Special Ability [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = false,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Heroic Leap [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = false,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Key"] = "sparkWithScale",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Width Scale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Spark Height Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkHeightScale",
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Spark Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = false,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Heal Stun [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = false,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.05,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.9,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE Hit All [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = false,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Debuff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Desc"] = "Play a very fast flash when the cast start.",
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Key"] = "shakeAmplitude",
["Value"] = 25,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 30,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["version"] = -1,
["Name"] = "Cast - Simple Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = false,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ongoing Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = false,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Cut [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = false,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Voidzone [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = false,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.2,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 0.3,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE With Range [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = false,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.73,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Name"] = "Animation Speed",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["Desc"] = "Show a castbar for the aura duration.",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura - Is Cast Bar [P]",
["NpcNames"] = {
},
},
},
["blizzard_nameplate_large_font"] = "1.Gilroy",
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater.lua:1581",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater.lua:1581",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater.lua:1581",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateTargetRadialPosition"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriends"] = "Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua:72",
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater.lua:1581",
},
["url"] = "https://wago.io/kvgdjO6_L/3",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.02081192471087,
["indicator_raidmark_scale"] = 0.5,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["aura2_y_offset"] = 0,
["extra_icon_caster_size"] = 10,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "1.Gilroy",
["spellpercent_text_font"] = "1.Gilroy",
["power_percent_text_size"] = 10,
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["power_percent_text_enabled"] = false,
["power_percent_text_color"] = {
1,
1,
1,
},
["spellname_text_font"] = "1.Gilroy",
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "1.Gilroy",
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "1.Gilroy",
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "1.Gilroy",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
nil,
4,
},
["only_thename"] = true,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "1.Gilroy",
["mana"] = {
nil,
4,
},
["big_actortitle_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["percent_text_font"] = "1.Gilroy",
["percent_text_outline"] = "NONE",
["quest_enabled"] = true,
["actorname_text_font"] = "1.Gilroy",
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["health_incombat"] = {
120,
12,
},
["health"] = {
120,
12,
},
["percent_show_health"] = true,
["big_actorname_text_font"] = "Accidental Presidency",
["percent_text_enabled"] = true,
["actorname_use_friends_color"] = false,
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["quest_color_enemy"] = {
1,
0.369,
0,
},
["spellpercent_text_font"] = "1.Gilroy",
["big_actortitle_text_font"] = "1.Gilroy",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["cast_incombat"] = {
nil,
1,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "1.Gilroy",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "1.Gilroy",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "1.Gilroy",
["percent_text_outline"] = "NONE",
["big_actorname_text_size"] = 10,
["percent_show_health"] = true,
["actorname_text_font"] = "1.Gilroy",
["health_incombat"] = {
100,
1,
},
["health"] = {
100,
1,
},
["power_percent_text_font"] = "Accidental Presidency",
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 10,
["big_actorname_text_font"] = "1.Gilroy",
["level_text_enabled"] = true,
},
["enemynpc"] = {
["spellpercent_text_font"] = "ViklunD's SexFont",
["level_text_size"] = 10,
["big_actortitle_text_font"] = "1.Gilroy",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 10,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 0.4000015258789063,
["side"] = 5,
},
["level_text_font"] = "1.Gilroy",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "1.Gilroy",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 1,
["side"] = 3,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "1.Gilroy",
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["spellname_text_font"] = "1.Gilroy",
["actorname_text_font"] = "1.Gilroy",
["percent_show_health"] = false,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 10,
["health"] = {
120,
},
["power_percent_text_font"] = "Accidental Presidency",
["health_incombat"] = {
nil,
12,
},
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_enabled"] = false,
},
["global_health_width"] = 120,
["enemyplayer"] = {
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["spellpercent_text_font"] = "ViklunD's SexFont",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["level_text_font"] = "1.Gilroy",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
120,
1,
},
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["all_names"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "1.Gilroy",
["actorname_text_size"] = 10,
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["big_actortitle_text_size"] = 10,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "1.Gilroy",
["power_percent_text_font"] = "Accidental Presidency",
["percent_show_percent"] = false,
["quest_enabled"] = true,
["quest_color_enabled"] = true,
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
12,
},
["health"] = {
120,
},
["actorname_text_font"] = "1.Gilroy",
["level_text_alpha"] = 0.2999999821186066,
["big_actorname_text_size"] = 10,
["mana"] = {
120,
1,
},
["level_text_enabled"] = false,
},
["global_health_height"] = 12,
},
["health_selection_overlay"] = "1.Reee",
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["first_run2"] = true,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["aura_show_tooltip"] = true,
["resources_settings"] = {
["chr"] = {
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-5764-000166DE"] = "HolyPower",
["Player-4184-00949549"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-4609-0014C179"] = "HolyPower",
["Player-3391-0CE9D30D"] = "Runes",
["Player-4184-00949207"] = "HolyPower",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-4184-009493C8"] = "Runes",
["Player-5764-000944AE"] = "Chi",
["Player-11-0E532B0D"] = "Chi",
["Player-3296-009336A2"] = "HolyPower",
["Player-5764-0002671B"] = "HolyPower",
["Player-11-0E532B15"] = "HolyPower",
["Player-11-0E532B17"] = "ComboPoints",
["Player-3725-0A9FE377"] = "Chi",
["Player-4609-0014B1D9"] = "Essence",
["Player-4184-00948CDA"] = "Chi",
},
},
["health_animation_time_dilatation"] = 2.869999885559082,
["npc_cache"] = {
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[223541] = {
"Stolen Loader",
"Mycomancer Cavern",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[219454] = {
"Crazed Abomination",
"The Underkeep",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Mycomancer Cavern",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Mycomancer Cavern",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[133436] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[136005] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[136006] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[217208] = {
"Zekvir",
"Mycomancer Cavern",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[138063] = {
"Posh Vacationer",
"The MOTHERLODE!!",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[138064] = {
"Posh Vacationer",
"The MOTHERLODE!!",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[133593] = {
"Expert Technician",
"The MOTHERLODE!!",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[133345] = {
"Feckless Assistant",
"The MOTHERLODE!!",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[220314] = {
"Bogpiper",
"Mycomancer Cavern",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
},
[207459] = {
"Fungal Rotcaster",
"Mycomancer Cavern",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[207468] = {
"Gnarled Reviver",
"Mycomancer Cavern",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[137713] = {
"Big Money Crab",
"The MOTHERLODE!!",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
},
["aura_cooldown_reverse"] = false,
["health_selection_overlay_alpha"] = 0.2999999821186066,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 10,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Name"] = "Attacking Specific Unit [Plater]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["Enabled"] = false,
["Revision"] = 95,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["HooksTemp"] = {
},
["Name"] = "Hide Neutral Units [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450458,
["Icon"] = 1990989,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 185,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["HooksTemp"] = {
},
["Name"] = "Players Targeting a Target [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825362,
["Icon"] = 1966587,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 94,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1613211428,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Current Target Color [Plater]",
["Icon"] = 878211,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Name"] = "Combo Points [Plater]",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["Enabled"] = false,
["Revision"] = 197,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled and unitFrame.ActorType == \"enemyplayer\") then\n        \n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n        \n    else\n        envTable.BorderFrame:Hide() \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1613211728,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Extra Border [Plater]",
["Icon"] = 133689,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1722754264,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 94,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Reorder Nameplate [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 107,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["HooksTemp"] = {
},
["Name"] = "Color Automation [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825317,
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 139,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ahwa-Azralon",
["Desc"] = "Adds extra effects to execute range and allow to setup two execute ranges for classes with execute when the unit has almost full healh. See the constructor script for options.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        local percent = healthBar.CurrentHealth / healthBar.CurrentHealthMax\n        \n        if (percent <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.ExecutePercent)\n            envTable.InExecuteRange = true\n            \n        elseif (percent < envTable.SecondRangeStart and percent >= envTable.SecondRangeEnd) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.SecondRangeEnd)\n            envTable.InExecuteRange = true\n            \n        else\n            if (envTable.InExecuteRange) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                Plater.RefreshNameplateColor (unitFrame)\n                Plater.SetBorderColor (unitFrame)\n                envTable.InExecuteRange = false\n            end\n        end\n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame, 0)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = true\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --second execute range (UseCustomExecutePercent must be enabled)\n    envTable.SecondRangeStart = 0.999\n    envTable.SecondRangeEnd = 0.8\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame, divisorPercent)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * divisorPercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Advanced Execute Range",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825289,
["Icon"] = 135358,
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1699162519,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 360,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Aura Reorder [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 237,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["Options"] = {
},
["Desc"] = "Script for the Jaina encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Unexploded Ordinance\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.UnexplodedOrdinance) then\n        \n        --make the life percent be bigger than the regular size\n        --so it's better to see the health percent of the barrel\n        local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n        Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize + envTable.UnexplodedOrdinanceTextSizeIncrease)\n    end\n    \n    if (envTable.IncreaseSize [unitFrame.namePlateNpcId]) then\n        local currentHeight = unitFrame.healthBar:GetHeight()\n        Plater.SetNameplateSize (unitFrame, nil, currentHeight + envTable.IncreaseSize [unitFrame.namePlateNpcId])\n    end\n    \nend\n\n\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame, nil, envTable.UnexplodedOrdinanceCastBarHeight)\n        Plater:SetFontSize (unitFrame.castBar.percentText, envTable.UnexplodedOrdinanceTimerSize)\n    end\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the health percent text size\n    local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n    Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Override the color\n    if (envTable.Colors [unitFrame.namePlateNpcId]) then\n        Plater.SetNameplateColor (unitFrame, envTable.Colors [unitFrame.namePlateNpcId])\n    end    \n    \n    --Show the name of the unit in the Ice Block nameplate\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.IceBlock) then\n        --find which player this block are holding\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i\n            if (UnitExists (unit)) then\n                for debuffId = 1, 40 do\n                    local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (unit, debuffId)\n                    \n                    --cancel the loop if there's no more debuffs on the player\n                    if (not name) then \n                        break \n                    end                    \n                    \n                    --check if who casted this debuff is the unit shown on this nameplate\n                    if (UnitIsUnit (caster or \"\", unitId)) then\n                        local unitName = UnitName (unit)\n                        \n                        --color the text by the class\n                        unitName = Plater.SetTextColorByClass (unit, unitName)\n                        \n                        --add the role icon\n                        if (Details) then\n                            local role = UnitGroupRolesAssigned (unit)\n                            unitName = Details:AddRoleIcon (unitName, role, 12)\n                        end\n                        \n                        unitFrame.unitName:SetText (unitName)\n                        unitFrame.castBar.Text:SetText (unitName)\n                        break\n                    end\n                    \n                end\n            else\n                break\n            end\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame)\n        Plater:SetFontSize (unitFrame.castBar.percentText, Plater.db.profile.plate_config.enemynpc.spellpercent_text_size)\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors [148631] = \"orange\" --Unexploded Ordinance\n    envTable.Colors [148522] = \"white\" --Ice Block\n    \n    --increase the nameplate height for these units\n    envTable.IncreaseSize = {}\n    envTable.IncreaseSize [148522] = 4 --Ice Block (increase in 4 pixels)\n    \n    --increase the size of the life percent for the nameplate of the barrel\n    envTable.UnexplodedOrdinanceTextSizeIncrease = 3\n    \n    --increase the castbar size for the unexploded ordinance explosion cast\n    envTable.UnexplodedOrdinanceCast = true\n    envTable.UnexplodedOrdinanceSpellID = 288221 --12058 --(debug)\n    envTable.UnexplodedOrdinanceCastBarHeight = 18\n    envTable.UnexplodedOrdinanceTimerSize = 18\n    \n    --npcIDs\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.UnexplodedOrdinance = 148631\n    envTable.NpcIDs.IceBlock = 148522\nend\n\n--tests 126023 --harbor saurid - dazar'alor harbor\n--tests 3127 venomtail scorpid - durotar\n--tests 12058 dustwind storm witch - durotar\n--Load Condition: EncounterID 2281\n\n\n",
},
["Prio"] = 99,
["Time"] = 1723224887,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2281,
["Enabled"] = true,
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Jaina Encounter [Plater]",
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_jaina",
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 81,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Script for Stormwall Blockade encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.Colors.TemptingSiren) then\n            Plater.SetNameplateColor (unitFrame, envTable.Colors.TemptingSiren)\n        end\n        \n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.NameplateHeight.TemptingSiren) then\n            \n            Plater.SetNameplateSize (unitFrame, nil, envTable.NameplateHeight.TemptingSiren)\n            \n        end\n        \n    end    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors.TemptingSiren = \"orange\"\n    \n    --npcID\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.TemptingSiren = 146436\n    \n    --nameplate height for each unit\n    envTable.NameplateHeight = {}\n    envTable.NameplateHeight.TemptingSiren = 18\n    \n    \n    \nend\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Stormwall Encounter [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2280,
["Enabled"] = true,
},
["affix"] = {
},
},
["Time"] = 1551887545,
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_stormwall_blockade",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 58,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Herith�gue-Proudmoore",
["Desc"] = "Change the border of the focus target.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.BorderThickness = 3\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.UpdateBorder (unitFrame, unit)\n        local plateFrame = unitFrame:GetParent()\n        \n        if (UnitIsUnit (\"focus\", unit)) then\n            Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            local borderSize = envTable.BorderThickness\n            unitFrame.healthBar.border:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.border:UpdateSizes()        \n            \n        else\n            Plater.SetBorderColor (unitFrame)\n            Plater.UpdatePlateBorderThickness (unitFrame.PlateFrame)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend\n\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Focus Target Border",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1552962607,
["Icon"] = 133006,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 48,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end    \n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Don't Have Aura [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1613211434,
["Icon"] = 136207,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 55,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Tint nameplates of Reaping Soul units (Mythic Dungeon Affix) depending on its target and role of the player",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --can detect the reaping souls aggro?\n    if (envTable.detectAggro and Plater.IsInCombat()) then\n        \n        --is this npc a reaping soul?\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            \n            --check if the mob is attacking the player\n            if (UnitIsUnit (unitFrame.targetUnitID, \"player\")) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateAggroColor)\n                \n            else\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateNoAggroColor)\n            end\n            \n        end\n        \n    end\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when the nameplate is added and the npcID matches, cache the color for the nameplate\n    if (envTable.detectAggro) then\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            local profile = Plater.db.profile\n            local role = Plater:GetPlayerRole()\n            \n            if (role == \"TANK\") then\n                envTable.NameplateAggroColor = profile.tank.colors.aggro\n                envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            else\n                envTable.NameplateAggroColor = profile.dps.colors.aggro\n                envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            end\n            \n        end\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --npcs affected by this script\n    \n    envTable.npcIDs = {\n        [148716] = true, --risen soul\n        [148893] = true, --tormented soul\n        [148894] = true, --lost soul\n        \n        [127278] = true, --skittering feeder (tests and debug, also need to disable the load conditions)\n    }\n    \n    --detect aggro, if true it will see which group member the soul is attacking and override the color\n    envTable.detectAggro = true\n    \n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1579030189,
["PlaterCore"] = 1,
["LastHookEdited"] = "Constructor",
["Name"] = "M+ Bwonsamdi Reaping",
["Icon"] = 2446016,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
["Enabled"] = true,
["117"] = true,
},
},
},
{
["Enabled"] = false,
["Revision"] = 36,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show the name of the unit current target ",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --max length of the text\n    envTable.TextMaxLength = 100\n    \n    --update the spell name text\n    function envTable.UpdateSpellNameText (unitFrame)\n        \n        local castBar = unitFrame.castBar\n        local textString = castBar.Text\n        local spellName = castBar.SpellName\n        \n        if (unitFrame.targetUnitID) then\n            local targetName = UnitName (unitFrame.targetUnitID)\n            \n            if (targetName) then\n                textString:SetText (spellName .. \" > \" .. targetName) \n                \n                if (envTable.TextMaxLength) then\n                    Plater.LimitTextSize (textString, envTable.TextMaxLength)\n                end\n                \n            else\n                textString:SetText (spellName)\n            end\n        else\n            textString:SetText (spellName)\n        end\n    end\nend",
},
["Prio"] = 99,
["Time"] = 1620347099,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Target",
["Icon"] = 413580,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 43,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Only show nameplates while in combat, see the constructor for more options.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Zone Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckIfCanShowNameplate (unitFrame)\n        if (Plater.IsInCombat()) then\n            \n            if (not unitFrame.healthBar:IsShown()) then\n                Plater.ShowHealthBar (unitFrame)\n                Plater.EnableHighlight (unitFrame)\n            end\n            \n        else\n            \n            if (unitFrame.healthBar:IsShown()) then\n                Plater.HideHealthBar (unitFrame)\n                Plater.DisableHighlight (unitFrame)\n            end\n            \n        end        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Only in Combat",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825361,
["Icon"] = 135473,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 35,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Add an exclamation icon on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local npcColor = Plater.GetNpcColor (unitFrame)\n    if (npcColor) then\n        unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n        unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)        \n        unitFrame.NpcColorCodeTexture:Show()\n        \n    else\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.IconTexture = [[Interface\\AddOns\\Plater\\media\\exclamation_64]]\n    envTable.Alpha = 0.8\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetTexture (envTable.IconTexture)\n        \n        --texture side | anchor to which frame | frame side | x offset | y offset\n        unitFrame.NpcColorCodeTexture:SetPoint (\"right\", unitFrame.healthBar, \"right\", -2, 0)\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Npc Colors Icon",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450716,
["Icon"] = "Interface\\AddOns\\Plater\\media\\exclamation_64",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 68,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a color tag on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateColorTag (unitFrame)   \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateTexture (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Alpha = 0.75\n    \n    envTable.Anchor = {\n        side = 11, --right side inside the nameplate\n        x = -3,\n        y = 0\n    }\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetColorTexture (1, 1, 1, 1)\n        \n    end\n    \n    function  envTable.UpdateColorTag (unitFrame)\n        local npcColor = Plater.GetNpcColor (unitFrame)\n        if (npcColor) then\n            unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n            unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)           \n            unitFrame.NpcColorCodeTexture:Show()        \n        end\n    end\n    \n    function  envTable.UpdateTexture (unitFrame)\n        Plater.SetAnchor (unitFrame.NpcColorCodeTexture, envTable.Anchor)\n        unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight() - 4, unitFrame.healthBar:GetHeight() - 4)\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n        envTable.UpdateColorTag (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Npc Colors Tag",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450705,
["Icon"] = "Interface\\AddOns\\Plater\\media\\radio_64",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 44,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Change the color of the aura timer by it's time left",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auras = unitFrame.BuffFrame.PlaterBuffList\n    \n    for _, auraIcon in ipairs (auras) do\n        if (auraIcon:IsVisible()) then\n            if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                \n            elseif (auraIcon.RemainingTime < envTable.Timers.warning) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.warning)\n                \n            else\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n            end \n        end\n        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"red\",\n        warning = \"yellow\",\n        okay = \"white\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 4.9,\n        warning = 8,\n    }\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1613211753,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Paint Aura Timers",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 130,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "????????-Illidan",
["Options"] = {
},
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Name"] = "Advanced Debuff Border",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1722754264,
["Icon"] = 133006,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 35,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Show yellow star for elite; Silver star for rares",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.UpdateIndicator (unitFrame, unitId)\n        local unitClassification = UnitClassification (unitId)\n        local unitName = UnitName (unitId)\n        unitName = unitName or UNKNOWN\n        \n        if (unitClassification == \"rareelite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. \"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t \" .. unitName)\n            \n        elseif (unitClassification == \"rare\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. unitName)\n            \n        elseif (unitClassification == \"elite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t\" .. unitName)\n            \n        end\n    end\n    \nend\n\n\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Rarity in the Name",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825364,
["Icon"] = "Interface\\AddOns\\Plater\\media\\star_full_64",
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 77,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Cyclopes-Turalyon",
["Options"] = {
},
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 99,
["Name"] = "Aggro Indicator",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1711787342,
["Icon"] = 132344,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 20,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Edit the Constructor script setting the font you want in the FONT = \"\", then /reload.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --added this event just to run the constructor script\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert here the font you want to change then /reeload\n    --after the reload, check if the font has changed and disable this script\n    \n    local FONT = \"Accidental Presidency\"\n    \n    local profile = Plater.db.profile\n    local actorTables = profile.plate_config\n    \n    for plateType, plateTable in pairs (actorTables) do\n        \n        plateTable.actorname_text_font = FONT\n        plateTable.spellname_text_font = FONT\n        plateTable.spellpercent_text_font = FONT\n        plateTable.level_text_font = FONT\n        plateTable.percent_text_font = FONT\n        plateTable.big_actortitle_text_font = FONT\n        plateTable.big_actorname_text_font = FONT\n        plateTable.power_percent_text_font = FONT\n        \n    end\n    \n    profile.castbar_target_font = FONT\n    profile.aura_timer_text_font = FONT    \n    profile.aura_stack_font = FONT    \n    \nend\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Change All Fonts",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825316,
["Icon"] = 134331,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 50,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the power bar for specific units",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\") then\n        \n        local arenaEnemies = GetNumArenaOpponentSpecs()\n        local found = false\n        for i = 1, arenaEnemies do\n            local guid = UnitGUID (\"arena\" .. i)\n            print (guid)\n            if (guid == unitFrame.namePlateUnitGUID) then\n                \n                local spec = GetArenaOpponentSpec (i)\n                print (spec)\n                if (spec) then\n                    local id, name, description, icon, role, class = GetSpecializationInfoByID (spec)\n                    print (name)\n                    if (role == \"HEALER\") then\n                        envTable.UpdatePowerBar (unitFrame)\n                    end\n                    print (role)\n                end\n                \n                break\n            end\n        end\n        \n        return\n    end\n    \n    --show for enemy players\n    if (unitFrame.ActorType == \"enemyplayer\") then\n        envTable.UpdatePowerBar (unitFrame)\n        return\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.PowerBarAnchor = {side = 4, x = 0, y = -10}\n    \n    function envTable.UpdatePowerBar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        Plater.SetAnchor (unitFrame.powerBar, envTable.PowerBarAnchor)\n        \n    end\n    \nend\n\n\n",
},
["LastHookEdited"] = "Constructor",
["Name"] = "Power Bar",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450521,
["Icon"] = 1375677,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 140,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["Options"] = {
},
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = true\n    --anchor icon on what side\n    envTable.IconAnchor = \"left\" --accep 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 1\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = false\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", -1, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 1, 0)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\nend",
},
["Prio"] = 99,
["Name"] = "Cast Icon Anchor",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1620346604,
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 65,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar spell icon.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.castBar.IconOverlayFrame) then\n        unitFrame.castBar.IconOverlayFrame:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.AnchorSide = \"left\"\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.BuildFrames (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.IconBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.IconBorder:SetBorderSizes (size, size, size, size)\n        castBar.IconBorder:UpdateSizes()\n        \n        local icon = castBar.Icon\n        if (envTable.AnchorSide == \"left\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, 0)\n            icon:SetPoint (\"bottomright\", castBar, \"bottomleft\", -1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        elseif (envTable.AnchorSide == \"right\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, 0)\n            icon:SetPoint (\"bottomleft\", castBar, \"bottomright\", 1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        end\n        \n        icon:Show()\n        castBar.IconOverlayFrame:Show()\n    end\n    \n    if (not unitFrame.castBar.IconOverlayFrame) then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n    end    \n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Icon Border",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1620346604,
["Icon"] = 133004,
["PlaterCore"] = 1,
},
{
["Enabled"] = true,
["Revision"] = 98,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1699163950,
["Icon"] = 133004,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 46,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "????????-Illidan",
["OptionsValues"] = {
},
["Desc"] = "Debuff timer show decimal values",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then\n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then            \n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end        \n    end    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --minimum time left to take effect\n    envTable.MinTime = 9.999\n    \nend",
},
["Prio"] = 99,
["Time"] = 1613211431,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Decimal Debuff Timer",
["Icon"] = 609811,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 86,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "?????-Illidan",
["Options"] = {
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Name"] = "Buff Special Mod",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1699162520,
["Icon"] = 136139,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 29,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Adds two arrows into the target indicators options.",
["Hooks"] = {
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --after editing this script, save it and /reload\n    \n    --adds two target indicators in arrow format\n    --to change the texture you may replace the path with another texture path\n    --or you can copy and paste more options here\n    \n    Plater.TargetIndicators    [\"SmallArrow\"] = {\n        path = [[Interface\\MONEYFRAME\\Arrow-Right-Up]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 12,\n        height = 12,\n        x = 8,\n        y = 0,\n        blend = \"ADD\",\n    }\n    \n    Plater.TargetIndicators    [\"BigArrow\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 18,\n        height = 16,\n        x = 24,\n        y = 0,\n        blend = \"ADD\",\n        color = \"yellow\",\n    }\n    \n    \n    \nend\n\n\n",
},
["LastHookEdited"] = "Player Talent Update",
["Name"] = "Arrow Target Indicators",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551887544,
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_right_64",
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 12,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["Options"] = {
},
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Unit Name Over Target Shading",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1620348420,
["Icon"] = 237377,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 25,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["Options"] = {
},
["Desc"] = "Set the spark height to the same size of the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Adjust Spark Size",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1620348421,
["Icon"] = "Interface\\AddOns\\Plater\\images\\spark6",
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 71,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show power bar for some units.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShowPowerBarForUnit (unitFrame)    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --power bar options:\n    \n    --for which units it should\n    envTable.ShowForEnemyPlayers = true\n    envTable.ShowForEnemyNpcs = false\n    \n    --specific npcs, can be the npc name or npcId\n    --this list work even if the ShowForEnemyNpcs is false\n    envTable.SpecificNpcs = {\n        [\"the rock\"] = true, --npc name\n        [225] = true, --npcId\n    }\n    \n    --anchor the power bar to\n    envTable.Anchor = {\n        side = 13, --inside the healthbar, bottom side\n        x = 0, \n        y = 0,\n    }\n    \n    --power bar height\n    envTable.Height = 1\n    \n    --power bar percent text\n    envTable.PercentTextEnabled = false\n    envTable.PercentTextAnchor = {\n        side = 7, --top right\n        x = 2, \n        y = 0,\n    }\n    \n    \n    --private\n    function envTable.ShowPowerbar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        envTable.UpdatePowerbar (unitFrame)\n    end\n    \n    function envTable.UpdatePowerbar (unitFrame)\n        local powerBar = unitFrame.powerBar\n        Plater.SetAnchor (powerBar, envTable.Anchor, unitFrame.healthBar)\n        powerBar:SetSize (unitFrame.healthBar:GetWidth(), envTable.Height)\n        \n        envTable.SavePowerBarSize (unitFrame, envTable.Height)\n        \n        if (envTable.PercentTextEnabled) then\n            powerBar.percentText:Show()\n            --copy the font from the health percent\n            Plater:SetFontFace (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_font)\n            Plater:SetFontSize (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_size)\n            Plater.SetAnchor (powerBar.percentText, envTable.PercentTextAnchor)\n        else\n            powerBar.percentText:Hide()\n        end\n    end\n    \n    function envTable.CanShowPowerBarForUnit (unitFrame)\n        --check if the is in the special list to force show\n        local forceShowPowerBar = envTable.SpecificNpcs [unitFrame.namePlateNpcId] or envTable.SpecificNpcs [unitFrame.namePlateUnitName] or envTable.SpecificNpcs [unitFrame.namePlateUnitNameLower]\n        if (forceShowPowerBar) then\n            envTable.ShowPowerbar (unitFrame)\n            \n            --check if the unit is a enemy player\n        elseif (unitFrame.ActorType == \"enemyplayer\") then\n            if (envTable.ShowForEnemyPlayers) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n            \n            --check if the unit is a enemy npc\n        elseif (unitFrame.ActorType == \"enemynpc\") then\n            if (envTable.ShowForEnemyNpcs) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n        end\n    end\n    \n    function envTable.SavePowerBarSize (unitFrame, height)\n        local plateConfigs = Plater.db.profile.plate_config [unitFrame.ActorType]\n        plateConfigs.mana[1] = plateConfigs.health[1]\n        plateConfigs.mana[2] = height\n        plateConfigs.mana_incombat[1] = plateConfigs.health_incombat[1]\n        plateConfigs.mana_incombat[2] = height\n    end\nend\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1620346758,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Power Bar",
["Icon"] = "Interface/Addons/Plater/Media/fire_64",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
["iconOnLeftSide"] = false,
["showIcon"] = false,
["useFullSize"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1620347016,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 352,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Icon Settings:",
["Name"] = "Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showIcon",
["Value"] = true,
["Name"] = "Show Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Key"] = "iconOnLeftSide",
["Value"] = true,
["Name"] = "Icon on Left Side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Key"] = "iconSizeOffset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size Offset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Key"] = "iconPadding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Padding",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option5",
["Value"] = "Can't Interrupt Texture:",
["Name"] = "Interrupt Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTexture",
["Value"] = true,
["Name"] = "Show Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Key"] = "iconTexturePath",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Name"] = "Texture Path",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Key"] = "desaturatedTexture",
["Value"] = true,
["Name"] = "Texture Desaturated",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Key"] = "textureWidth",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Width",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Key"] = "textureHeightMod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Height Mod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Key"] = "texturePosition",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Position",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
["LastHookEdited"] = "",
["Name"] = "Cast Bar Icon Settings [P]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local name = unitFrame.healthBar.unitName:GetText()\n    \n    if (name) then\n        unitFrame.healthBar.unitName:SetText(name:gsub('(%S+) ',function(t) return t:sub(0,0)..'' end))\n    end\nend\n\n\n\n\n\n\n\n",
},
["Time"] = 1722754374,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/Rcm39UnZV/2",
["Icon"] = "INTERFACE\\ICONS\\Ability_Spy",
["Enabled"] = true,
["Revision"] = 451,
["semver"] = "1.0.1",
["Author"] = "Zenshoes-Area 52",
["Desc"] = "Abbreviates names on nameplates",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "Nameplate Updated",
["Name"] = "Abbreviated Names",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1711812508,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 43,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Name"] = "Force Threat Color",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Cast Update",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local spec = GetSpecialization()\n    envTable.spec = spec\n    if envTable.class ~= 9 then\n        envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n    else\n        -- Special warlock logic because warlocks are special\n        if envTable.spec == 1 or envTable.spec == 3 then -- Aff & Destro\n            if IsSpellKnown(19647, true) then -- Felhunter\n                envTable.kickId = 119910\n            else -- Look for Grimoire of Sacrifice\n                local i, found = 1, false\n                local buff = UnitBuff(\"player\", i)\n                while buff do\n                    if buff == \"Grimoire of Sacrifice\" then\n                        found = true\n                        buff = nil\n                    else\n                        i = i + 1\n                        buff = UnitBuff(\"player\", i)\n                    end\n                end\n                if found == true then\n                    envTable.kickId = 132409\n                else \n                    envTable.kickId = nil\n                end\n            end\n        elseif spec == 2 then -- Demo\n            if IsSpellKnown(89766, true) then -- Felguard\n                envTable.kickId = 119914\n            elseif IsSpellKnown(19647, true) then -- Felhunter\n                envTable.kickId = 119910\n            else \n                envTable.kickId = nil \n            end\n        end\n    end\n    \n    -- Check for cast\n    local name, _, _, _, _, _, _, notInterruptible = UnitCastingInfo(unitId)\n    if name == nil then    \n        -- Check for channel\n        name, _, _, _, _, _, notInterruptible = UnitChannelInfo(unitId)\n        if name == nil then return end\n    end\n    envTable.notInterruptible = notInterruptible\n    \n    local InterruptCooldown = nil\n    if envTable.kickId ~= nil then\n        InterruptCooldown = GetSpellCooldown(envTable.kickId)\n    else\n        InterruptCooldown = 1\n    end\n    \n    if envTable.notInterruptible then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 0, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"protectedColor\"])\n    elseif InterruptCooldown > 0 then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"cooldownColor\"])\n    else\n        --Plater.SetCastBarBorderColor(unitFrame, 0, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"readyColor\"])\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Check if the unit is still casting (did someone else interrupt?)\n    local name = UnitCastingInfo(unitId) or UnitChannelInfo(unitId)\n    \n    if self.IsInterrupted then\n        Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n        return\n    end\n    \n    local InterruptCooldown = nil\n    if envTable.kickId ~= nil then\n        InterruptCooldown = GetSpellCooldown(envTable.kickId)\n    else\n        InterruptCooldown = 1\n    end\n    \n    if envTable.notInterruptible then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 0, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"protectedColor\"])\n    elseif InterruptCooldown > 0 then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"cooldownColor\"])\n    else\n        --Plater.SetCastBarBorderColor(unitFrame, 0, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"readyColor\"])\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local spec = GetSpecialization()\n    envTable.spec = spec\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1723225142,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 132219,
["Enabled"] = false,
["Revision"] = 385,
["semver"] = "",
["Author"] = "Verlijke-Mal'Ganis",
["Desc"] = "Changes the color of the nameplate castbar based on the current cooldown of the player's interrupt.",
["Prio"] = 99,
["Name"] = "Interrupt CD Indicator (Quazi)",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "readyColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Kick Ready Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar when your kick is ready to be used.",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
},
["last_news_time"] = 1702345503,
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["auras_per_row_amount2"] = 2,
["plater_resources_align"] = "horizontal",
["aura_width"] = 16,
["aura_height2"] = 12,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["cast_audiocues"] = {
[384524] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376683] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375727] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372222] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372223] = "nil",
[427176] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[382233] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323137] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372735] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[266209] = "nil",
[269843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388801] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340160] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[226406] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[197974] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[201226] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377204] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427376] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432031] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[447395] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[395184] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372107] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257870] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[256627] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333477] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[439621] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451543] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376892] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367521] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340300] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169929] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[419351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[434779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[422541] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[448105] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[422414] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[429427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[412215] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257397] = "nil",
[384868] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448619] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372311] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449130] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[437719] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[391118] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369061] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396665] = "nil",
[377732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[408141] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388060] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369828] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[164357] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[386660] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377034] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[188169] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385578] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[428293] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382712] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374361] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265540] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426893] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321834] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[440218] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372225] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[397931] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[397889] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[257756] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427342] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[453161] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[269029] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[331718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388392] = "nil",
[369573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427025] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257862] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372201] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[435012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387629] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[443500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376170] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427616] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426645] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[87618] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Jump.ogg",
[321968] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[393432] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320822] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[387950] = "nil",
[377559] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[209628] = "nil",
[268202] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[265019] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[441119] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[375348] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[431494] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200768] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[433662] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427869] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449090] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427359] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[425027] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[445457] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388911] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432198] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200291] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[156718] = "nil",
[388976] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411994] = "nil",
[434824] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[88308] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375327] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[188404] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[199151] = "nil",
[265721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[373742] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385536] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432520] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[416139] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432967] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[367484] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[375943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369409] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[383823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[372087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375251] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[391723] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260793] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[193505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[378818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[169179] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[462216] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265372] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[381525] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448640] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[450854] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257288] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[255567] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[413529] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[324323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426860] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[253721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
},
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[412129] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[427176] = {
true,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[426860] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[375351] = {
true,
"orangered",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[201226] = {
true,
"orangered",
"",
},
[377204] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[268260] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[257426] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[422541] = {
true,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[412215] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[375943] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[372311] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[333488] = {
true,
"orangered",
"",
},
[369061] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[272609] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[164357] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[411012] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[451496] = {
true,
"orangered",
"",
},
[428293] = {
true,
"orangered",
},
[382712] = {
true,
"orangered",
"",
},
[374361] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[426893] = {
true,
"orangered",
"",
},
[443500] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[391118] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[331718] = {
true,
"orangered",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[257756] = {
true,
"orchid",
"",
},
[427342] = {
true,
"orchid",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[257862] = {
true,
"orangered",
"",
},
[324323] = {
true,
"orangered",
"",
},
[388392] = {
true,
"darkorange",
"",
},
[340160] = {
true,
"orangered",
"",
},
[427025] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[434824] = {
true,
"orangered",
"",
},
[450854] = {
true,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[367484] = {
true,
"orchid",
"",
},
[427616] = {
true,
"orangered",
"",
},
[279118] = {
false,
"blue",
},
[268202] = {
true,
"orchid",
"",
},
[426645] = {
true,
"orangered",
},
[87618] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[265019] = {
true,
"orangered",
"",
},
[448640] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[462216] = {
true,
"orangered",
"",
},
[320822] = {
true,
"orchid",
"",
},
[375348] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[209628] = {
true,
"blue",
"",
},
[427869] = {
true,
"orangered",
"",
},
[226304] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[375251] = {
true,
"orangered",
"",
},
[200768] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[426905] = {
false,
"white",
"",
},
[449090] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[396812] = {
true,
"orchid",
"",
},
[416139] = {
true,
"orangered",
"",
},
[432198] = {
true,
"orangered",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[265721] = {
true,
"orangered",
"",
},
[188404] = {
true,
"orangered",
"",
},
[369828] = {
true,
"orchid",
"",
},
[385958] = {
true,
"orangered",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[372225] = {
true,
"orchid",
"",
},
[88308] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[373742] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[382277] = {
true,
"orangered",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[200291] = {
true,
"orchid",
"",
},
[384868] = {
true,
"orangered",
"",
},
[411994] = {
true,
"darkorange",
"",
},
[383823] = {
true,
"orchid",
"",
},
[372087] = {
true,
"orangered",
"",
},
[433662] = {
true,
"orchid",
"",
},
[412505] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[391723] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[387950] = {
true,
"orangered",
"",
},
[393432] = {
true,
"orangered",
"",
},
[257899] = {
false,
"lightslategray",
},
[265372] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[381525] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[426261] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[226296] = {
true,
"orangered",
"",
},
[255567] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[200913] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[199151] = {
true,
"blue",
"",
},
},
["pet_width_scale"] = 0.9999999403953552,
["ui_parent_cast_strata"] = "DIALOG",
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["extra_icon_timer_size"] = 10,
["target_highlight_color"] = {
nil,
0.52156862745098,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 3,
["semver"] = "1.0.2",
["plater_resources_padding"] = 2,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["extra_icon_show_enrage"] = true,
["aura_alpha"] = 0.84999996423721,
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["show_healthbars_on_not_attackable"] = true,
["plater_resources_show_number"] = false,
["first_run3"] = true,
["extra_icon_show_purge"] = true,
["ui_parent_scale_tune"] = 1.666666600439286,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "PlaterBackground",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 16,
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["health_statusbar_texture"] = "1.Reee",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Monk Statue"] = 2,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Players Targetting Amount"] = 4,
["Combo Points"] = 6,
["Extra Border"] = 2,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.09999999403953552,
["minor_width_scale"] = 0.9999999403953552,
["color_override"] = false,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["tocversion"] = 110002,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["aura_timer_text_font"] = "1.Gilroy",
["extra_icon_timer_font"] = "1.Gilroy",
["not_affecting_combat_alpha"] = 0.7999999523162842,
["extra_icon_stack_font"] = "1.Gilroy",
["aura_height"] = 12,
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["aura2_x_offset"] = 2.099990844726563,
["target_indicator"] = "NONE",
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["indicator_rare"] = false,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[190404] = {
true,
false,
"aqua",
},
[149740] = {
true,
false,
"fuchsia",
},
[213806] = {
true,
false,
"fuchsia",
},
[213934] = {
true,
false,
"aqua",
},
[196671] = {
true,
false,
"aqua",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[131585] = {
false,
false,
"navajowhite",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[212403] = {
true,
false,
"fuchsia",
},
[135167] = {
false,
false,
"peru",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[130435] = {
false,
false,
"magenta",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[40634] = {
true,
false,
"fuchsia",
},
[130436] = {
false,
false,
"aqua",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[134150] = {
false,
false,
"navajowhite",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[196043] = {
true,
false,
"fuchsia",
},
[184023] = {
true,
false,
"fuchsia",
},
[134024] = {
true,
false,
"fuchsia",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[132491] = {
false,
false,
"palegreen",
},
[196045] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[207939] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[223541] = {
true,
false,
"aqua",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[134157] = {
false,
false,
"peru",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[129227] = {
false,
false,
"maroon",
},
[131858] = {
false,
false,
"dodgerblue",
},
[129547] = {
false,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"aqua",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[219454] = {
true,
false,
"fuchsia",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
false,
false,
"honeydew",
},
[90997] = {
true,
false,
"aqua",
},
[207186] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[214348] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[132126] = {
false,
false,
"honeydew",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[186220] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[104300] = {
true,
false,
"fuchsia",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"aqua",
},
[139422] = {
false,
false,
"lightskyblue",
},
[168578] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"fuchsia",
},
[207453] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[213338] = {
true,
false,
"fuchsia",
},
[207456] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[207969] = {
true,
false,
"fuchsia",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[217561] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"fuchsia",
},
[205158] = {
true,
false,
"fuchsia",
},
[45919] = {
true,
false,
"aqua",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[134701] = {
false,
false,
"maroon",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[137516] = {
false,
false,
"lightsalmon",
},
[206697] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[132532] = {
false,
false,
"palegreen",
},
[164501] = {
false,
false,
"fuchsia",
},
[224219] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[224732] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[206065] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"magenta",
},
[214761] = {
true,
false,
"fuchsia",
},
[98813] = {
true,
false,
"fuchsia",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"fuchsia",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[134331] = {
false,
false,
"lightskyblue",
},
[133436] = {
false,
false,
"lightskyblue",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[199037] = {
true,
false,
"fuchsia",
},
[190342] = {
true,
false,
"fuchsia",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[195842] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[220141] = {
true,
false,
"fuchsia",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[130404] = {
false,
false,
"peru",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[194315] = {
true,
false,
"fuchsia",
},
[135365] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[136005] = {
false,
false,
"blue",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[136006] = {
false,
false,
"blue",
},
[169893] = {
true,
false,
"magenta",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[217208] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[133836] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[192789] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[138061] = {
false,
false,
"magenta",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[220158] = {
true,
false,
"aqua",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[138063] = {
false,
false,
"blue",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[138064] = {
false,
false,
"blue",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[153285] = {
false,
false,
"no color",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
false,
false,
"goldenrod",
},
[45930] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"fuchsia",
},
[40943] = {
true,
false,
"fuchsia",
},
[192800] = {
true,
false,
"fuchsia",
},
[211087] = {
true,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[135258] = {
false,
false,
"peru",
},
[220423] = {
true,
false,
"aqua",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[211089] = {
true,
false,
"aqua",
},
[113537] = {
true,
false,
"aqua",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[198047] = {
true,
false,
"fuchsia",
},
[128435] = {
false,
false,
"aqua",
},
[205337] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
false,
false,
"maroon",
},
[133345] = {
false,
false,
"goldenrod",
},
[195876] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[195877] = {
true,
false,
"fuchsia",
},
[98706] = {
true,
false,
"aqua",
},
[164804] = {
true,
false,
"aqua",
},
[195878] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
true,
false,
"fuchsia",
},
[220815] = {
true,
false,
"fuchsia",
},
[95766] = {
true,
false,
"aqua",
},
[205151] = {
true,
false,
"aqua",
},
[104270] = {
true,
false,
"fuchsia",
},
[129367] = {
true,
false,
"fuchsia",
},
[129553] = {
true,
false,
"fuchsia",
},
[205727] = {
true,
false,
"fuchsia",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[75459] = {
true,
false,
"fuchsia",
},
[134629] = {
false,
false,
"navajowhite",
},
[167493] = {
true,
false,
"fuchsia",
},
[170690] = {
true,
false,
"magenta",
},
[130485] = {
false,
false,
"peru",
},
[165919] = {
true,
false,
"fuchsia",
},
[138338] = {
true,
false,
"fuchsia",
},
[123227] = {
true,
false,
"fuchsia",
},
[216342] = {
true,
false,
"fuchsia",
},
[137484] = {
false,
false,
"lightskyblue",
},
[213932] = {
true,
false,
"fuchsia",
},
[131817] = {
true,
false,
"aqua",
},
[134417] = {
false,
false,
"lightskyblue",
},
[213913] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[211228] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[188067] = {
true,
false,
"fuchsia",
},
[131818] = {
false,
false,
"plum",
},
[184301] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[208193] = {
true,
false,
"fuchsia",
},
[136139] = {
false,
false,
"peru",
},
[165137] = {
true,
false,
"fuchsia",
},
[40167] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[131819] = {
true,
false,
"fuchsia",
},
[189235] = {
true,
false,
"fuchsia",
},
[98792] = {
true,
false,
"aqua",
},
[136295] = {
false,
false,
"peru",
},
[133482] = {
false,
false,
"maroon",
},
[131436] = {
true,
false,
"aqua",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[40633] = {
true,
false,
"aqua",
},
[95769] = {
true,
false,
"fuchsia",
},
[59552] = {
true,
false,
"fuchsia",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[133685] = {
true,
false,
"fuchsia",
},
[200137] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[141284] = {
false,
false,
"lightskyblue",
},
[193457] = {
true,
false,
"aqua",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[101991] = {
true,
false,
"fuchsia",
},
[113998] = {
true,
false,
"aqua",
},
[228540] = {
true,
false,
"fuchsia",
},
[134012] = {
false,
false,
"lightsalmon",
},
[130488] = {
false,
false,
"lightsalmon",
},
[129529] = {
false,
false,
"goldenrod",
},
[95834] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[128455] = {
true,
false,
"aqua",
},
[98370] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[194895] = {
true,
false,
"fuchsia",
},
[216293] = {
true,
false,
"fuchsia",
},
[130661] = {
false,
false,
"lightgreen",
},
[194894] = {
true,
false,
"fuchsia",
},
[208165] = {
true,
false,
"fuchsia",
},
[196115] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[133870] = {
true,
false,
"fuchsia",
},
[190294] = {
true,
false,
"fuchsia",
},
[95771] = {
true,
false,
"fuchsia",
},
[75979] = {
true,
false,
"fuchsia",
},
[220314] = {
true,
false,
"fuchsia",
},
[164552] = {
true,
false,
"fuchsia",
},
[194317] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[47238] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[166275] = {
true,
false,
"fuchsia",
},
[196044] = {
true,
false,
"fuchsia",
},
[184132] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[224271] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[163503] = {
true,
false,
"fuchsia",
},
[193462] = {
true,
false,
"fuchsia",
},
[98691] = {
false,
false,
"aqua",
},
[168318] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"fuchsia",
},
[204918] = {
true,
false,
"fuchsia",
},
[163458] = {
true,
false,
"fuchsia",
},
[207468] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[134144] = {
false,
false,
"lightgreen",
},
[200126] = {
true,
false,
"fuchsia",
},
[192333] = {
true,
false,
"fuchsia",
},
[163157] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[84990] = {
true,
false,
"fuchsia",
},
[189340] = {
true,
false,
"aqua",
},
[189265] = {
true,
false,
"fuchsia",
},
[131586] = {
false,
false,
"peru",
},
[197698] = {
true,
false,
"aqua",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[129788] = {
true,
false,
"fuchsia",
},
[136186] = {
false,
false,
"honeydew",
},
[204206] = {
true,
false,
"fuchsia",
},
[184130] = {
true,
false,
"aqua",
},
[199603] = {
true,
false,
"fuchsia",
},
[189266] = {
true,
false,
"aqua",
},
[131318] = {
false,
false,
"fuchsia",
},
[59555] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"fuchsia",
},
[133593] = {
false,
false,
"honeydew",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[208438] = {
true,
false,
"aqua",
},
[134139] = {
false,
false,
"lightskyblue",
},
[125977] = {
false,
false,
"plum",
},
[168418] = {
true,
false,
"fuchsia",
},
[137713] = {
false,
false,
"paleturquoise",
},
[102232] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[189247] = {
true,
false,
"fuchsia",
},
[135239] = {
false,
false,
"paleturquoise",
},
[206064] = {
true,
false,
"fuchsia",
},
[98275] = {
true,
false,
"aqua",
},
[167876] = {
true,
false,
"magenta",
},
[136934] = {
false,
false,
"navajowhite",
},
[139949] = {
false,
false,
"honeydew",
},
[206698] = {
true,
false,
"fuchsia",
},
[91001] = {
true,
false,
"aqua",
},
[126919] = {
true,
false,
"fuchsia",
},
[134284] = {
true,
false,
"fuchsia",
},
[196798] = {
true,
false,
"fuchsia",
},
[136353] = {
false,
false,
"royalblue",
},
[197912] = {
true,
false,
"fuchsia",
},
[43873] = {
true,
false,
"aqua",
},
[190381] = {
true,
false,
"fuchsia",
},
[133432] = {
false,
false,
"lightskyblue",
},
[216338] = {
true,
false,
"aqua",
},
[220195] = {
true,
false,
"fuchsia",
},
[223253] = {
true,
false,
"fuchsia",
},
[141285] = {
false,
false,
"lightgreen",
},
[137716] = {
false,
false,
"blue",
},
[223776] = {
true,
false,
"fuchsia",
},
[133430] = {
false,
false,
"cornflowerblue",
},
[135474] = {
true,
false,
"fuchsia",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[95842] = {
true,
false,
"fuchsia",
},
[190405] = {
true,
false,
"fuchsia",
},
[207459] = {
true,
false,
"fuchsia",
},
[205363] = {
true,
false,
"fuchsia",
},
[134418] = {
false,
false,
"dodgerblue",
},
[168942] = {
true,
false,
"fuchsia",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[122971] = {
true,
false,
"fuchsia",
},
[191847] = {
true,
false,
"fuchsia",
},
[190407] = {
true,
false,
"fuchsia",
},
[174802] = {
true,
false,
"fuchsia",
},
[136549] = {
true,
false,
"aqua",
},
[190403] = {
true,
false,
"aqua",
},
[129600] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[211290] = {
true,
false,
"fuchsia",
},
[207198] = {
true,
false,
"fuchsia",
},
[134364] = {
false,
false,
"honeydew",
},
[187897] = {
true,
false,
"aqua",
},
[160495] = {
true,
false,
"magenta",
},
},
["extra_icon_height"] = 10,
["castbar_target_outline"] = "NONE",
["aura_grow_direction"] = 3,
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["plater_resources_grow_direction"] = "center",
["extra_icon_caster_font"] = "1.Gilroy",
["castbar_framelevel"] = 0,
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["health_statusbar_bgcolor"] = {
0.0431372,
0.0431372,
0.0431372,
1,
},
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateMinScale"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateOtherTopInset"] = "0.085",
["nameplateLargeTopInset"] = "0.085",
["nameplateSelfBottomInset"] = "0.2",
["ShowClassColorInNameplate"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateSelfTopInset"] = "0.5",
["nameplateSelfAlpha"] = "0.75",
["nameplateOccludedAlphaMult"] = "1",
["nameplateTargetRadialPosition"] = "1",
},
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["pet_height_scale"] = 0.9999999403953552,
["login_counter"] = 19171,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
92,
1,
},
["aura_x_offset"] = 0,
["aura_sort"] = true,
["blizzard_nameplate_font_size"] = 10,
["aura_tracker"] = {
["debuff_banned"] = {
["331653"] = true,
["330911"] = true,
["327980"] = true,
["284678"] = true,
["281242"] = true,
["299151"] = true,
["340007"] = true,
},
["buff_banned"] = {
["206150"] = true,
["333553"] = true,
["61574"] = true,
["281242"] = true,
["61573"] = true,
},
["debuff_tracked"] = {
["341408"] = true,
["281242"] = true,
["342938"] = true,
["324652"] = false,
},
["debuff"] = {
224991,
277950,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
[227931] = true,
[163689] = true,
["329181"] = false,
},
},
["plater_resources_personal_bar"] = false,
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["target_highlight_alpha"] = 1,
["plater_resources_show"] = false,
["patch_version"] = 37,
["blizzard_nameplate_font"] = "1.Gilroy",
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["target_shady_alpha"] = 0.59999996423721,
["target_highlight_height"] = 18,
["no_spellname_length_limit"] = true,
["aura_stack_font"] = "1.Gilroy",
["version"] = 3,
["target_shady_enabled"] = false,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["aura_width2"] = 16,
["aura_cooldown_show_swipe"] = false,
["plater_resources_scale"] = 0.8,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["buff_frame_anchor_and_size_migrated"] = true,
["castbar_target_anchor"] = {
["side"] = 11,
},
["indicator_elite"] = false,
["castbar_target_font"] = "1.Gilroy",
["cast_statusbar_texture"] = "1.Reee",
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Unit - Show Energy"] = 11,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Unit Power"] = 1,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - Voidzone [P]"] = 2,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Cast - Heroic Leap [P]"] = 3,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Explode on Die [P]"] = 1,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Countdown"] = 11,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Cast - AoE With Range [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - On Going Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Unit - Important"] = 11,
["Aura - Buff Alert"] = 15,
["Cast - Important Target [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Quick Flash"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Spiteful Affix"] = 3,
["Cast - Debuff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Add - Warning [P]"] = 5,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Auto Set Skull"] = 11,
["Color Change"] = 1,
["Cast - Alert + Timer [P]"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Important by Color [P]"] = 2,
["Aura Border Color"] = 1,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Tank Interrupt"] = 12,
["Cast - Shining Green [P]"] = 3,
["Blink by Time Left"] = 1,
["Fixate On You"] = 11,
},
["cast_statusbar_spark_width"] = 25,
["cast_statusbar_spark_offset"] = -13,
},
["Default"] = {
["use_ui_parent"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Unit - Show Energy"] = 11,
["Cast - Shining Green [P]"] = 3,
["Cast - Important Target [P]"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Add - Explode on Die [P]"] = 1,
["Cast - Quick Flash"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Cast - On Going Cast [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Voidzone [P]"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Aura - Is Cast Bar [P]"] = 1,
["Auto Set Skull"] = 11,
["Cast - Very Important"] = 15,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Circular Swipe"] = 4,
["Spiteful Affix"] = 3,
["Countdown"] = 11,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Add - Warning [P]"] = 5,
["Cast - Stop Casting"] = 4,
["Cast - Heroic Leap [P]"] = 3,
["Fixate On You"] = 11,
},
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = false,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["NpcNames"] = {
},
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Effect After Cast [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Explosion Affix M+ [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Debuff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Alert + Timer [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameplateSizeOffset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullAlpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Key"] = "skullScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Key"] = "timeleftToBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Timeleft to Blink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "blinkSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "blinkMaxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Key"] = "timeLeftWarning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Key"] = "timeLeftCritical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Tag Number [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = false,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Important Target [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Name"] = "Frame Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Warning [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura While Casting [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = false,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = false,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Circle AoE [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "rotationDuration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureScale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["NpcNames"] = {
"174773",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "M+ Spiteful",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Quick Flash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Non Elite Trash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Scale",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Shield Interrupt [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Countdown",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Auto Set Skull",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Unit - Show Energy [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Stop Casting [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["Icon"] = 1029718,
["Enabled"] = true,
["Revision"] = 269,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Fixate [Plater]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604087921,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 266,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["NpcNames"] = {
},
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = true,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Important by Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = true,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Shining Green [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"214840",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = true,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Special Ability [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Heroic Leap [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = true,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Spark Width Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkWithScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Key"] = "sparkHeightScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Spark Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Heal Stun [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = true,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.05,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.9,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE Hit All [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = true,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Debuff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Simple Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Name"] = "Blink Min Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "maxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - Ongoing Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["version"] = -1,
["Name"] = "Cast - Heal Cut [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = true,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Voidzone [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.8,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE With Range [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura - Is Cast Bar [P]",
["NpcNames"] = {
},
},
},
["aura2_x_offset"] = 0,
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["Time"] = 1547392935,
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Color Automation [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1541606242,
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Hide Neutral Units [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 93,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Time"] = 1596791840,
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["version"] = -1,
["Name"] = "Reorder Nameplate [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 574574,
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1554138845,
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
},
["Name"] = "Don't Have Aura [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["Time"] = 1547409079,
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Name"] = "Extra Border [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1552354619,
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Current Target Color [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 348,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Icon Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconSizeOffset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Key"] = "iconPadding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Name"] = "Texture Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureWidth",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Key"] = "textureHeightMod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Texture Position",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "texturePosition",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Time"] = 1597097268,
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["version"] = -1,
["Name"] = "Cast Bar Icon Settings [P]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Ahwa-Azralon",
["Time"] = 1547406548,
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Execute Range [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 363,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Time"] = 1620377377,
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["version"] = -1,
["Name"] = "Attacking Specific Unit [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 284,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1621935143,
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["version"] = -1,
["Name"] = "Combo Points [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 135426,
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1548278227,
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Name"] = "Players Targeting a Target [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 356,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Time"] = 1608663128,
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = -1,
["Name"] = "Aura Reorder [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["LastHookEdited"] = "",
},
},
["aura_x_offset"] = 0,
["first_run3"] = true,
["resources_settings"] = {
["chr"] = {
["Player-3391-0CE8D70A"] = "Essence",
["Player-3391-0CE9D30D"] = "Runes",
["Player-3391-0C8D299C"] = "SoulShards",
["Player-3391-0B94A9F7"] = "HolyPower",
["Player-3391-0BEAA015"] = "Runes",
["Player-3391-0CFD8174"] = "HolyPower",
["Player-3391-0CD6D7CB"] = "Chi",
["Player-3391-0C85C8E4"] = "ComboPoints",
},
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["ui_parent_scale_tune"] = 1,
["ghost_auras"] = {
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PALADIN"] = {
[5] = {
},
},
},
},
["number_region_first_run"] = true,
["aura2_y_offset"] = 5,
["login_counter"] = 25,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["NpcNames"] = {
},
["Name"] = "Cast - Alert + Timer [P]",
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1724221024,
},
},
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Hide Neutral Units"] = 1,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Combo Points"] = 6,
["Attacking Specific Unit"] = 2,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Extra Border"] = 2,
},
["aura_tracker"] = {
["buff_tracked"] = {
[209859] = true,
},
},
["plate_config"] = {
["global_health_height"] = 12,
["global_health_width"] = 112,
},
["patch_version"] = 37,
["aura_y_offset"] = 5,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2024-11-15 13:09:13 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-14 22:39:04 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-14 22:04:46 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-14 11:51:42 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-13 10:30:52 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-13 09:15:58 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-13 08:23:32 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-12 21:36:21 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-12 20:29:35 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-12 19:57:31 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-12 14:37:27 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-12 13:58:26 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-12 13:24:17 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-12 08:34:07 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-11 21:37:29 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-11 17:37:04 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Strongfist",
"2024-11-11 17:13:05 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-11 17:03:43 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
"2024-11-11 10:52:00 | INIT | Plater-v595-Retail | Framework v580 | 11.0.5 | enUS | Furìà",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
